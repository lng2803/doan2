
DA_VER_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c8  080057c8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d0  080057d0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080057d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000001e0  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113b1  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218e  00000000  00000000  00031469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  000335f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f60  00000000  00000000  00034608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021acb  00000000  00000000  00035568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127ef  00000000  00000000  00057033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf4b  00000000  00000000  00069822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013776d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004880  00000000  00000000  001377c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005730 	.word	0x08005730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005730 	.word	0x08005730

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800057e:	4a38      	ldr	r2, [pc, #224]	; (8000660 <HD44780_Init+0xec>)
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <HD44780_Init+0xf0>)
 8000586:	2208      	movs	r2, #8
 8000588:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <HD44780_Init+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000590:	4b33      	ldr	r3, [pc, #204]	; (8000660 <HD44780_Init+0xec>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d907      	bls.n	80005a8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <HD44780_Init+0xf4>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <HD44780_Init+0xf4>)
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e006      	b.n	80005b6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <HD44780_Init+0xf4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <HD44780_Init+0xf4>)
 80005b4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005b6:	f000 f985 	bl	80008c4 <DelayInit>
  HAL_Delay(50);
 80005ba:	2032      	movs	r0, #50	; 0x32
 80005bc:	f001 f93c 	bl	8001838 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <HD44780_Init+0xf0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f943 	bl	8000850 <ExpanderWrite>
  HAL_Delay(1000);
 80005ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ce:	f001 f933 	bl	8001838 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005d2:	2030      	movs	r0, #48	; 0x30
 80005d4:	f000 f92b 	bl	800082e <Write4Bits>
  DelayUS(4500);
 80005d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005dc:	f000 f99c 	bl	8000918 <DelayUS>

  Write4Bits(0x03 << 4);
 80005e0:	2030      	movs	r0, #48	; 0x30
 80005e2:	f000 f924 	bl	800082e <Write4Bits>
  DelayUS(4500);
 80005e6:	f241 1094 	movw	r0, #4500	; 0x1194
 80005ea:	f000 f995 	bl	8000918 <DelayUS>

  Write4Bits(0x03 << 4);
 80005ee:	2030      	movs	r0, #48	; 0x30
 80005f0:	f000 f91d 	bl	800082e <Write4Bits>
  DelayUS(4500);
 80005f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80005f8:	f000 f98e 	bl	8000918 <DelayUS>

  Write4Bits(0x02 << 4);
 80005fc:	2020      	movs	r0, #32
 80005fe:	f000 f916 	bl	800082e <Write4Bits>
  DelayUS(100);
 8000602:	2064      	movs	r0, #100	; 0x64
 8000604:	f000 f988 	bl	8000918 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <HD44780_Init+0xf4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f043 0320 	orr.w	r3, r3, #32
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f8ce 	bl	80007b4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <HD44780_Init+0xf8>)
 800061a:	2204      	movs	r2, #4
 800061c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800061e:	f000 f875 	bl	800070c <HD44780_Display>
  HD44780_Clear();
 8000622:	f000 f82b 	bl	800067c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HD44780_Init+0xfc>)
 8000628:	2202      	movs	r2, #2
 800062a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <HD44780_Init+0xfc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f8bc 	bl	80007b4 <SendCommand>
  DelayUS(4500);
 800063c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000640:	f000 f96a 	bl	8000918 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000644:	490b      	ldr	r1, [pc, #44]	; (8000674 <HD44780_Init+0x100>)
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f876 	bl	8000738 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800064c:	490a      	ldr	r1, [pc, #40]	; (8000678 <HD44780_Init+0x104>)
 800064e:	2001      	movs	r0, #1
 8000650:	f000 f872 	bl	8000738 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000654:	f000 f81d 	bl	8000692 <HD44780_Home>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000a7 	.word	0x200000a7
 8000664:	200000a8 	.word	0x200000a8
 8000668:	200000a4 	.word	0x200000a4
 800066c:	200000a5 	.word	0x200000a5
 8000670:	200000a6 	.word	0x200000a6
 8000674:	20000000 	.word	0x20000000
 8000678:	20000008 	.word	0x20000008

0800067c <HD44780_Clear>:

void HD44780_Clear()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f897 	bl	80007b4 <SendCommand>
  DelayUS(2000);
 8000686:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068a:	f000 f945 	bl	8000918 <DelayUS>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}

08000692 <HD44780_Home>:

void HD44780_Home()
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000696:	2002      	movs	r0, #2
 8000698:	f000 f88c 	bl	80007b4 <SendCommand>
  DelayUS(2000);
 800069c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a0:	f000 f93a 	bl	8000918 <DelayUS>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HD44780_SetCursor+0x5c>)
 80006ba:	f107 0408 	add.w	r4, r7, #8
 80006be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HD44780_SetCursor+0x60>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d303      	bcc.n	80006d6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HD44780_SetCursor+0x60>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	3318      	adds	r3, #24
 80006dc:	443b      	add	r3, r7
 80006de:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4413      	add	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f85d 	bl	80007b4 <SendCommand>
}
 80006fa:	bf00      	nop
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	08005748 	.word	0x08005748
 8000708:	200000a7 	.word	0x200000a7

0800070c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HD44780_Display+0x28>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HD44780_Display+0x28>)
 800071c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HD44780_Display+0x28>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f843 	bl	80007b4 <SendCommand>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000a5 	.word	0x200000a5

08000738 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000756:	b25b      	sxtb	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f82a 	bl	80007b4 <SendCommand>
  for (int i=0; i<8; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e009      	b.n	800077a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f82e 	bl	80007d0 <SendChar>
  for (int i=0; i<8; i++)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b07      	cmp	r3, #7
 800077e:	ddf2      	ble.n	8000766 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000792:	e006      	b.n	80007a2 <HD44780_PrintStr+0x18>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f817 	bl	80007d0 <SendChar>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f4      	bne.n	8000794 <HD44780_PrintStr+0xa>
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f812 	bl	80007ec <Send>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f804 	bl	80007ec <Send>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f023 030f 	bic.w	r3, r3, #15
 8000802:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	4313      	orrs	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f80b 	bl	800082e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000818:	7bba      	ldrb	r2, [r7, #14]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	4313      	orrs	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f804 	bl	800082e <Write4Bits>
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f808 	bl	8000850 <ExpanderWrite>
  PulseEnable(value);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f820 	bl	8000888 <PulseEnable>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <ExpanderWrite+0x30>)
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4313      	orrs	r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000866:	f107 020f 	add.w	r2, r7, #15
 800086a:	230a      	movs	r3, #10
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	214e      	movs	r1, #78	; 0x4e
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <ExpanderWrite+0x34>)
 8000874:	f001 fcae 	bl	80021d4 <HAL_I2C_Master_Transmit>
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000a8 	.word	0x200000a8
 8000884:	200000ac 	.word	0x200000ac

08000888 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffd8 	bl	8000850 <ExpanderWrite>
  DelayUS(20);
 80008a0:	2014      	movs	r0, #20
 80008a2:	f000 f839 	bl	8000918 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f023 0304 	bic.w	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ffce 	bl	8000850 <ExpanderWrite>
  DelayUS(20);
 80008b4:	2014      	movs	r0, #20
 80008b6:	f000 f82f 	bl	8000918 <DelayUS>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <DelayInit>:

static void DelayInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <DelayInit+0x4c>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4a10      	ldr	r2, [pc, #64]	; (8000910 <DelayInit+0x4c>)
 80008ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008d2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <DelayInit+0x4c>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <DelayInit+0x4c>)
 80008da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008de:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <DelayInit+0x50>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <DelayInit+0x50>)
 80008e6:	f023 0301 	bic.w	r3, r3, #1
 80008ea:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <DelayInit+0x50>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <DelayInit+0x50>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <DelayInit+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008fe:	bf00      	nop
  __ASM volatile ("NOP");
 8000900:	bf00      	nop
  __ASM volatile ("NOP");
 8000902:	bf00      	nop
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000edf0 	.word	0xe000edf0
 8000914:	e0001000 	.word	0xe0001000

08000918 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <DelayUS+0x44>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <DelayUS+0x48>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	0c9a      	lsrs	r2, r3, #18
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	fb02 f303 	mul.w	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <DelayUS+0x4c>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <DelayUS+0x4c>)
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	429a      	cmp	r2, r3
 800094a:	d8f6      	bhi.n	800093a <DelayUS+0x22>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000018 	.word	0x20000018
 8000960:	431bde83 	.word	0x431bde83
 8000964:	e0001000 	.word	0xe0001000

08000968 <HAL_TIM_IC_CaptureCallback>:
uint8_t running = 1;

uint32_t counter = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000978:	6013      	str	r3, [r2, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000248 	.word	0x20000248

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fedf 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f999 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 fbc3 	bl	8001124 <MX_GPIO_Init>
  MX_I2C1_Init();
 800099e:	f000 f9ff 	bl	8000da0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009a2:	f000 fa2b 	bl	8000dfc <MX_TIM1_Init>
  MX_TIM4_Init();
 80009a6:	f000 fb1d 	bl	8000fe4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80009aa:	f000 fb91 	bl	80010d0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80009ae:	f000 fac5 	bl	8000f3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff fdde 	bl	8000574 <HD44780_Init>
  HD44780_Clear();
 80009b8:	f7ff fe60 	bl	800067c <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fe72 	bl	80006a8 <HD44780_SetCursor>
  HD44780_PrintStr("DO AN DIEU KHIEN");
 80009c4:	48a6      	ldr	r0, [pc, #664]	; (8000c60 <main+0x2d4>)
 80009c6:	f7ff fee0 	bl	800078a <HD44780_PrintStr>
	char str[6];
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009ca:	2100      	movs	r1, #0
 80009cc:	48a5      	ldr	r0, [pc, #660]	; (8000c64 <main+0x2d8>)
 80009ce:	f002 fc09 	bl	80031e4 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	49a4      	ldr	r1, [pc, #656]	; (8000c68 <main+0x2dc>)
 80009d6:	48a5      	ldr	r0, [pc, #660]	; (8000c6c <main+0x2e0>)
 80009d8:	f003 fd19 	bl	800440e <HAL_UART_Receive_DMA>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80009dc:	213c      	movs	r1, #60	; 0x3c
 80009de:	48a4      	ldr	r0, [pc, #656]	; (8000c70 <main+0x2e4>)
 80009e0:	f002 fd6e 	bl	80034c0 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float KP, KD, KI;
  KP = 7;
 80009e4:	4ba3      	ldr	r3, [pc, #652]	; (8000c74 <main+0x2e8>)
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  KI = 0.5;
 80009e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  KD = 15;
 80009ee:	4ba2      	ldr	r3, [pc, #648]	; (8000c78 <main+0x2ec>)
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

  Kp = KP/100;
 80009f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009f6:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8000c7c <main+0x2f0>
 80009fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fe:	4ba0      	ldr	r3, [pc, #640]	; (8000c80 <main+0x2f4>)
 8000a00:	edc3 7a00 	vstr	s15, [r3]
  Ki = KI/100;
 8000a04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000a08:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8000c7c <main+0x2f0>
 8000a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a10:	4b9c      	ldr	r3, [pc, #624]	; (8000c84 <main+0x2f8>)
 8000a12:	edc3 7a00 	vstr	s15, [r3]
  Kd = KD/100;
 8000a16:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000a1a:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000c7c <main+0x2f0>
 8000a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a22:	4b99      	ldr	r3, [pc, #612]	; (8000c88 <main+0x2fc>)
 8000a24:	edc3 7a00 	vstr	s15, [r3]
  Setpoint = 2000;
 8000a28:	4b98      	ldr	r3, [pc, #608]	; (8000c8c <main+0x300>)
 8000a2a:	4a99      	ldr	r2, [pc, #612]	; (8000c90 <main+0x304>)
 8000a2c:	601a      	str	r2, [r3, #0]
  uint16_t Position = 0, lastCounter = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a32:	2300      	movs	r3, #0
 8000a34:	86fb      	strh	r3, [r7, #54]	; 0x36
  while (1)
  {

		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0) {
 8000a36:	2110      	movs	r1, #16
 8000a38:	4896      	ldr	r0, [pc, #600]	; (8000c94 <main+0x308>)
 8000a3a:	f001 fa55 	bl	8001ee8 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d124      	bne.n	8000a8e <main+0x102>
			HAL_Delay(20);
 8000a44:	2014      	movs	r0, #20
 8000a46:	f000 fef7 	bl	8001838 <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0) {
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4891      	ldr	r0, [pc, #580]	; (8000c94 <main+0x308>)
 8000a4e:	f001 fa4b 	bl	8001ee8 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d11a      	bne.n	8000a8e <main+0x102>
				lastCounter = counter;
 8000a58:	4b8f      	ldr	r3, [pc, #572]	; (8000c98 <main+0x30c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	86fb      	strh	r3, [r7, #54]	; 0x36
				P = 0; I = 0; D = 0; PID = 0;
 8000a5e:	4b8f      	ldr	r3, [pc, #572]	; (8000c9c <main+0x310>)
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	4b8e      	ldr	r3, [pc, #568]	; (8000ca0 <main+0x314>)
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ca4 <main+0x318>)
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	4b8c      	ldr	r3, [pc, #560]	; (8000ca8 <main+0x31c>)
 8000a78:	f04f 0200 	mov.w	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
				last_error = 0; error = 0;
 8000a7e:	4b8b      	ldr	r3, [pc, #556]	; (8000cac <main+0x320>)
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	4b8a      	ldr	r3, [pc, #552]	; (8000cb0 <main+0x324>)
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
			}
		}

			if (running == 0) {
 8000a8e:	4b89      	ldr	r3, [pc, #548]	; (8000cb4 <main+0x328>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d11d      	bne.n	8000ad2 <main+0x146>
				lastCounter = counter;
 8000a96:	4b80      	ldr	r3, [pc, #512]	; (8000c98 <main+0x30c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
				P = 0; I = 0; D = 0; PID = 0;
 8000a9c:	4b7f      	ldr	r3, [pc, #508]	; (8000c9c <main+0x310>)
 8000a9e:	f04f 0200 	mov.w	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	4b7e      	ldr	r3, [pc, #504]	; (8000ca0 <main+0x314>)
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	4b7d      	ldr	r3, [pc, #500]	; (8000ca4 <main+0x318>)
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4b7c      	ldr	r3, [pc, #496]	; (8000ca8 <main+0x31c>)
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
				last_error = 0; error = 0;
 8000abc:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <main+0x320>)
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	4b7a      	ldr	r3, [pc, #488]	; (8000cb0 <main+0x324>)
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
				running = 1;
 8000acc:	4b79      	ldr	r3, [pc, #484]	; (8000cb4 <main+0x328>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
			}
	Position = counter - lastCounter;
 8000ad2:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <main+0x30c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	847b      	strh	r3, [r7, #34]	; 0x22
    Input = Position;
 8000ade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae8:	4b73      	ldr	r3, [pc, #460]	; (8000cb8 <main+0x32c>)
 8000aea:	edc3 7a00 	vstr	s15, [r3]

		sprintf(str, "%ld", (uint32_t)Setpoint);
 8000aee:	4b67      	ldr	r3, [pc, #412]	; (8000c8c <main+0x300>)
 8000af0:	edd3 7a00 	vldr	s15, [r3]
 8000af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	ee17 2a90 	vmov	r2, s15
 8000b00:	496e      	ldr	r1, [pc, #440]	; (8000cbc <main+0x330>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 f9a6 	bl	8004e54 <siprintf>
		HD44780_SetCursor(11,1);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	200b      	movs	r0, #11
 8000b0c:	f7ff fdcc 	bl	80006a8 <HD44780_SetCursor>
		HD44780_PrintStr(str);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe38 	bl	800078a <HD44780_PrintStr>

    error = Setpoint - Input;
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <main+0x300>)
 8000b1c:	ed93 7a00 	vldr	s14, [r3]
 8000b20:	4b65      	ldr	r3, [pc, #404]	; (8000cb8 <main+0x32c>)
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b2a:	4b61      	ldr	r3, [pc, #388]	; (8000cb0 <main+0x324>)
 8000b2c:	edc3 7a00 	vstr	s15, [r3]
    P = Kp * error;
 8000b30:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <main+0x2f4>)
 8000b32:	ed93 7a00 	vldr	s14, [r3]
 8000b36:	4b5e      	ldr	r3, [pc, #376]	; (8000cb0 <main+0x324>)
 8000b38:	edd3 7a00 	vldr	s15, [r3]
 8000b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b40:	4b56      	ldr	r3, [pc, #344]	; (8000c9c <main+0x310>)
 8000b42:	edc3 7a00 	vstr	s15, [r3]
    I += Ki * error * dt;
 8000b46:	4b4f      	ldr	r3, [pc, #316]	; (8000c84 <main+0x2f8>)
 8000b48:	ed93 7a00 	vldr	s14, [r3]
 8000b4c:	4b58      	ldr	r3, [pc, #352]	; (8000cb0 <main+0x324>)
 8000b4e:	edd3 7a00 	vldr	s15, [r3]
 8000b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b56:	4b5a      	ldr	r3, [pc, #360]	; (8000cc0 <main+0x334>)
 8000b58:	edd3 7a00 	vldr	s15, [r3]
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	4b4f      	ldr	r3, [pc, #316]	; (8000ca0 <main+0x314>)
 8000b62:	edd3 7a00 	vldr	s15, [r3]
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <main+0x314>)
 8000b6c:	edc3 7a00 	vstr	s15, [r3]
    D = Kd * (error - last_error) / dt;
 8000b70:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <main+0x324>)
 8000b72:	ed93 7a00 	vldr	s14, [r3]
 8000b76:	4b4d      	ldr	r3, [pc, #308]	; (8000cac <main+0x320>)
 8000b78:	edd3 7a00 	vldr	s15, [r3]
 8000b7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b80:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <main+0x2fc>)
 8000b82:	edd3 7a00 	vldr	s15, [r3]
 8000b86:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b8a:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <main+0x334>)
 8000b8c:	ed93 7a00 	vldr	s14, [r3]
 8000b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <main+0x318>)
 8000b96:	edc3 7a00 	vstr	s15, [r3]
    PID = P + I + D;
 8000b9a:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <main+0x310>)
 8000b9c:	ed93 7a00 	vldr	s14, [r3]
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <main+0x314>)
 8000ba2:	edd3 7a00 	vldr	s15, [r3]
 8000ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <main+0x318>)
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb4:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <main+0x31c>)
 8000bb6:	edc3 7a00 	vstr	s15, [r3]
    last_error = error;
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <main+0x324>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a3b      	ldr	r2, [pc, #236]	; (8000cac <main+0x320>)
 8000bc0:	6013      	str	r3, [r2, #0]
    int speed = PID;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <main+0x31c>)
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bcc:	ee17 3a90 	vmov	r3, s15
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
	  if (speed > 100) {
 8000bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd4:	2b64      	cmp	r3, #100	; 0x64
 8000bd6:	dd02      	ble.n	8000bde <main+0x252>
		  speed = 100;
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
 8000bdc:	e006      	b.n	8000bec <main+0x260>
	  }
	  else if (speed < -100) {
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000be4:	da02      	bge.n	8000bec <main+0x260>
		  speed = -100;
 8000be6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
	  }
    Motor_Control(speed);
 8000bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bee:	f000 fb33 	bl	8001258 <Motor_Control>
	  HAL_Delay(dt);
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <main+0x334>)
 8000bf4:	edd3 7a00 	vldr	s15, [r3]
 8000bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bfc:	ee17 0a90 	vmov	r0, s15
 8000c00:	f000 fe1a 	bl	8001838 <HAL_Delay>

	  char buffer[16];
	  int len = sprintf(buffer, "%ld\r\n", Position);
 8000c04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	492e      	ldr	r1, [pc, #184]	; (8000cc4 <main+0x338>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 f922 	bl	8004e54 <siprintf>
 8000c10:	61f8      	str	r0, [r7, #28]
//	  if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, HAL_MAX_DELAY) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }

	  sprintf(str, "%ld", Position);
 8000c12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4928      	ldr	r1, [pc, #160]	; (8000cbc <main+0x330>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 f91a 	bl	8004e54 <siprintf>

	  if (Position < 1000) {
 8000c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c26:	d210      	bcs.n	8000c4a <main+0x2be>
			HD44780_SetCursor(0,1);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fd3c 	bl	80006a8 <HD44780_SetCursor>
			HD44780_PrintStr(" ");
 8000c30:	4825      	ldr	r0, [pc, #148]	; (8000cc8 <main+0x33c>)
 8000c32:	f7ff fdaa 	bl	800078a <HD44780_PrintStr>
			HD44780_SetCursor(1,1);
 8000c36:	2101      	movs	r1, #1
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fd35 	bl	80006a8 <HD44780_SetCursor>
			HD44780_PrintStr(str);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fda1 	bl	800078a <HD44780_PrintStr>
 8000c48:	e6f5      	b.n	8000a36 <main+0xaa>
	  } else {
			HD44780_SetCursor(0,1);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fd2b 	bl	80006a8 <HD44780_SetCursor>
			HD44780_PrintStr(str);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fd97 	bl	800078a <HD44780_PrintStr>
  {
 8000c5c:	e6eb      	b.n	8000a36 <main+0xaa>
 8000c5e:	bf00      	nop
 8000c60:	08005758 	.word	0x08005758
 8000c64:	20000190 	.word	0x20000190
 8000c68:	2000024c 	.word	0x2000024c
 8000c6c:	200001d8 	.word	0x200001d8
 8000c70:	20000148 	.word	0x20000148
 8000c74:	40e00000 	.word	0x40e00000
 8000c78:	41700000 	.word	0x41700000
 8000c7c:	42c80000 	.word	0x42c80000
 8000c80:	20000224 	.word	0x20000224
 8000c84:	20000228 	.word	0x20000228
 8000c88:	2000022c 	.word	0x2000022c
 8000c8c:	20000220 	.word	0x20000220
 8000c90:	44fa0000 	.word	0x44fa0000
 8000c94:	40021000 	.word	0x40021000
 8000c98:	20000248 	.word	0x20000248
 8000c9c:	20000230 	.word	0x20000230
 8000ca0:	20000234 	.word	0x20000234
 8000ca4:	20000238 	.word	0x20000238
 8000ca8:	2000023c 	.word	0x2000023c
 8000cac:	20000240 	.word	0x20000240
 8000cb0:	20000244 	.word	0x20000244
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	2000021c 	.word	0x2000021c
 8000cbc:	0800576c 	.word	0x0800576c
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	08005770 	.word	0x08005770
 8000cc8:	08005778 	.word	0x08005778

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 f8b2 	bl	8004e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <SystemClock_Config+0xcc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d30:	2310      	movs	r3, #16
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d34:	2302      	movs	r3, #2
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d40:	23a8      	movs	r3, #168	; 0xa8
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fd47 	bl	80027e4 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d5c:	f000 faac 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 ffa8 	bl	8002cd4 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d8a:	f000 fa95 	bl	80012b8 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3750      	adds	r7, #80	; 0x50
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <MX_I2C1_Init+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_I2C1_Init+0x58>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dde:	f001 f8b5 	bl	8001f4c <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 fa66 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000ac 	.word	0x200000ac
 8000df4:	40005400 	.word	0x40005400
 8000df8:	000186a0 	.word	0x000186a0

08000dfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	; 0x58
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2220      	movs	r2, #32
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 f805 	bl	8004e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e3c:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <MX_TIM1_Init+0x13c>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e40:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e4c:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e66:	4833      	ldr	r0, [pc, #204]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e68:	f002 f914 	bl	8003094 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e72:	f000 fa21 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e80:	4619      	mov	r1, r3
 8000e82:	482c      	ldr	r0, [pc, #176]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e84:	f002 fd94 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e8e:	f000 fa13 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e92:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000e94:	f002 f94d 	bl	8003132 <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e9e:	f000 fa0b 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4820      	ldr	r0, [pc, #128]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000eb2:	f003 f97d 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ebc:	f000 f9fc 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000ee6:	f002 fca1 	bl	800382c <HAL_TIM_PWM_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ef0:	f000 f9e2 	bl	80012b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000f18:	f003 f9c6 	bl	80042a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000f22:	f000 f9c9 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MX_TIM1_Init+0x138>)
 8000f28:	f000 fac2 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 8000f2c:	bf00      	nop
 8000f2e:	3758      	adds	r7, #88	; 0x58
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000100 	.word	0x20000100
 8000f38:	40010000 	.word	0x40010000

08000f3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 ff7a 	bl	8004e44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_TIM2_Init+0xa4>)
 8000f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000f82:	2302      	movs	r3, #2
 8000f84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f86:	2301      	movs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000faa:	f002 f9e3 	bl	8003374 <HAL_TIM_Encoder_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000fb4:	f000 f980 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_TIM2_Init+0xa0>)
 8000fc6:	f003 f8f3 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000fd0:	f000 f972 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	; 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000148 	.word	0x20000148
 8000fe0:	0001869f 	.word	0x0001869f

08000fe4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <MX_TIM4_Init+0xe8>)
 8001018:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000;
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <MX_TIM4_Init+0xe4>)
 800101c:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001020:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_TIM4_Init+0xe4>)
 800102a:	2263      	movs	r2, #99	; 0x63
 800102c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800103a:	4823      	ldr	r0, [pc, #140]	; (80010c8 <MX_TIM4_Init+0xe4>)
 800103c:	f002 f82a 	bl	8003094 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001046:	f000 f937 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001054:	4619      	mov	r1, r3
 8001056:	481c      	ldr	r0, [pc, #112]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001058:	f002 fcaa 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001062:	f000 f929 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001066:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001068:	f002 f863 	bl	8003132 <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001072:	f000 f921 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4619      	mov	r1, r3
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <MX_TIM4_Init+0xe4>)
 8001086:	f003 f893 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001090:	f000 f912 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM4_Init+0xe4>)
 80010ac:	f002 fbbe 	bl	800382c <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80010b6:	f000 f8ff 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM4_Init+0xe4>)
 80010bc:	f000 f9f8 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 80010c0:	bf00      	nop
 80010c2:	3738      	adds	r7, #56	; 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000190 	.word	0x20000190
 80010cc:	40000800 	.word	0x40000800

080010d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART1_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART1_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART1_UART_Init+0x4c>)
 8001108:	f003 f934 	bl	8004374 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 f8d1 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001d8 	.word	0x200001d8
 8001120:	40011000 	.word	0x40011000

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b42      	ldr	r3, [pc, #264]	; (8001248 <MX_GPIO_Init+0x124>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a41      	ldr	r2, [pc, #260]	; (8001248 <MX_GPIO_Init+0x124>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <MX_GPIO_Init+0x124>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <MX_GPIO_Init+0x124>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a3a      	ldr	r2, [pc, #232]	; (8001248 <MX_GPIO_Init+0x124>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_GPIO_Init+0x124>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <MX_GPIO_Init+0x124>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a33      	ldr	r2, [pc, #204]	; (8001248 <MX_GPIO_Init+0x124>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_GPIO_Init+0x124>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_GPIO_Init+0x124>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <MX_GPIO_Init+0x124>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_GPIO_Init+0x124>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <MX_GPIO_Init+0x124>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a25      	ldr	r2, [pc, #148]	; (8001248 <MX_GPIO_Init+0x124>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_GPIO_Init+0x124>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_GPIO_Init+0x124>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <MX_GPIO_Init+0x124>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_GPIO_Init+0x124>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor_dir_2_Pin|motor_dir_1_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80011e8:	4818      	ldr	r0, [pc, #96]	; (800124c <MX_GPIO_Init+0x128>)
 80011ea:	f000 fe95 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ee:	2310      	movs	r3, #16
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001202:	f000 fcd5 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_dir_2_Pin motor_dir_1_Pin */
  GPIO_InitStruct.Pin = motor_dir_2_Pin|motor_dir_1_Pin;
 8001206:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	480b      	ldr	r0, [pc, #44]	; (800124c <MX_GPIO_Init+0x128>)
 8001220:	f000 fcc6 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001224:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_GPIO_Init+0x130>)
 800123a:	f000 fcb9 	bl	8001bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	; 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40020800 	.word	0x40020800

08001258 <Motor_Control>:

/* USER CODE BEGIN 4 */
static void Motor_Control(int32_t motorSpeed){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

	if (motorSpeed > 0){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	dd0c      	ble.n	8001280 <Motor_Control+0x28>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126c:	4810      	ldr	r0, [pc, #64]	; (80012b0 <Motor_Control+0x58>)
 800126e:	f000 fe53 	bl	8001f18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <Motor_Control+0x58>)
 800127a:	f000 fe4d 	bl	8001f18 <HAL_GPIO_WritePin>
 800127e:	e00e      	b.n	800129e <Motor_Control+0x46>
	} else {
		motorSpeed = -motorSpeed;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	425b      	negs	r3, r3
 8001284:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <Motor_Control+0x58>)
 800128e:	f000 fe43 	bl	8001f18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <Motor_Control+0x58>)
 800129a:	f000 fe3d 	bl	8001f18 <HAL_GPIO_WritePin>
	}
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,motorSpeed);
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <Motor_Control+0x5c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	20000190 	.word	0x20000190

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_MspInit+0x4c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_MspInit+0x4c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_I2C_MspInit+0x8c>)
 800136e:	f000 fc1f 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_I2C_MspInit+0x88>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_TIM_Base_MspInit+0x64>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10e      	bne.n	80013d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_TIM_Base_MspInit+0x68>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_TIM_Base_MspInit+0x68>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_TIM_Base_MspInit+0x68>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013d2:	e012      	b.n	80013fa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_TIM_Base_MspInit+0x6c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10d      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_Base_MspInit+0x68>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x68>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_TIM_Base_MspInit+0x68>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000
 800140c:	40023800 	.word	0x40023800
 8001410:	40000800 	.word	0x40000800

08001414 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001434:	d133      	bne.n	800149e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x94>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a1a      	ldr	r2, [pc, #104]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x94>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800146e:	2303      	movs	r3, #3
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147e:	2301      	movs	r3, #1
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <HAL_TIM_Encoder_MspInit+0x98>)
 800148a:	f000 fb91 	bl	8001bb0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	201c      	movs	r0, #28
 8001494:	f000 facf 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001498:	201c      	movs	r0, #28
 800149a:	f000 fae8 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_TIM_MspPostInit+0xb4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11f      	bne.n	8001512 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_TIM_MspPostInit+0xb8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a23      	ldr	r2, [pc, #140]	; (8001568 <HAL_TIM_MspPostInit+0xb8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_TIM_MspPostInit+0xb8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_pwm_Pin;
 80014ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_pwm_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <HAL_TIM_MspPostInit+0xbc>)
 800150c:	f000 fb50 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001510:	e023      	b.n	800155a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_TIM_MspPostInit+0xc0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11e      	bne.n	800155a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_MspPostInit+0xb8>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_TIM_MspPostInit+0xb8>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_TIM_MspPostInit+0xb8>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor_pwm_Pin;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800154a:	2302      	movs	r3, #2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_pwm_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <HAL_TIM_MspPostInit+0xc4>)
 8001556:	f000 fb2b 	bl	8001bb0 <HAL_GPIO_Init>
}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000
 8001570:	40000800 	.word	0x40000800
 8001574:	40020c00 	.word	0x40020c00

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_UART_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12c      	bne.n	80015f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e4:	2307      	movs	r3, #7
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0x8c>)
 80015f0:	f000 fade 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40011000 	.word	0x40011000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f8d0 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM2_IRQHandler+0x10>)
 8001662:	f001 ffdb 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000148 	.word	0x20000148

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f003 fba6 	bl	8004df0 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	20000250 	.word	0x20000250
 80016d8:	20000268 	.word	0x20000268

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f003 fb65 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff f92b 	bl	800098c <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001744:	080057d8 	.word	0x080057d8
  ldr r2, =_sbss
 8001748:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800174c:	20000268 	.word	0x20000268

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_Init+0x40>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_Init+0x40>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_Init+0x40>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f94f 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	200f      	movs	r0, #15
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fd9c 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f967 	bl	8001a8a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f92f 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000018 	.word	0x20000018
 80017f0:	20000020 	.word	0x20000020
 80017f4:	2000001c 	.word	0x2000001c

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000020 	.word	0x20000020
 800181c:	20000254 	.word	0x20000254

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000254 	.word	0x20000254

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000020 	.word	0x20000020

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DMA_Start_IT+0x26>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e040      	b.n	8001b4a <HAL_DMA_Start_IT+0xa8>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d12f      	bne.n	8001b3c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f82e 	bl	8001b52 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	223f      	movs	r2, #63	; 0x3f
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0216 	orr.w	r2, r2, #22
 8001b10:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0208 	orr.w	r2, r2, #8
 8001b28:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e005      	b.n	8001b48 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b40      	cmp	r3, #64	; 0x40
 8001b7e:	d108      	bne.n	8001b92 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b90:	e007      	b.n	8001ba2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	60da      	str	r2, [r3, #12]
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e16b      	b.n	8001ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 815a 	bne.w	8001e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d005      	beq.n	8001c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d130      	bne.n	8001c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d017      	beq.n	8001ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d123      	bne.n	8001cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80b4 	beq.w	8001e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b60      	ldr	r3, [pc, #384]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a5f      	ldr	r2, [pc, #380]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d52:	4a5b      	ldr	r2, [pc, #364]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_GPIO_Init+0x314>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d02b      	beq.n	8001dd6 <HAL_GPIO_Init+0x226>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a51      	ldr	r2, [pc, #324]	; (8001ec8 <HAL_GPIO_Init+0x318>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_Init+0x222>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <HAL_GPIO_Init+0x31c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_Init+0x21e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4f      	ldr	r2, [pc, #316]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	; (8001ed8 <HAL_GPIO_Init+0x328>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_GPIO_Init+0x32c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <HAL_GPIO_Init+0x330>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x20a>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e00e      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dba:	2308      	movs	r3, #8
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x228>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1a:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_GPIO_Init+0x334>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f ae90 	bls.w	8001bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e12b      	b.n	80021b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff f9ce 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2224      	movs	r2, #36	; 0x24
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb0:	f001 f848 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8001fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a81      	ldr	r2, [pc, #516]	; (80021c0 <HAL_I2C_Init+0x274>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d807      	bhi.n	8001fd0 <HAL_I2C_Init+0x84>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a80      	ldr	r2, [pc, #512]	; (80021c4 <HAL_I2C_Init+0x278>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	bf94      	ite	ls
 8001fc8:	2301      	movls	r3, #1
 8001fca:	2300      	movhi	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e006      	b.n	8001fde <HAL_I2C_Init+0x92>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a7d      	ldr	r2, [pc, #500]	; (80021c8 <HAL_I2C_Init+0x27c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0e7      	b.n	80021b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4a78      	ldr	r2, [pc, #480]	; (80021cc <HAL_I2C_Init+0x280>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a6a      	ldr	r2, [pc, #424]	; (80021c0 <HAL_I2C_Init+0x274>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d802      	bhi.n	8002020 <HAL_I2C_Init+0xd4>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	e009      	b.n	8002034 <HAL_I2C_Init+0xe8>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	4a69      	ldr	r2, [pc, #420]	; (80021d0 <HAL_I2C_Init+0x284>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	3301      	adds	r3, #1
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	430b      	orrs	r3, r1
 800203a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	495c      	ldr	r1, [pc, #368]	; (80021c0 <HAL_I2C_Init+0x274>)
 8002050:	428b      	cmp	r3, r1
 8002052:	d819      	bhi.n	8002088 <HAL_I2C_Init+0x13c>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e59      	subs	r1, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002068:	400b      	ands	r3, r1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_I2C_Init+0x138>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1e59      	subs	r1, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fbb1 f3f3 	udiv	r3, r1, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002082:	e051      	b.n	8002128 <HAL_I2C_Init+0x1dc>
 8002084:	2304      	movs	r3, #4
 8002086:	e04f      	b.n	8002128 <HAL_I2C_Init+0x1dc>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d111      	bne.n	80020b4 <HAL_I2C_Init+0x168>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1e58      	subs	r0, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	440b      	add	r3, r1
 800209e:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e012      	b.n	80020da <HAL_I2C_Init+0x18e>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1e58      	subs	r0, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	0099      	lsls	r1, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Init+0x196>
 80020de:	2301      	movs	r3, #1
 80020e0:	e022      	b.n	8002128 <HAL_I2C_Init+0x1dc>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10e      	bne.n	8002108 <HAL_I2C_Init+0x1bc>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1e58      	subs	r0, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	440b      	add	r3, r1
 80020f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002106:	e00f      	b.n	8002128 <HAL_I2C_Init+0x1dc>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	0099      	lsls	r1, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	fbb0 f3f3 	udiv	r3, r0, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	6809      	ldr	r1, [r1, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6911      	ldr	r1, [r2, #16]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68d2      	ldr	r2, [r2, #12]
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	430b      	orrs	r3, r1
 800216a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	000186a0 	.word	0x000186a0
 80021c4:	001e847f 	.word	0x001e847f
 80021c8:	003d08ff 	.word	0x003d08ff
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	10624dd3 	.word	0x10624dd3

080021d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	461a      	mov	r2, r3
 80021e0:	460b      	mov	r3, r1
 80021e2:	817b      	strh	r3, [r7, #10]
 80021e4:	4613      	mov	r3, r2
 80021e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fb1a 	bl	8001820 <HAL_GetTick>
 80021ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	f040 80e0 	bne.w	80023bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2319      	movs	r3, #25
 8002202:	2201      	movs	r2, #1
 8002204:	4970      	ldr	r1, [pc, #448]	; (80023c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f964 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002212:	2302      	movs	r3, #2
 8002214:	e0d3      	b.n	80023be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_I2C_Master_Transmit+0x50>
 8002220:	2302      	movs	r3, #2
 8002222:	e0cc      	b.n	80023be <HAL_I2C_Master_Transmit+0x1ea>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d007      	beq.n	800224a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002258:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2221      	movs	r2, #33	; 0x21
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2210      	movs	r2, #16
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	893a      	ldrh	r2, [r7, #8]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a50      	ldr	r2, [pc, #320]	; (80023cc <HAL_I2C_Master_Transmit+0x1f8>)
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800228c:	8979      	ldrh	r1, [r7, #10]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f89c 	bl	80023d0 <I2C_MasterRequestWrite>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e08d      	b.n	80023be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022b8:	e066      	b.n	8002388 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	6a39      	ldr	r1, [r7, #32]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f9de 	bl	8002680 <I2C_WaitOnTXEFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d107      	bne.n	80022e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06b      	b.n	80023be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b04      	cmp	r3, #4
 8002322:	d11b      	bne.n	800235c <HAL_I2C_Master_Transmit+0x188>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d017      	beq.n	800235c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	6a39      	ldr	r1, [r7, #32]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f9ce 	bl	8002702 <I2C_WaitOnBTFFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	2b04      	cmp	r3, #4
 8002372:	d107      	bne.n	8002384 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002382:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e01a      	b.n	80023be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d194      	bne.n	80022ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	00100002 	.word	0x00100002
 80023cc:	ffff0000 	.word	0xffff0000

080023d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d006      	beq.n	80023fa <I2C_MasterRequestWrite+0x2a>
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d003      	beq.n	80023fa <I2C_MasterRequestWrite+0x2a>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f8:	d108      	bne.n	800240c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e00b      	b.n	8002424 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	2b12      	cmp	r3, #18
 8002412:	d107      	bne.n	8002424 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002422:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f84f 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244a:	d103      	bne.n	8002454 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e035      	b.n	80024c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002460:	d108      	bne.n	8002474 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002470:	611a      	str	r2, [r3, #16]
 8002472:	e01b      	b.n	80024ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	11db      	asrs	r3, r3, #7
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 0306 	and.w	r3, r3, #6
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f063 030f 	orn	r3, r3, #15
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	490e      	ldr	r1, [pc, #56]	; (80024cc <I2C_MasterRequestWrite+0xfc>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f875 	bl	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e010      	b.n	80024c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <I2C_MasterRequestWrite+0x100>)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f865 	bl	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	00010008 	.word	0x00010008
 80024d0:	00010002 	.word	0x00010002

080024d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e4:	e025      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d021      	beq.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7ff f997 	bl	8001820 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e023      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10d      	bne.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x84>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf0c      	ite	eq
 800254e:	2301      	moveq	r3, #1
 8002550:	2300      	movne	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	e00c      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	429a      	cmp	r2, r3
 8002576:	d0b6      	beq.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002590:	e051      	b.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a0:	d123      	bne.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0204 	orr.w	r2, r3, #4
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e046      	b.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d021      	beq.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7ff f915 	bl	8001820 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d116      	bne.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e020      	b.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10c      	bne.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e00b      	b.n	8002672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	43da      	mvns	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d18d      	bne.n	8002592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268c:	e02d      	b.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f878 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e02d      	b.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d021      	beq.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff f8bb 	bl	8001820 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d116      	bne.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e007      	b.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d1ca      	bne.n	800268e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270e:	e02d      	b.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f837 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e02d      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d021      	beq.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7ff f87a 	bl	8001820 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d1ca      	bne.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d11b      	bne.n	80027d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e267      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d00c      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05b      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e242      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x74>
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6f      	ldr	r2, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6c      	ldr	r2, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a68      	ldr	r2, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe ffc0 	bl	8001820 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe ffbc 	bl	8001820 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e207      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xc0>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe ffac 	bl	8001820 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe ffa8 	bl	8001820 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1f3      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0xe8>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b44      	ldr	r3, [pc, #272]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c7      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe ff61 	bl	8001820 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe ff5d 	bl	8001820 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a8      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4925      	ldr	r1, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe ff40 	bl	8001820 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff3c 	bl	8001820 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e187      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d036      	beq.n	8002a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_RCC_OscConfig+0x248>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe ff20 	bl	8001820 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe ff1c 	bl	8001820 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e167      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x200>
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x248>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe ff09 	bl	8001820 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	e00e      	b.n	8002a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe ff05 	bl	8001820 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e150      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8097 	beq.w	8002b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b77      	ldr	r3, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b74      	ldr	r3, [pc, #464]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a73      	ldr	r2, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fec5 	bl	8001820 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7fe fec1 	bl	8001820 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e10c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x2ea>
 8002ac0:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a63      	ldr	r2, [pc, #396]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x30c>
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002af0:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe fe86 	bl	8001820 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fe82 	bl	8001820 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0cb      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x334>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fe70 	bl	8001820 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fe6c 	bl	8001820 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b5      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a1 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d05c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d141      	bne.n	8002c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe40 	bl	8001820 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fe3c 	bl	8001820 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fe15 	bl	8001820 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fe11 	bl	8001820 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e05c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x416>
 8002c18:	e054      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fdfe 	bl	8001820 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fdfa 	bl	8001820 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e045      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x444>
 8002c46:	e03d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x4ec>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cc      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90c      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d044      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e067      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4934      	ldr	r1, [pc, #208]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fd2c 	bl	8001820 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fd28 	bl	8001820 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fc8c 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	0800577c 	.word	0x0800577c
 8002e98:	20000018 	.word	0x20000018
 8002e9c:	2000001c 	.word	0x2000001c

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b090      	sub	sp, #64	; 0x40
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002eac:	2300      	movs	r3, #0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	f200 80a1 	bhi.w	800300c <HAL_RCC_GetSysClockFreq+0x16c>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e09b      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ed8:	e09b      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ede:	e098      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eea:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	2200      	movs	r2, #0
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	627a      	str	r2, [r7, #36]	; 0x24
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f0c:	fb03 f201 	mul.w	r2, r3, r1
 8002f10:	2300      	movs	r3, #0
 8002f12:	fb00 f303 	mul.w	r3, r0, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	4a43      	ldr	r2, [pc, #268]	; (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f1a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f20:	460a      	mov	r2, r1
 8002f22:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	4413      	add	r3, r2
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	61fa      	str	r2, [r7, #28]
 8002f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f3a:	f7fd f999 	bl	8000270 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4613      	mov	r3, r2
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f46:	e053      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	2200      	movs	r2, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	617a      	str	r2, [r7, #20]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f5a:	f04f 0b00 	mov.w	fp, #0
 8002f5e:	4652      	mov	r2, sl
 8002f60:	465b      	mov	r3, fp
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f70:	0150      	lsls	r0, r2, #5
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	ebb2 080a 	subs.w	r8, r2, sl
 8002f7a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f92:	ebb2 0408 	subs.w	r4, r2, r8
 8002f96:	eb63 0509 	sbc.w	r5, r3, r9
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	00eb      	lsls	r3, r5, #3
 8002fa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa8:	00e2      	lsls	r2, r4, #3
 8002faa:	4614      	mov	r4, r2
 8002fac:	461d      	mov	r5, r3
 8002fae:	eb14 030a 	adds.w	r3, r4, sl
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	eb45 030b 	adc.w	r3, r5, fp
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	028b      	lsls	r3, r1, #10
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	028a      	lsls	r2, r1, #10
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe4:	f7fd f944 	bl	8000270 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x184>)
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003014:	4618      	mov	r0, r3
 8003016:	3740      	adds	r7, #64	; 0x40
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	017d7840 	.word	0x017d7840

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000018 	.word	0x20000018

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	0800578c 	.word	0x0800578c

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffdc 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0b5b      	lsrs	r3, r3, #13
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	0800578c 	.word	0x0800578c

08003094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e041      	b.n	800312a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe f972 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f000 fd5c 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e041      	b.n	80031c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f839 	bl	80031d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 fd0d 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_TIM_PWM_Start+0x24>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e022      	b.n	800324e <HAL_TIM_PWM_Start+0x6a>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d109      	bne.n	8003222 <HAL_TIM_PWM_Start+0x3e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e015      	b.n	800324e <HAL_TIM_PWM_Start+0x6a>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start+0x58>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e008      	b.n	800324e <HAL_TIM_PWM_Start+0x6a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e07c      	b.n	8003350 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_PWM_Start+0x82>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	e013      	b.n	800328e <HAL_TIM_PWM_Start+0xaa>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_PWM_Start+0x92>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003274:	e00b      	b.n	800328e <HAL_TIM_PWM_Start+0xaa>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_PWM_Start+0xa2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003284:	e003      	b.n	800328e <HAL_TIM_PWM_Start+0xaa>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2201      	movs	r2, #1
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 ff64 	bl	8004164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2d      	ldr	r2, [pc, #180]	; (8003358 <HAL_TIM_PWM_Start+0x174>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_PWM_Start+0xcc>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2c      	ldr	r2, [pc, #176]	; (800335c <HAL_TIM_PWM_Start+0x178>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_TIM_PWM_Start+0xd0>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_TIM_PWM_Start+0xd2>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_TIM_PWM_Start+0x174>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d01d      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <HAL_TIM_PWM_Start+0x17c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_TIM_PWM_Start+0x180>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_TIM_PWM_Start+0x184>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_TIM_PWM_Start+0x178>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_TIM_PWM_Start+0x188>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_TIM_PWM_Start+0x136>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a16      	ldr	r2, [pc, #88]	; (8003370 <HAL_TIM_PWM_Start+0x18c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d010      	beq.n	800334e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	e007      	b.n	800334e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40010000 	.word	0x40010000
 800335c:	40010400 	.word	0x40010400
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40014000 	.word	0x40014000
 8003370:	40001800 	.word	0x40001800

08003374 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e097      	b.n	80034b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe f839 	bl	8001414 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f000 fbe1 	bl	8003b90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4313      	orrs	r3, r2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003414:	f023 030c 	bic.w	r3, r3, #12
 8003418:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003420:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	4313      	orrs	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	011a      	lsls	r2, r3, #4
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	031b      	lsls	r3, r3, #12
 8003444:	4313      	orrs	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4313      	orrs	r3, r2
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d110      	bne.n	8003512 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034f6:	7b7b      	ldrb	r3, [r7, #13]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e089      	b.n	8003614 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003510:	e031      	b.n	8003576 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d110      	bne.n	800353a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003518:	7bbb      	ldrb	r3, [r7, #14]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800351e:	7b3b      	ldrb	r3, [r7, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e075      	b.n	8003614 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003538:	e01d      	b.n	8003576 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003546:	7b7b      	ldrb	r3, [r7, #13]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800354c:	7b3b      	ldrb	r3, [r7, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e05e      	b.n	8003614 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_TIM_Encoder_Start_IT+0xc4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d010      	beq.n	80035a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003582:	e01f      	b.n	80035c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fde9 	bl	8004164 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0202 	orr.w	r2, r2, #2
 80035a0:	60da      	str	r2, [r3, #12]
      break;
 80035a2:	e02e      	b.n	8003602 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	2104      	movs	r1, #4
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fdd9 	bl	8004164 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0204 	orr.w	r2, r2, #4
 80035c0:	60da      	str	r2, [r3, #12]
      break;
 80035c2:	e01e      	b.n	8003602 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fdc9 	bl	8004164 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	2104      	movs	r1, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fdc2 	bl	8004164 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0202 	orr.w	r2, r2, #2
 80035ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0204 	orr.w	r2, r2, #4
 80035fe:	60da      	str	r2, [r3, #12]
      break;
 8003600:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0202 	mvn.w	r2, #2
 8003648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd f982 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fa73 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fa7a 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b04      	cmp	r3, #4
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0204 	mvn.w	r2, #4
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f958 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa49 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fa50 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0208 	mvn.w	r2, #8
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd f92e 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa1f 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fa26 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0210 	mvn.w	r2, #16
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2208      	movs	r2, #8
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd f904 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9f5 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f9fc 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0201 	mvn.w	r2, #1
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9cf 	bl	8003b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fdca 	bl	8004360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9c1 	bl	8003b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d10e      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d107      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0220 	mvn.w	r2, #32
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd94 	bl	800434c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003846:	2302      	movs	r3, #2
 8003848:	e0ae      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	f200 809f 	bhi.w	8003998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003895 	.word	0x08003895
 8003864:	08003999 	.word	0x08003999
 8003868:	08003999 	.word	0x08003999
 800386c:	08003999 	.word	0x08003999
 8003870:	080038d5 	.word	0x080038d5
 8003874:	08003999 	.word	0x08003999
 8003878:	08003999 	.word	0x08003999
 800387c:	08003999 	.word	0x08003999
 8003880:	08003917 	.word	0x08003917
 8003884:	08003999 	.word	0x08003999
 8003888:	08003999 	.word	0x08003999
 800388c:	08003999 	.word	0x08003999
 8003890:	08003957 	.word	0x08003957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa18 	bl	8003cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0208 	orr.w	r2, r2, #8
 80038ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	619a      	str	r2, [r3, #24]
      break;
 80038d2:	e064      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa68 	bl	8003db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6999      	ldr	r1, [r3, #24]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	021a      	lsls	r2, r3, #8
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	619a      	str	r2, [r3, #24]
      break;
 8003914:	e043      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fabd 	bl	8003e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0208 	orr.w	r2, r2, #8
 8003930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0204 	bic.w	r2, r2, #4
 8003940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	61da      	str	r2, [r3, #28]
      break;
 8003954:	e023      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fb11 	bl	8003f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69d9      	ldr	r1, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	021a      	lsls	r2, r3, #8
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	61da      	str	r2, [r3, #28]
      break;
 8003996:	e002      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_ConfigClockSource+0x1c>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0b4      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x186>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a04:	d03e      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xd4>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0a:	f200 8087 	bhi.w	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_TIM_ConfigClockSource+0x172>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d87f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b70      	cmp	r3, #112	; 0x70
 8003a1e:	d01a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xa6>
 8003a20:	2b70      	cmp	r3, #112	; 0x70
 8003a22:	d87b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b60      	cmp	r3, #96	; 0x60
 8003a26:	d050      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x11a>
 8003a28:	2b60      	cmp	r3, #96	; 0x60
 8003a2a:	d877      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b50      	cmp	r3, #80	; 0x50
 8003a2e:	d03c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xfa>
 8003a30:	2b50      	cmp	r3, #80	; 0x50
 8003a32:	d873      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d058      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x13a>
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d86f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d064      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	d86b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d060      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d867      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d05a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	e062      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f000 fb5d 	bl	8004124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
      break;
 8003a82:	e04f      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f000 fb46 	bl	8004124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 faba 	bl	8004030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2150      	movs	r1, #80	; 0x50
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fb13 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e02c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 fad9 	bl	800408e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2160      	movs	r1, #96	; 0x60
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fb03 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 fa9a 	bl	8004030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 faf3 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f000 faea 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d00f      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3c      	ldr	r2, [pc, #240]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3b      	ldr	r2, [pc, #236]	; (8003cb0 <TIM_Base_SetConfig+0x120>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d027      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d023      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <TIM_Base_SetConfig+0x120>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <TIM_Base_SetConfig+0x128>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <TIM_Base_SetConfig+0x12c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <TIM_Base_SetConfig+0x130>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <TIM_Base_SetConfig+0x134>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <TIM_Base_SetConfig+0x138>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <TIM_Base_SetConfig+0x13c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0xf8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	615a      	str	r2, [r3, #20]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	40000c00 	.word	0x40000c00
 8003cb4:	40010400 	.word	0x40010400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	40001800 	.word	0x40001800
 8003cc8:	40001c00 	.word	0x40001c00
 8003ccc:	40002000 	.word	0x40002000

08003cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 0302 	bic.w	r3, r3, #2
 8003d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <TIM_OC1_SetConfig+0xd8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_OC1_SetConfig+0x64>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <TIM_OC1_SetConfig+0xdc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10c      	bne.n	8003d4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0308 	bic.w	r3, r3, #8
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <TIM_OC1_SetConfig+0xd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_OC1_SetConfig+0x8e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <TIM_OC1_SetConfig+0xdc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d111      	bne.n	8003d82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400

08003db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 0210 	bic.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0320 	bic.w	r3, r3, #32
 8003dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <TIM_OC2_SetConfig+0xe4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC2_SetConfig+0x68>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <TIM_OC2_SetConfig+0xe8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10d      	bne.n	8003e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <TIM_OC2_SetConfig+0xe4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_OC2_SetConfig+0x94>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <TIM_OC2_SetConfig+0xe8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d113      	bne.n	8003e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40010400 	.word	0x40010400

08003e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <TIM_OC3_SetConfig+0xe0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_OC3_SetConfig+0x66>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <TIM_OC3_SetConfig+0xe4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10d      	bne.n	8003f1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <TIM_OC3_SetConfig+0xe0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_OC3_SetConfig+0x92>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <TIM_OC3_SetConfig+0xe4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d113      	bne.n	8003f56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40010400 	.word	0x40010400

08003f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <TIM_OC4_SetConfig+0xa4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_OC4_SetConfig+0x68>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a11      	ldr	r2, [pc, #68]	; (800402c <TIM_OC4_SetConfig+0xa8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d109      	bne.n	8004000 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 030a 	bic.w	r3, r3, #10
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0210 	bic.w	r2, r3, #16
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	f043 0307 	orr.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	021a      	lsls	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	431a      	orrs	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2201      	movs	r2, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e05a      	b.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d022      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d01d      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d018      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00e      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a18      	ldr	r2, [pc, #96]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d009      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10c      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4313      	orrs	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40010400 	.word	0x40010400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40001800 	.word	0x40001800

080042a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e03d      	b.n	8004340 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e03f      	b.n	8004406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd f8ec 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 faa5 	bl	8004908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	d11d      	bne.n	8004464 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_Receive_DMA+0x26>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e016      	b.n	8004466 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_UART_Receive_DMA+0x38>
 8004442:	2302      	movs	r3, #2
 8004444:	e00f      	b.n	8004466 <HAL_UART_Receive_DMA+0x58>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	461a      	mov	r2, r3
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f92a 	bl	80046b4 <UART_Start_Receive_DMA>
 8004460:	4603      	mov	r3, r0
 8004462:	e000      	b.n	8004466 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b09c      	sub	sp, #112	; 0x70
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d172      	bne.n	80045c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	2200      	movs	r2, #0
 80044e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80044fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004504:	65ba      	str	r2, [r7, #88]	; 0x58
 8004506:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800450a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	667b      	str	r3, [r7, #100]	; 0x64
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004538:	647a      	str	r2, [r7, #68]	; 0x44
 800453a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800453e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	623b      	str	r3, [r7, #32]
   return(result);
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004562:	663b      	str	r3, [r7, #96]	; 0x60
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3314      	adds	r3, #20
 800456a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800456c:	633a      	str	r2, [r7, #48]	; 0x30
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	2b01      	cmp	r3, #1
 800458e:	d119      	bne.n	80045c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	60fb      	str	r3, [r7, #12]
   return(result);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0310 	bic.w	r3, r3, #16
 80045a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045b0:	61fa      	str	r2, [r7, #28]
 80045b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	617b      	str	r3, [r7, #20]
   return(result);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d106      	bne.n	80045da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045d0:	4619      	mov	r1, r3
 80045d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045d4:	f7ff ff69 	bl	80044aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045d8:	e002      	b.n	80045e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045dc:	f7ff ff47 	bl	800446e <HAL_UART_RxCpltCallback>
}
 80045e0:	bf00      	nop
 80045e2:	3770      	adds	r7, #112	; 0x70
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d108      	bne.n	8004610 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff ff4e 	bl	80044aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800460e:	e002      	b.n	8004616 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff ff36 	bl	8004482 <HAL_UART_RxHalfCpltCallback>
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b21      	cmp	r3, #33	; 0x21
 8004650:	d108      	bne.n	8004664 <UART_DMAError+0x46>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f000 f8c6 	bl	80047f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d108      	bne.n	8004698 <UART_DMAError+0x7a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004692:	68b8      	ldr	r0, [r7, #8]
 8004694:	f000 f8d4 	bl	8004840 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0210 	orr.w	r2, r3, #16
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f7ff fef6 	bl	8004496 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b098      	sub	sp, #96	; 0x60
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2222      	movs	r2, #34	; 0x22
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	4a40      	ldr	r2, [pc, #256]	; (80047e4 <UART_Start_Receive_DMA+0x130>)
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	4a3f      	ldr	r2, [pc, #252]	; (80047e8 <UART_Start_Receive_DMA+0x134>)
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	4a3e      	ldr	r2, [pc, #248]	; (80047ec <UART_Start_Receive_DMA+0x138>)
 80046f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	2200      	movs	r2, #0
 80046fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	f7fd f9c5 	bl	8001aa2 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d019      	beq.n	8004772 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	65bb      	str	r3, [r7, #88]	; 0x58
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800475e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3314      	adds	r3, #20
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004792:	63ba      	str	r2, [r7, #56]	; 0x38
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	617b      	str	r3, [r7, #20]
   return(result);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047bc:	653b      	str	r3, [r7, #80]	; 0x50
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047c6:	627a      	str	r2, [r7, #36]	; 0x24
 80047c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6a39      	ldr	r1, [r7, #32]
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3760      	adds	r7, #96	; 0x60
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	080044c3 	.word	0x080044c3
 80047e8:	080045e9 	.word	0x080045e9
 80047ec:	0800461f 	.word	0x0800461f

080047f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	60bb      	str	r3, [r7, #8]
   return(result);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	61ba      	str	r2, [r7, #24]
 800481a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e5      	bne.n	80047f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004834:	bf00      	nop
 8004836:	3724      	adds	r7, #36	; 0x24
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b095      	sub	sp, #84	; 0x54
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800485e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004868:	643a      	str	r2, [r7, #64]	; 0x40
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800486e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	61fb      	str	r3, [r7, #28]
   return(result);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800489c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d119      	bne.n	80048ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	647b      	str	r3, [r7, #68]	; 0x44
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d8:	61ba      	str	r2, [r7, #24]
 80048da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6979      	ldr	r1, [r7, #20]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	613b      	str	r3, [r7, #16]
   return(result);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048fa:	bf00      	nop
 80048fc:	3754      	adds	r7, #84	; 0x54
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800490c:	b0c0      	sub	sp, #256	; 0x100
 800490e:	af00      	add	r7, sp, #0
 8004910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	68d9      	ldr	r1, [r3, #12]
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	ea40 0301 	orr.w	r3, r0, r1
 8004930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	431a      	orrs	r2, r3
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004960:	f021 010c 	bic.w	r1, r1, #12
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800496e:	430b      	orrs	r3, r1
 8004970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	6999      	ldr	r1, [r3, #24]
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	ea40 0301 	orr.w	r3, r0, r1
 800498e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <UART_SetConfig+0x2cc>)
 8004998:	429a      	cmp	r2, r3
 800499a:	d005      	beq.n	80049a8 <UART_SetConfig+0xa0>
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b8d      	ldr	r3, [pc, #564]	; (8004bd8 <UART_SetConfig+0x2d0>)
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d104      	bne.n	80049b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049a8:	f7fe fb60 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 80049ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b0:	e003      	b.n	80049ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049b2:	f7fe fb47 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80049b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	f040 810c 	bne.w	8004be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	1891      	adds	r1, r2, r2
 80049e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80049e2:	415b      	adcs	r3, r3
 80049e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ea:	4621      	mov	r1, r4
 80049ec:	eb12 0801 	adds.w	r8, r2, r1
 80049f0:	4629      	mov	r1, r5
 80049f2:	eb43 0901 	adc.w	r9, r3, r1
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0a:	4690      	mov	r8, r2
 8004a0c:	4699      	mov	r9, r3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	eb18 0303 	adds.w	r3, r8, r3
 8004a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a18:	462b      	mov	r3, r5
 8004a1a:	eb49 0303 	adc.w	r3, r9, r3
 8004a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a36:	460b      	mov	r3, r1
 8004a38:	18db      	adds	r3, r3, r3
 8004a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	eb42 0303 	adc.w	r3, r2, r3
 8004a42:	657b      	str	r3, [r7, #84]	; 0x54
 8004a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a4c:	f7fb fc10 	bl	8000270 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4b61      	ldr	r3, [pc, #388]	; (8004bdc <UART_SetConfig+0x2d4>)
 8004a56:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	011c      	lsls	r4, r3, #4
 8004a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a80:	4641      	mov	r1, r8
 8004a82:	eb12 0a01 	adds.w	sl, r2, r1
 8004a86:	4649      	mov	r1, r9
 8004a88:	eb43 0b01 	adc.w	fp, r3, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa0:	4692      	mov	sl, r2
 8004aa2:	469b      	mov	fp, r3
 8004aa4:	4643      	mov	r3, r8
 8004aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8004aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004acc:	460b      	mov	r3, r1
 8004ace:	18db      	adds	r3, r3, r3
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	eb42 0303 	adc.w	r3, r2, r3
 8004ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ae2:	f7fb fbc5 	bl	8000270 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <UART_SetConfig+0x2d4>)
 8004aee:	fba3 2301 	umull	r2, r3, r3, r1
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1acb      	subs	r3, r1, r3
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <UART_SetConfig+0x2d4>)
 8004b04:	fba3 2302 	umull	r2, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b10:	441c      	add	r4, r3
 8004b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b24:	4642      	mov	r2, r8
 8004b26:	464b      	mov	r3, r9
 8004b28:	1891      	adds	r1, r2, r2
 8004b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b34:	4641      	mov	r1, r8
 8004b36:	1851      	adds	r1, r2, r1
 8004b38:	6339      	str	r1, [r7, #48]	; 0x30
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	414b      	adcs	r3, r1
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	00cb      	lsls	r3, r1, #3
 8004b50:	4651      	mov	r1, sl
 8004b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b56:	4651      	mov	r1, sl
 8004b58:	00ca      	lsls	r2, r1, #3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4642      	mov	r2, r8
 8004b62:	189b      	adds	r3, r3, r2
 8004b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b68:	464b      	mov	r3, r9
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b9e:	f7fb fb67 	bl	8000270 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <UART_SetConfig+0x2d4>)
 8004ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	2164      	movs	r1, #100	; 0x64
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	3332      	adds	r3, #50	; 0x32
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <UART_SetConfig+0x2d4>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	f003 0207 	and.w	r2, r3, #7
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4422      	add	r2, r4
 8004bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd0:	e105      	b.n	8004dde <UART_SetConfig+0x4d6>
 8004bd2:	bf00      	nop
 8004bd4:	40011000 	.word	0x40011000
 8004bd8:	40011400 	.word	0x40011400
 8004bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	1891      	adds	r1, r2, r2
 8004bf8:	6239      	str	r1, [r7, #32]
 8004bfa:	415b      	adcs	r3, r3
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c02:	4641      	mov	r1, r8
 8004c04:	1854      	adds	r4, r2, r1
 8004c06:	4649      	mov	r1, r9
 8004c08:	eb43 0501 	adc.w	r5, r3, r1
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	00eb      	lsls	r3, r5, #3
 8004c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c1a:	00e2      	lsls	r2, r4, #3
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	461d      	mov	r5, r3
 8004c20:	4643      	mov	r3, r8
 8004c22:	18e3      	adds	r3, r4, r3
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c28:	464b      	mov	r3, r9
 8004c2a:	eb45 0303 	adc.w	r3, r5, r3
 8004c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c4e:	4629      	mov	r1, r5
 8004c50:	008b      	lsls	r3, r1, #2
 8004c52:	4621      	mov	r1, r4
 8004c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c58:	4621      	mov	r1, r4
 8004c5a:	008a      	lsls	r2, r1, #2
 8004c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c60:	f7fb fb06 	bl	8000270 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4b60      	ldr	r3, [pc, #384]	; (8004dec <UART_SetConfig+0x4e4>)
 8004c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	011c      	lsls	r4, r3, #4
 8004c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	61b9      	str	r1, [r7, #24]
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c94:	4641      	mov	r1, r8
 8004c96:	1851      	adds	r1, r2, r1
 8004c98:	6139      	str	r1, [r7, #16]
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	414b      	adcs	r3, r1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cac:	4659      	mov	r1, fp
 8004cae:	00cb      	lsls	r3, r1, #3
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb6:	4651      	mov	r1, sl
 8004cb8:	00ca      	lsls	r2, r1, #3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cc8:	464b      	mov	r3, r9
 8004cca:	460a      	mov	r2, r1
 8004ccc:	eb42 0303 	adc.w	r3, r2, r3
 8004cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cec:	4649      	mov	r1, r9
 8004cee:	008b      	lsls	r3, r1, #2
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	008a      	lsls	r2, r1, #2
 8004cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cfe:	f7fb fab7 	bl	8000270 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b39      	ldr	r3, [pc, #228]	; (8004dec <UART_SetConfig+0x4e4>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	; 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	3332      	adds	r3, #50	; 0x32
 8004d1a:	4a34      	ldr	r2, [pc, #208]	; (8004dec <UART_SetConfig+0x4e4>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d26:	441c      	add	r4, r3
 8004d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d30:	677a      	str	r2, [r7, #116]	; 0x74
 8004d32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	1891      	adds	r1, r2, r2
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d46:	4641      	mov	r1, r8
 8004d48:	1851      	adds	r1, r2, r1
 8004d4a:	6039      	str	r1, [r7, #0]
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	414b      	adcs	r3, r1
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d5e:	4659      	mov	r1, fp
 8004d60:	00cb      	lsls	r3, r1, #3
 8004d62:	4651      	mov	r1, sl
 8004d64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d68:	4651      	mov	r1, sl
 8004d6a:	00ca      	lsls	r2, r1, #3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4603      	mov	r3, r0
 8004d72:	4642      	mov	r2, r8
 8004d74:	189b      	adds	r3, r3, r2
 8004d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d78:	464b      	mov	r3, r9
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	eb42 0303 	adc.w	r3, r2, r3
 8004d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d8c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	008b      	lsls	r3, r1, #2
 8004d9e:	4641      	mov	r1, r8
 8004da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004da4:	4641      	mov	r1, r8
 8004da6:	008a      	lsls	r2, r1, #2
 8004da8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dac:	f7fb fa60 	bl	8000270 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <UART_SetConfig+0x4e4>)
 8004db6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2164      	movs	r1, #100	; 0x64
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	3332      	adds	r3, #50	; 0x32
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <UART_SetConfig+0x4e4>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4422      	add	r2, r4
 8004ddc:	609a      	str	r2, [r3, #8]
}
 8004dde:	bf00      	nop
 8004de0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	51eb851f 	.word	0x51eb851f

08004df0 <__errno>:
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <__errno+0x8>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000024 	.word	0x20000024

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	; (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	; (8004e40 <__libc_init_array+0x44>)
 8004e10:	f000 fc8e 	bl	8005730 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	080057d0 	.word	0x080057d0
 8004e38:	080057d0 	.word	0x080057d0
 8004e3c:	080057d0 	.word	0x080057d0
 8004e40:	080057d4 	.word	0x080057d4

08004e44 <memset>:
 8004e44:	4402      	add	r2, r0
 8004e46:	4603      	mov	r3, r0
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <memset+0xa>
 8004e4c:	4770      	bx	lr
 8004e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e52:	e7f9      	b.n	8004e48 <memset+0x4>

08004e54 <siprintf>:
 8004e54:	b40e      	push	{r1, r2, r3}
 8004e56:	b500      	push	{lr}
 8004e58:	b09c      	sub	sp, #112	; 0x70
 8004e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e5c:	9002      	str	r0, [sp, #8]
 8004e5e:	9006      	str	r0, [sp, #24]
 8004e60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e64:	4809      	ldr	r0, [pc, #36]	; (8004e8c <siprintf+0x38>)
 8004e66:	9107      	str	r1, [sp, #28]
 8004e68:	9104      	str	r1, [sp, #16]
 8004e6a:	4909      	ldr	r1, [pc, #36]	; (8004e90 <siprintf+0x3c>)
 8004e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	6800      	ldr	r0, [r0, #0]
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	a902      	add	r1, sp, #8
 8004e78:	f000 f868 	bl	8004f4c <_svfiprintf_r>
 8004e7c:	9b02      	ldr	r3, [sp, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	b01c      	add	sp, #112	; 0x70
 8004e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e88:	b003      	add	sp, #12
 8004e8a:	4770      	bx	lr
 8004e8c:	20000024 	.word	0x20000024
 8004e90:	ffff0208 	.word	0xffff0208

08004e94 <__ssputs_r>:
 8004e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	688e      	ldr	r6, [r1, #8]
 8004e9a:	429e      	cmp	r6, r3
 8004e9c:	4682      	mov	sl, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	4690      	mov	r8, r2
 8004ea2:	461f      	mov	r7, r3
 8004ea4:	d838      	bhi.n	8004f18 <__ssputs_r+0x84>
 8004ea6:	898a      	ldrh	r2, [r1, #12]
 8004ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004eac:	d032      	beq.n	8004f14 <__ssputs_r+0x80>
 8004eae:	6825      	ldr	r5, [r4, #0]
 8004eb0:	6909      	ldr	r1, [r1, #16]
 8004eb2:	eba5 0901 	sub.w	r9, r5, r1
 8004eb6:	6965      	ldr	r5, [r4, #20]
 8004eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ebc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	444b      	add	r3, r9
 8004ec4:	106d      	asrs	r5, r5, #1
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	bf38      	it	cc
 8004eca:	461d      	movcc	r5, r3
 8004ecc:	0553      	lsls	r3, r2, #21
 8004ece:	d531      	bpl.n	8004f34 <__ssputs_r+0xa0>
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f000 fb63 	bl	800559c <_malloc_r>
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	b950      	cbnz	r0, 8004ef0 <__ssputs_r+0x5c>
 8004eda:	230c      	movs	r3, #12
 8004edc:	f8ca 3000 	str.w	r3, [sl]
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	6921      	ldr	r1, [r4, #16]
 8004ef2:	464a      	mov	r2, r9
 8004ef4:	f000 fabe 	bl	8005474 <memcpy>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	6126      	str	r6, [r4, #16]
 8004f06:	6165      	str	r5, [r4, #20]
 8004f08:	444e      	add	r6, r9
 8004f0a:	eba5 0509 	sub.w	r5, r5, r9
 8004f0e:	6026      	str	r6, [r4, #0]
 8004f10:	60a5      	str	r5, [r4, #8]
 8004f12:	463e      	mov	r6, r7
 8004f14:	42be      	cmp	r6, r7
 8004f16:	d900      	bls.n	8004f1a <__ssputs_r+0x86>
 8004f18:	463e      	mov	r6, r7
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4641      	mov	r1, r8
 8004f20:	f000 fab6 	bl	8005490 <memmove>
 8004f24:	68a3      	ldr	r3, [r4, #8]
 8004f26:	1b9b      	subs	r3, r3, r6
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	4433      	add	r3, r6
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	2000      	movs	r0, #0
 8004f32:	e7db      	b.n	8004eec <__ssputs_r+0x58>
 8004f34:	462a      	mov	r2, r5
 8004f36:	f000 fba5 	bl	8005684 <_realloc_r>
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d1e1      	bne.n	8004f04 <__ssputs_r+0x70>
 8004f40:	6921      	ldr	r1, [r4, #16]
 8004f42:	4650      	mov	r0, sl
 8004f44:	f000 fabe 	bl	80054c4 <_free_r>
 8004f48:	e7c7      	b.n	8004eda <__ssputs_r+0x46>
	...

08004f4c <_svfiprintf_r>:
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	4698      	mov	r8, r3
 8004f52:	898b      	ldrh	r3, [r1, #12]
 8004f54:	061b      	lsls	r3, r3, #24
 8004f56:	b09d      	sub	sp, #116	; 0x74
 8004f58:	4607      	mov	r7, r0
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	d50e      	bpl.n	8004f7e <_svfiprintf_r+0x32>
 8004f60:	690b      	ldr	r3, [r1, #16]
 8004f62:	b963      	cbnz	r3, 8004f7e <_svfiprintf_r+0x32>
 8004f64:	2140      	movs	r1, #64	; 0x40
 8004f66:	f000 fb19 	bl	800559c <_malloc_r>
 8004f6a:	6028      	str	r0, [r5, #0]
 8004f6c:	6128      	str	r0, [r5, #16]
 8004f6e:	b920      	cbnz	r0, 8004f7a <_svfiprintf_r+0x2e>
 8004f70:	230c      	movs	r3, #12
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	e0d1      	b.n	800511e <_svfiprintf_r+0x1d2>
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	616b      	str	r3, [r5, #20]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
 8004f82:	2320      	movs	r3, #32
 8004f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f8c:	2330      	movs	r3, #48	; 0x30
 8004f8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005138 <_svfiprintf_r+0x1ec>
 8004f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f96:	f04f 0901 	mov.w	r9, #1
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	469a      	mov	sl, r3
 8004f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa2:	b10a      	cbz	r2, 8004fa8 <_svfiprintf_r+0x5c>
 8004fa4:	2a25      	cmp	r2, #37	; 0x25
 8004fa6:	d1f9      	bne.n	8004f9c <_svfiprintf_r+0x50>
 8004fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8004fac:	d00b      	beq.n	8004fc6 <_svfiprintf_r+0x7a>
 8004fae:	465b      	mov	r3, fp
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f7ff ff6d 	bl	8004e94 <__ssputs_r>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f000 80aa 	beq.w	8005114 <_svfiprintf_r+0x1c8>
 8004fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc2:	445a      	add	r2, fp
 8004fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80a2 	beq.w	8005114 <_svfiprintf_r+0x1c8>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fda:	f10a 0a01 	add.w	sl, sl, #1
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	9307      	str	r3, [sp, #28]
 8004fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8004fe8:	4654      	mov	r4, sl
 8004fea:	2205      	movs	r2, #5
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	4851      	ldr	r0, [pc, #324]	; (8005138 <_svfiprintf_r+0x1ec>)
 8004ff2:	f7fb f8ed 	bl	80001d0 <memchr>
 8004ff6:	9a04      	ldr	r2, [sp, #16]
 8004ff8:	b9d8      	cbnz	r0, 8005032 <_svfiprintf_r+0xe6>
 8004ffa:	06d0      	lsls	r0, r2, #27
 8004ffc:	bf44      	itt	mi
 8004ffe:	2320      	movmi	r3, #32
 8005000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005004:	0711      	lsls	r1, r2, #28
 8005006:	bf44      	itt	mi
 8005008:	232b      	movmi	r3, #43	; 0x2b
 800500a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800500e:	f89a 3000 	ldrb.w	r3, [sl]
 8005012:	2b2a      	cmp	r3, #42	; 0x2a
 8005014:	d015      	beq.n	8005042 <_svfiprintf_r+0xf6>
 8005016:	9a07      	ldr	r2, [sp, #28]
 8005018:	4654      	mov	r4, sl
 800501a:	2000      	movs	r0, #0
 800501c:	f04f 0c0a 	mov.w	ip, #10
 8005020:	4621      	mov	r1, r4
 8005022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005026:	3b30      	subs	r3, #48	; 0x30
 8005028:	2b09      	cmp	r3, #9
 800502a:	d94e      	bls.n	80050ca <_svfiprintf_r+0x17e>
 800502c:	b1b0      	cbz	r0, 800505c <_svfiprintf_r+0x110>
 800502e:	9207      	str	r2, [sp, #28]
 8005030:	e014      	b.n	800505c <_svfiprintf_r+0x110>
 8005032:	eba0 0308 	sub.w	r3, r0, r8
 8005036:	fa09 f303 	lsl.w	r3, r9, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	46a2      	mov	sl, r4
 8005040:	e7d2      	b.n	8004fe8 <_svfiprintf_r+0x9c>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	1d19      	adds	r1, r3, #4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	9103      	str	r1, [sp, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfbb      	ittet	lt
 800504e:	425b      	neglt	r3, r3
 8005050:	f042 0202 	orrlt.w	r2, r2, #2
 8005054:	9307      	strge	r3, [sp, #28]
 8005056:	9307      	strlt	r3, [sp, #28]
 8005058:	bfb8      	it	lt
 800505a:	9204      	strlt	r2, [sp, #16]
 800505c:	7823      	ldrb	r3, [r4, #0]
 800505e:	2b2e      	cmp	r3, #46	; 0x2e
 8005060:	d10c      	bne.n	800507c <_svfiprintf_r+0x130>
 8005062:	7863      	ldrb	r3, [r4, #1]
 8005064:	2b2a      	cmp	r3, #42	; 0x2a
 8005066:	d135      	bne.n	80050d4 <_svfiprintf_r+0x188>
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	9203      	str	r2, [sp, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfb8      	it	lt
 8005074:	f04f 33ff 	movlt.w	r3, #4294967295
 8005078:	3402      	adds	r4, #2
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005148 <_svfiprintf_r+0x1fc>
 8005080:	7821      	ldrb	r1, [r4, #0]
 8005082:	2203      	movs	r2, #3
 8005084:	4650      	mov	r0, sl
 8005086:	f7fb f8a3 	bl	80001d0 <memchr>
 800508a:	b140      	cbz	r0, 800509e <_svfiprintf_r+0x152>
 800508c:	2340      	movs	r3, #64	; 0x40
 800508e:	eba0 000a 	sub.w	r0, r0, sl
 8005092:	fa03 f000 	lsl.w	r0, r3, r0
 8005096:	9b04      	ldr	r3, [sp, #16]
 8005098:	4303      	orrs	r3, r0
 800509a:	3401      	adds	r4, #1
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a2:	4826      	ldr	r0, [pc, #152]	; (800513c <_svfiprintf_r+0x1f0>)
 80050a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a8:	2206      	movs	r2, #6
 80050aa:	f7fb f891 	bl	80001d0 <memchr>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d038      	beq.n	8005124 <_svfiprintf_r+0x1d8>
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <_svfiprintf_r+0x1f4>)
 80050b4:	bb1b      	cbnz	r3, 80050fe <_svfiprintf_r+0x1b2>
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	3307      	adds	r3, #7
 80050ba:	f023 0307 	bic.w	r3, r3, #7
 80050be:	3308      	adds	r3, #8
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	4433      	add	r3, r6
 80050c6:	9309      	str	r3, [sp, #36]	; 0x24
 80050c8:	e767      	b.n	8004f9a <_svfiprintf_r+0x4e>
 80050ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ce:	460c      	mov	r4, r1
 80050d0:	2001      	movs	r0, #1
 80050d2:	e7a5      	b.n	8005020 <_svfiprintf_r+0xd4>
 80050d4:	2300      	movs	r3, #0
 80050d6:	3401      	adds	r4, #1
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 0c0a 	mov.w	ip, #10
 80050e0:	4620      	mov	r0, r4
 80050e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e6:	3a30      	subs	r2, #48	; 0x30
 80050e8:	2a09      	cmp	r2, #9
 80050ea:	d903      	bls.n	80050f4 <_svfiprintf_r+0x1a8>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0c5      	beq.n	800507c <_svfiprintf_r+0x130>
 80050f0:	9105      	str	r1, [sp, #20]
 80050f2:	e7c3      	b.n	800507c <_svfiprintf_r+0x130>
 80050f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f8:	4604      	mov	r4, r0
 80050fa:	2301      	movs	r3, #1
 80050fc:	e7f0      	b.n	80050e0 <_svfiprintf_r+0x194>
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	462a      	mov	r2, r5
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <_svfiprintf_r+0x1f8>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	4638      	mov	r0, r7
 800510a:	f3af 8000 	nop.w
 800510e:	1c42      	adds	r2, r0, #1
 8005110:	4606      	mov	r6, r0
 8005112:	d1d6      	bne.n	80050c2 <_svfiprintf_r+0x176>
 8005114:	89ab      	ldrh	r3, [r5, #12]
 8005116:	065b      	lsls	r3, r3, #25
 8005118:	f53f af2c 	bmi.w	8004f74 <_svfiprintf_r+0x28>
 800511c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800511e:	b01d      	add	sp, #116	; 0x74
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	ab03      	add	r3, sp, #12
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	462a      	mov	r2, r5
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <_svfiprintf_r+0x1f8>)
 800512c:	a904      	add	r1, sp, #16
 800512e:	4638      	mov	r0, r7
 8005130:	f000 f87a 	bl	8005228 <_printf_i>
 8005134:	e7eb      	b.n	800510e <_svfiprintf_r+0x1c2>
 8005136:	bf00      	nop
 8005138:	08005794 	.word	0x08005794
 800513c:	0800579e 	.word	0x0800579e
 8005140:	00000000 	.word	0x00000000
 8005144:	08004e95 	.word	0x08004e95
 8005148:	0800579a 	.word	0x0800579a

0800514c <_printf_common>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	4616      	mov	r6, r2
 8005152:	4699      	mov	r9, r3
 8005154:	688a      	ldr	r2, [r1, #8]
 8005156:	690b      	ldr	r3, [r1, #16]
 8005158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800515c:	4293      	cmp	r3, r2
 800515e:	bfb8      	it	lt
 8005160:	4613      	movlt	r3, r2
 8005162:	6033      	str	r3, [r6, #0]
 8005164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005168:	4607      	mov	r7, r0
 800516a:	460c      	mov	r4, r1
 800516c:	b10a      	cbz	r2, 8005172 <_printf_common+0x26>
 800516e:	3301      	adds	r3, #1
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0699      	lsls	r1, r3, #26
 8005176:	bf42      	ittt	mi
 8005178:	6833      	ldrmi	r3, [r6, #0]
 800517a:	3302      	addmi	r3, #2
 800517c:	6033      	strmi	r3, [r6, #0]
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	f015 0506 	ands.w	r5, r5, #6
 8005184:	d106      	bne.n	8005194 <_printf_common+0x48>
 8005186:	f104 0a19 	add.w	sl, r4, #25
 800518a:	68e3      	ldr	r3, [r4, #12]
 800518c:	6832      	ldr	r2, [r6, #0]
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	42ab      	cmp	r3, r5
 8005192:	dc26      	bgt.n	80051e2 <_printf_common+0x96>
 8005194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005198:	1e13      	subs	r3, r2, #0
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	bf18      	it	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	0692      	lsls	r2, r2, #26
 80051a2:	d42b      	bmi.n	80051fc <_printf_common+0xb0>
 80051a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051a8:	4649      	mov	r1, r9
 80051aa:	4638      	mov	r0, r7
 80051ac:	47c0      	blx	r8
 80051ae:	3001      	adds	r0, #1
 80051b0:	d01e      	beq.n	80051f0 <_printf_common+0xa4>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	68e5      	ldr	r5, [r4, #12]
 80051b6:	6832      	ldr	r2, [r6, #0]
 80051b8:	f003 0306 	and.w	r3, r3, #6
 80051bc:	2b04      	cmp	r3, #4
 80051be:	bf08      	it	eq
 80051c0:	1aad      	subeq	r5, r5, r2
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	6922      	ldr	r2, [r4, #16]
 80051c6:	bf0c      	ite	eq
 80051c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051cc:	2500      	movne	r5, #0
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bfc4      	itt	gt
 80051d2:	1a9b      	subgt	r3, r3, r2
 80051d4:	18ed      	addgt	r5, r5, r3
 80051d6:	2600      	movs	r6, #0
 80051d8:	341a      	adds	r4, #26
 80051da:	42b5      	cmp	r5, r6
 80051dc:	d11a      	bne.n	8005214 <_printf_common+0xc8>
 80051de:	2000      	movs	r0, #0
 80051e0:	e008      	b.n	80051f4 <_printf_common+0xa8>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4652      	mov	r2, sl
 80051e6:	4649      	mov	r1, r9
 80051e8:	4638      	mov	r0, r7
 80051ea:	47c0      	blx	r8
 80051ec:	3001      	adds	r0, #1
 80051ee:	d103      	bne.n	80051f8 <_printf_common+0xac>
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f8:	3501      	adds	r5, #1
 80051fa:	e7c6      	b.n	800518a <_printf_common+0x3e>
 80051fc:	18e1      	adds	r1, r4, r3
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	2030      	movs	r0, #48	; 0x30
 8005202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005206:	4422      	add	r2, r4
 8005208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800520c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005210:	3302      	adds	r3, #2
 8005212:	e7c7      	b.n	80051a4 <_printf_common+0x58>
 8005214:	2301      	movs	r3, #1
 8005216:	4622      	mov	r2, r4
 8005218:	4649      	mov	r1, r9
 800521a:	4638      	mov	r0, r7
 800521c:	47c0      	blx	r8
 800521e:	3001      	adds	r0, #1
 8005220:	d0e6      	beq.n	80051f0 <_printf_common+0xa4>
 8005222:	3601      	adds	r6, #1
 8005224:	e7d9      	b.n	80051da <_printf_common+0x8e>
	...

08005228 <_printf_i>:
 8005228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	7e0f      	ldrb	r7, [r1, #24]
 800522e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005230:	2f78      	cmp	r7, #120	; 0x78
 8005232:	4691      	mov	r9, r2
 8005234:	4680      	mov	r8, r0
 8005236:	460c      	mov	r4, r1
 8005238:	469a      	mov	sl, r3
 800523a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800523e:	d807      	bhi.n	8005250 <_printf_i+0x28>
 8005240:	2f62      	cmp	r7, #98	; 0x62
 8005242:	d80a      	bhi.n	800525a <_printf_i+0x32>
 8005244:	2f00      	cmp	r7, #0
 8005246:	f000 80d8 	beq.w	80053fa <_printf_i+0x1d2>
 800524a:	2f58      	cmp	r7, #88	; 0x58
 800524c:	f000 80a3 	beq.w	8005396 <_printf_i+0x16e>
 8005250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005258:	e03a      	b.n	80052d0 <_printf_i+0xa8>
 800525a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800525e:	2b15      	cmp	r3, #21
 8005260:	d8f6      	bhi.n	8005250 <_printf_i+0x28>
 8005262:	a101      	add	r1, pc, #4	; (adr r1, 8005268 <_printf_i+0x40>)
 8005264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005268:	080052c1 	.word	0x080052c1
 800526c:	080052d5 	.word	0x080052d5
 8005270:	08005251 	.word	0x08005251
 8005274:	08005251 	.word	0x08005251
 8005278:	08005251 	.word	0x08005251
 800527c:	08005251 	.word	0x08005251
 8005280:	080052d5 	.word	0x080052d5
 8005284:	08005251 	.word	0x08005251
 8005288:	08005251 	.word	0x08005251
 800528c:	08005251 	.word	0x08005251
 8005290:	08005251 	.word	0x08005251
 8005294:	080053e1 	.word	0x080053e1
 8005298:	08005305 	.word	0x08005305
 800529c:	080053c3 	.word	0x080053c3
 80052a0:	08005251 	.word	0x08005251
 80052a4:	08005251 	.word	0x08005251
 80052a8:	08005403 	.word	0x08005403
 80052ac:	08005251 	.word	0x08005251
 80052b0:	08005305 	.word	0x08005305
 80052b4:	08005251 	.word	0x08005251
 80052b8:	08005251 	.word	0x08005251
 80052bc:	080053cb 	.word	0x080053cb
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	602a      	str	r2, [r5, #0]
 80052c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0a3      	b.n	800541c <_printf_i+0x1f4>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	6829      	ldr	r1, [r5, #0]
 80052d8:	0606      	lsls	r6, r0, #24
 80052da:	f101 0304 	add.w	r3, r1, #4
 80052de:	d50a      	bpl.n	80052f6 <_printf_i+0xce>
 80052e0:	680e      	ldr	r6, [r1, #0]
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	da03      	bge.n	80052f0 <_printf_i+0xc8>
 80052e8:	232d      	movs	r3, #45	; 0x2d
 80052ea:	4276      	negs	r6, r6
 80052ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f0:	485e      	ldr	r0, [pc, #376]	; (800546c <_printf_i+0x244>)
 80052f2:	230a      	movs	r3, #10
 80052f4:	e019      	b.n	800532a <_printf_i+0x102>
 80052f6:	680e      	ldr	r6, [r1, #0]
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052fe:	bf18      	it	ne
 8005300:	b236      	sxthne	r6, r6
 8005302:	e7ef      	b.n	80052e4 <_printf_i+0xbc>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	6029      	str	r1, [r5, #0]
 800530c:	0601      	lsls	r1, r0, #24
 800530e:	d501      	bpl.n	8005314 <_printf_i+0xec>
 8005310:	681e      	ldr	r6, [r3, #0]
 8005312:	e002      	b.n	800531a <_printf_i+0xf2>
 8005314:	0646      	lsls	r6, r0, #25
 8005316:	d5fb      	bpl.n	8005310 <_printf_i+0xe8>
 8005318:	881e      	ldrh	r6, [r3, #0]
 800531a:	4854      	ldr	r0, [pc, #336]	; (800546c <_printf_i+0x244>)
 800531c:	2f6f      	cmp	r7, #111	; 0x6f
 800531e:	bf0c      	ite	eq
 8005320:	2308      	moveq	r3, #8
 8005322:	230a      	movne	r3, #10
 8005324:	2100      	movs	r1, #0
 8005326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800532a:	6865      	ldr	r5, [r4, #4]
 800532c:	60a5      	str	r5, [r4, #8]
 800532e:	2d00      	cmp	r5, #0
 8005330:	bfa2      	ittt	ge
 8005332:	6821      	ldrge	r1, [r4, #0]
 8005334:	f021 0104 	bicge.w	r1, r1, #4
 8005338:	6021      	strge	r1, [r4, #0]
 800533a:	b90e      	cbnz	r6, 8005340 <_printf_i+0x118>
 800533c:	2d00      	cmp	r5, #0
 800533e:	d04d      	beq.n	80053dc <_printf_i+0x1b4>
 8005340:	4615      	mov	r5, r2
 8005342:	fbb6 f1f3 	udiv	r1, r6, r3
 8005346:	fb03 6711 	mls	r7, r3, r1, r6
 800534a:	5dc7      	ldrb	r7, [r0, r7]
 800534c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005350:	4637      	mov	r7, r6
 8005352:	42bb      	cmp	r3, r7
 8005354:	460e      	mov	r6, r1
 8005356:	d9f4      	bls.n	8005342 <_printf_i+0x11a>
 8005358:	2b08      	cmp	r3, #8
 800535a:	d10b      	bne.n	8005374 <_printf_i+0x14c>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	07de      	lsls	r6, r3, #31
 8005360:	d508      	bpl.n	8005374 <_printf_i+0x14c>
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	4299      	cmp	r1, r3
 8005368:	bfde      	ittt	le
 800536a:	2330      	movle	r3, #48	; 0x30
 800536c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005374:	1b52      	subs	r2, r2, r5
 8005376:	6122      	str	r2, [r4, #16]
 8005378:	f8cd a000 	str.w	sl, [sp]
 800537c:	464b      	mov	r3, r9
 800537e:	aa03      	add	r2, sp, #12
 8005380:	4621      	mov	r1, r4
 8005382:	4640      	mov	r0, r8
 8005384:	f7ff fee2 	bl	800514c <_printf_common>
 8005388:	3001      	adds	r0, #1
 800538a:	d14c      	bne.n	8005426 <_printf_i+0x1fe>
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	b004      	add	sp, #16
 8005392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005396:	4835      	ldr	r0, [pc, #212]	; (800546c <_printf_i+0x244>)
 8005398:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800539c:	6829      	ldr	r1, [r5, #0]
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80053a4:	6029      	str	r1, [r5, #0]
 80053a6:	061d      	lsls	r5, r3, #24
 80053a8:	d514      	bpl.n	80053d4 <_printf_i+0x1ac>
 80053aa:	07df      	lsls	r7, r3, #31
 80053ac:	bf44      	itt	mi
 80053ae:	f043 0320 	orrmi.w	r3, r3, #32
 80053b2:	6023      	strmi	r3, [r4, #0]
 80053b4:	b91e      	cbnz	r6, 80053be <_printf_i+0x196>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	f023 0320 	bic.w	r3, r3, #32
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	2310      	movs	r3, #16
 80053c0:	e7b0      	b.n	8005324 <_printf_i+0xfc>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f043 0320 	orr.w	r3, r3, #32
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	2378      	movs	r3, #120	; 0x78
 80053cc:	4828      	ldr	r0, [pc, #160]	; (8005470 <_printf_i+0x248>)
 80053ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053d2:	e7e3      	b.n	800539c <_printf_i+0x174>
 80053d4:	0659      	lsls	r1, r3, #25
 80053d6:	bf48      	it	mi
 80053d8:	b2b6      	uxthmi	r6, r6
 80053da:	e7e6      	b.n	80053aa <_printf_i+0x182>
 80053dc:	4615      	mov	r5, r2
 80053de:	e7bb      	b.n	8005358 <_printf_i+0x130>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	6826      	ldr	r6, [r4, #0]
 80053e4:	6961      	ldr	r1, [r4, #20]
 80053e6:	1d18      	adds	r0, r3, #4
 80053e8:	6028      	str	r0, [r5, #0]
 80053ea:	0635      	lsls	r5, r6, #24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	d501      	bpl.n	80053f4 <_printf_i+0x1cc>
 80053f0:	6019      	str	r1, [r3, #0]
 80053f2:	e002      	b.n	80053fa <_printf_i+0x1d2>
 80053f4:	0670      	lsls	r0, r6, #25
 80053f6:	d5fb      	bpl.n	80053f0 <_printf_i+0x1c8>
 80053f8:	8019      	strh	r1, [r3, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	4615      	mov	r5, r2
 8005400:	e7ba      	b.n	8005378 <_printf_i+0x150>
 8005402:	682b      	ldr	r3, [r5, #0]
 8005404:	1d1a      	adds	r2, r3, #4
 8005406:	602a      	str	r2, [r5, #0]
 8005408:	681d      	ldr	r5, [r3, #0]
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	2100      	movs	r1, #0
 800540e:	4628      	mov	r0, r5
 8005410:	f7fa fede 	bl	80001d0 <memchr>
 8005414:	b108      	cbz	r0, 800541a <_printf_i+0x1f2>
 8005416:	1b40      	subs	r0, r0, r5
 8005418:	6060      	str	r0, [r4, #4]
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	2300      	movs	r3, #0
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005424:	e7a8      	b.n	8005378 <_printf_i+0x150>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	462a      	mov	r2, r5
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d0ab      	beq.n	800538c <_printf_i+0x164>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	d413      	bmi.n	8005462 <_printf_i+0x23a>
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	4298      	cmp	r0, r3
 8005440:	bfb8      	it	lt
 8005442:	4618      	movlt	r0, r3
 8005444:	e7a4      	b.n	8005390 <_printf_i+0x168>
 8005446:	2301      	movs	r3, #1
 8005448:	4632      	mov	r2, r6
 800544a:	4649      	mov	r1, r9
 800544c:	4640      	mov	r0, r8
 800544e:	47d0      	blx	sl
 8005450:	3001      	adds	r0, #1
 8005452:	d09b      	beq.n	800538c <_printf_i+0x164>
 8005454:	3501      	adds	r5, #1
 8005456:	68e3      	ldr	r3, [r4, #12]
 8005458:	9903      	ldr	r1, [sp, #12]
 800545a:	1a5b      	subs	r3, r3, r1
 800545c:	42ab      	cmp	r3, r5
 800545e:	dcf2      	bgt.n	8005446 <_printf_i+0x21e>
 8005460:	e7eb      	b.n	800543a <_printf_i+0x212>
 8005462:	2500      	movs	r5, #0
 8005464:	f104 0619 	add.w	r6, r4, #25
 8005468:	e7f5      	b.n	8005456 <_printf_i+0x22e>
 800546a:	bf00      	nop
 800546c:	080057a5 	.word	0x080057a5
 8005470:	080057b6 	.word	0x080057b6

08005474 <memcpy>:
 8005474:	440a      	add	r2, r1
 8005476:	4291      	cmp	r1, r2
 8005478:	f100 33ff 	add.w	r3, r0, #4294967295
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	4770      	bx	lr
 8005480:	b510      	push	{r4, lr}
 8005482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548a:	4291      	cmp	r1, r2
 800548c:	d1f9      	bne.n	8005482 <memcpy+0xe>
 800548e:	bd10      	pop	{r4, pc}

08005490 <memmove>:
 8005490:	4288      	cmp	r0, r1
 8005492:	b510      	push	{r4, lr}
 8005494:	eb01 0402 	add.w	r4, r1, r2
 8005498:	d902      	bls.n	80054a0 <memmove+0x10>
 800549a:	4284      	cmp	r4, r0
 800549c:	4623      	mov	r3, r4
 800549e:	d807      	bhi.n	80054b0 <memmove+0x20>
 80054a0:	1e43      	subs	r3, r0, #1
 80054a2:	42a1      	cmp	r1, r4
 80054a4:	d008      	beq.n	80054b8 <memmove+0x28>
 80054a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ae:	e7f8      	b.n	80054a2 <memmove+0x12>
 80054b0:	4402      	add	r2, r0
 80054b2:	4601      	mov	r1, r0
 80054b4:	428a      	cmp	r2, r1
 80054b6:	d100      	bne.n	80054ba <memmove+0x2a>
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054c2:	e7f7      	b.n	80054b4 <memmove+0x24>

080054c4 <_free_r>:
 80054c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054c6:	2900      	cmp	r1, #0
 80054c8:	d044      	beq.n	8005554 <_free_r+0x90>
 80054ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ce:	9001      	str	r0, [sp, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f1a1 0404 	sub.w	r4, r1, #4
 80054d6:	bfb8      	it	lt
 80054d8:	18e4      	addlt	r4, r4, r3
 80054da:	f000 f913 	bl	8005704 <__malloc_lock>
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <_free_r+0x94>)
 80054e0:	9801      	ldr	r0, [sp, #4]
 80054e2:	6813      	ldr	r3, [r2, #0]
 80054e4:	b933      	cbnz	r3, 80054f4 <_free_r+0x30>
 80054e6:	6063      	str	r3, [r4, #4]
 80054e8:	6014      	str	r4, [r2, #0]
 80054ea:	b003      	add	sp, #12
 80054ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f0:	f000 b90e 	b.w	8005710 <__malloc_unlock>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d908      	bls.n	800550a <_free_r+0x46>
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	1961      	adds	r1, r4, r5
 80054fc:	428b      	cmp	r3, r1
 80054fe:	bf01      	itttt	eq
 8005500:	6819      	ldreq	r1, [r3, #0]
 8005502:	685b      	ldreq	r3, [r3, #4]
 8005504:	1949      	addeq	r1, r1, r5
 8005506:	6021      	streq	r1, [r4, #0]
 8005508:	e7ed      	b.n	80054e6 <_free_r+0x22>
 800550a:	461a      	mov	r2, r3
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	b10b      	cbz	r3, 8005514 <_free_r+0x50>
 8005510:	42a3      	cmp	r3, r4
 8005512:	d9fa      	bls.n	800550a <_free_r+0x46>
 8005514:	6811      	ldr	r1, [r2, #0]
 8005516:	1855      	adds	r5, r2, r1
 8005518:	42a5      	cmp	r5, r4
 800551a:	d10b      	bne.n	8005534 <_free_r+0x70>
 800551c:	6824      	ldr	r4, [r4, #0]
 800551e:	4421      	add	r1, r4
 8005520:	1854      	adds	r4, r2, r1
 8005522:	42a3      	cmp	r3, r4
 8005524:	6011      	str	r1, [r2, #0]
 8005526:	d1e0      	bne.n	80054ea <_free_r+0x26>
 8005528:	681c      	ldr	r4, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	6053      	str	r3, [r2, #4]
 800552e:	4421      	add	r1, r4
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	e7da      	b.n	80054ea <_free_r+0x26>
 8005534:	d902      	bls.n	800553c <_free_r+0x78>
 8005536:	230c      	movs	r3, #12
 8005538:	6003      	str	r3, [r0, #0]
 800553a:	e7d6      	b.n	80054ea <_free_r+0x26>
 800553c:	6825      	ldr	r5, [r4, #0]
 800553e:	1961      	adds	r1, r4, r5
 8005540:	428b      	cmp	r3, r1
 8005542:	bf04      	itt	eq
 8005544:	6819      	ldreq	r1, [r3, #0]
 8005546:	685b      	ldreq	r3, [r3, #4]
 8005548:	6063      	str	r3, [r4, #4]
 800554a:	bf04      	itt	eq
 800554c:	1949      	addeq	r1, r1, r5
 800554e:	6021      	streq	r1, [r4, #0]
 8005550:	6054      	str	r4, [r2, #4]
 8005552:	e7ca      	b.n	80054ea <_free_r+0x26>
 8005554:	b003      	add	sp, #12
 8005556:	bd30      	pop	{r4, r5, pc}
 8005558:	20000258 	.word	0x20000258

0800555c <sbrk_aligned>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4e0e      	ldr	r6, [pc, #56]	; (8005598 <sbrk_aligned+0x3c>)
 8005560:	460c      	mov	r4, r1
 8005562:	6831      	ldr	r1, [r6, #0]
 8005564:	4605      	mov	r5, r0
 8005566:	b911      	cbnz	r1, 800556e <sbrk_aligned+0x12>
 8005568:	f000 f8bc 	bl	80056e4 <_sbrk_r>
 800556c:	6030      	str	r0, [r6, #0]
 800556e:	4621      	mov	r1, r4
 8005570:	4628      	mov	r0, r5
 8005572:	f000 f8b7 	bl	80056e4 <_sbrk_r>
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	d00a      	beq.n	8005590 <sbrk_aligned+0x34>
 800557a:	1cc4      	adds	r4, r0, #3
 800557c:	f024 0403 	bic.w	r4, r4, #3
 8005580:	42a0      	cmp	r0, r4
 8005582:	d007      	beq.n	8005594 <sbrk_aligned+0x38>
 8005584:	1a21      	subs	r1, r4, r0
 8005586:	4628      	mov	r0, r5
 8005588:	f000 f8ac 	bl	80056e4 <_sbrk_r>
 800558c:	3001      	adds	r0, #1
 800558e:	d101      	bne.n	8005594 <sbrk_aligned+0x38>
 8005590:	f04f 34ff 	mov.w	r4, #4294967295
 8005594:	4620      	mov	r0, r4
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	2000025c 	.word	0x2000025c

0800559c <_malloc_r>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	1ccd      	adds	r5, r1, #3
 80055a2:	f025 0503 	bic.w	r5, r5, #3
 80055a6:	3508      	adds	r5, #8
 80055a8:	2d0c      	cmp	r5, #12
 80055aa:	bf38      	it	cc
 80055ac:	250c      	movcc	r5, #12
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	4607      	mov	r7, r0
 80055b2:	db01      	blt.n	80055b8 <_malloc_r+0x1c>
 80055b4:	42a9      	cmp	r1, r5
 80055b6:	d905      	bls.n	80055c4 <_malloc_r+0x28>
 80055b8:	230c      	movs	r3, #12
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	2600      	movs	r6, #0
 80055be:	4630      	mov	r0, r6
 80055c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c4:	4e2e      	ldr	r6, [pc, #184]	; (8005680 <_malloc_r+0xe4>)
 80055c6:	f000 f89d 	bl	8005704 <__malloc_lock>
 80055ca:	6833      	ldr	r3, [r6, #0]
 80055cc:	461c      	mov	r4, r3
 80055ce:	bb34      	cbnz	r4, 800561e <_malloc_r+0x82>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4638      	mov	r0, r7
 80055d4:	f7ff ffc2 	bl	800555c <sbrk_aligned>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	4604      	mov	r4, r0
 80055dc:	d14d      	bne.n	800567a <_malloc_r+0xde>
 80055de:	6834      	ldr	r4, [r6, #0]
 80055e0:	4626      	mov	r6, r4
 80055e2:	2e00      	cmp	r6, #0
 80055e4:	d140      	bne.n	8005668 <_malloc_r+0xcc>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	4631      	mov	r1, r6
 80055ea:	4638      	mov	r0, r7
 80055ec:	eb04 0803 	add.w	r8, r4, r3
 80055f0:	f000 f878 	bl	80056e4 <_sbrk_r>
 80055f4:	4580      	cmp	r8, r0
 80055f6:	d13a      	bne.n	800566e <_malloc_r+0xd2>
 80055f8:	6821      	ldr	r1, [r4, #0]
 80055fa:	3503      	adds	r5, #3
 80055fc:	1a6d      	subs	r5, r5, r1
 80055fe:	f025 0503 	bic.w	r5, r5, #3
 8005602:	3508      	adds	r5, #8
 8005604:	2d0c      	cmp	r5, #12
 8005606:	bf38      	it	cc
 8005608:	250c      	movcc	r5, #12
 800560a:	4629      	mov	r1, r5
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff ffa5 	bl	800555c <sbrk_aligned>
 8005612:	3001      	adds	r0, #1
 8005614:	d02b      	beq.n	800566e <_malloc_r+0xd2>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	442b      	add	r3, r5
 800561a:	6023      	str	r3, [r4, #0]
 800561c:	e00e      	b.n	800563c <_malloc_r+0xa0>
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	1b52      	subs	r2, r2, r5
 8005622:	d41e      	bmi.n	8005662 <_malloc_r+0xc6>
 8005624:	2a0b      	cmp	r2, #11
 8005626:	d916      	bls.n	8005656 <_malloc_r+0xba>
 8005628:	1961      	adds	r1, r4, r5
 800562a:	42a3      	cmp	r3, r4
 800562c:	6025      	str	r5, [r4, #0]
 800562e:	bf18      	it	ne
 8005630:	6059      	strne	r1, [r3, #4]
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	bf08      	it	eq
 8005636:	6031      	streq	r1, [r6, #0]
 8005638:	5162      	str	r2, [r4, r5]
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	4638      	mov	r0, r7
 800563e:	f104 060b 	add.w	r6, r4, #11
 8005642:	f000 f865 	bl	8005710 <__malloc_unlock>
 8005646:	f026 0607 	bic.w	r6, r6, #7
 800564a:	1d23      	adds	r3, r4, #4
 800564c:	1af2      	subs	r2, r6, r3
 800564e:	d0b6      	beq.n	80055be <_malloc_r+0x22>
 8005650:	1b9b      	subs	r3, r3, r6
 8005652:	50a3      	str	r3, [r4, r2]
 8005654:	e7b3      	b.n	80055be <_malloc_r+0x22>
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	42a3      	cmp	r3, r4
 800565a:	bf0c      	ite	eq
 800565c:	6032      	streq	r2, [r6, #0]
 800565e:	605a      	strne	r2, [r3, #4]
 8005660:	e7ec      	b.n	800563c <_malloc_r+0xa0>
 8005662:	4623      	mov	r3, r4
 8005664:	6864      	ldr	r4, [r4, #4]
 8005666:	e7b2      	b.n	80055ce <_malloc_r+0x32>
 8005668:	4634      	mov	r4, r6
 800566a:	6876      	ldr	r6, [r6, #4]
 800566c:	e7b9      	b.n	80055e2 <_malloc_r+0x46>
 800566e:	230c      	movs	r3, #12
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4638      	mov	r0, r7
 8005674:	f000 f84c 	bl	8005710 <__malloc_unlock>
 8005678:	e7a1      	b.n	80055be <_malloc_r+0x22>
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	e7de      	b.n	800563c <_malloc_r+0xa0>
 800567e:	bf00      	nop
 8005680:	20000258 	.word	0x20000258

08005684 <_realloc_r>:
 8005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	4680      	mov	r8, r0
 800568a:	4614      	mov	r4, r2
 800568c:	460e      	mov	r6, r1
 800568e:	b921      	cbnz	r1, 800569a <_realloc_r+0x16>
 8005690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	4611      	mov	r1, r2
 8005696:	f7ff bf81 	b.w	800559c <_malloc_r>
 800569a:	b92a      	cbnz	r2, 80056a8 <_realloc_r+0x24>
 800569c:	f7ff ff12 	bl	80054c4 <_free_r>
 80056a0:	4625      	mov	r5, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a8:	f000 f838 	bl	800571c <_malloc_usable_size_r>
 80056ac:	4284      	cmp	r4, r0
 80056ae:	4607      	mov	r7, r0
 80056b0:	d802      	bhi.n	80056b8 <_realloc_r+0x34>
 80056b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056b6:	d812      	bhi.n	80056de <_realloc_r+0x5a>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4640      	mov	r0, r8
 80056bc:	f7ff ff6e 	bl	800559c <_malloc_r>
 80056c0:	4605      	mov	r5, r0
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d0ed      	beq.n	80056a2 <_realloc_r+0x1e>
 80056c6:	42bc      	cmp	r4, r7
 80056c8:	4622      	mov	r2, r4
 80056ca:	4631      	mov	r1, r6
 80056cc:	bf28      	it	cs
 80056ce:	463a      	movcs	r2, r7
 80056d0:	f7ff fed0 	bl	8005474 <memcpy>
 80056d4:	4631      	mov	r1, r6
 80056d6:	4640      	mov	r0, r8
 80056d8:	f7ff fef4 	bl	80054c4 <_free_r>
 80056dc:	e7e1      	b.n	80056a2 <_realloc_r+0x1e>
 80056de:	4635      	mov	r5, r6
 80056e0:	e7df      	b.n	80056a2 <_realloc_r+0x1e>
	...

080056e4 <_sbrk_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d06      	ldr	r5, [pc, #24]	; (8005700 <_sbrk_r+0x1c>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fb ffbe 	bl	8001670 <_sbrk>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_sbrk_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_sbrk_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000260 	.word	0x20000260

08005704 <__malloc_lock>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__malloc_lock+0x8>)
 8005706:	f000 b811 	b.w	800572c <__retarget_lock_acquire_recursive>
 800570a:	bf00      	nop
 800570c:	20000264 	.word	0x20000264

08005710 <__malloc_unlock>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__malloc_unlock+0x8>)
 8005712:	f000 b80c 	b.w	800572e <__retarget_lock_release_recursive>
 8005716:	bf00      	nop
 8005718:	20000264 	.word	0x20000264

0800571c <_malloc_usable_size_r>:
 800571c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005720:	1f18      	subs	r0, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfbc      	itt	lt
 8005726:	580b      	ldrlt	r3, [r1, r0]
 8005728:	18c0      	addlt	r0, r0, r3
 800572a:	4770      	bx	lr

0800572c <__retarget_lock_acquire_recursive>:
 800572c:	4770      	bx	lr

0800572e <__retarget_lock_release_recursive>:
 800572e:	4770      	bx	lr

08005730 <_init>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr

0800573c <_fini>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr
