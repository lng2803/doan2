
DA_VER_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080098e0  080098e0  000198e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd0  08009dd0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd8  08009dd8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000254  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f0a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002360  00000000  00000000  0003212e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00034490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  00035568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002253c  00000000  00000000  00036580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013272  00000000  00000000  00058abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf25e  00000000  00000000  0006bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013af8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc8  00000000  00000000  0013afdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098c8 	.word	0x080098c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080098c8 	.word	0x080098c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9aa 	b.w	8000f98 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000fa6:	4a38      	ldr	r2, [pc, #224]	; (8001088 <HD44780_Init+0xec>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <HD44780_Init+0xf0>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HD44780_Init+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HD44780_Init+0xec>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d907      	bls.n	8000fd0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HD44780_Init+0xf4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <HD44780_Init+0xf4>)
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e006      	b.n	8000fde <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HD44780_Init+0xf4>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HD44780_Init+0xf4>)
 8000fdc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000fde:	f000 f985 	bl	80012ec <DelayInit>
  HAL_Delay(50);
 8000fe2:	2032      	movs	r0, #50	; 0x32
 8000fe4:	f001 fcfe 	bl	80029e4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <HD44780_Init+0xf0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f943 	bl	8001278 <ExpanderWrite>
  HAL_Delay(1000);
 8000ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff6:	f001 fcf5 	bl	80029e4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000ffa:	2030      	movs	r0, #48	; 0x30
 8000ffc:	f000 f92b 	bl	8001256 <Write4Bits>
  DelayUS(4500);
 8001000:	f241 1094 	movw	r0, #4500	; 0x1194
 8001004:	f000 f99c 	bl	8001340 <DelayUS>

  Write4Bits(0x03 << 4);
 8001008:	2030      	movs	r0, #48	; 0x30
 800100a:	f000 f924 	bl	8001256 <Write4Bits>
  DelayUS(4500);
 800100e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001012:	f000 f995 	bl	8001340 <DelayUS>

  Write4Bits(0x03 << 4);
 8001016:	2030      	movs	r0, #48	; 0x30
 8001018:	f000 f91d 	bl	8001256 <Write4Bits>
  DelayUS(4500);
 800101c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001020:	f000 f98e 	bl	8001340 <DelayUS>

  Write4Bits(0x02 << 4);
 8001024:	2020      	movs	r0, #32
 8001026:	f000 f916 	bl	8001256 <Write4Bits>
  DelayUS(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 f988 	bl	8001340 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HD44780_Init+0xf4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8ce 	bl	80011dc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HD44780_Init+0xf8>)
 8001042:	2204      	movs	r2, #4
 8001044:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001046:	f000 f875 	bl	8001134 <HD44780_Display>
  HD44780_Clear();
 800104a:	f000 f82b 	bl	80010a4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HD44780_Init+0xfc>)
 8001050:	2202      	movs	r2, #2
 8001052:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HD44780_Init+0xfc>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f8bc 	bl	80011dc <SendCommand>
  DelayUS(4500);
 8001064:	f241 1094 	movw	r0, #4500	; 0x1194
 8001068:	f000 f96a 	bl	8001340 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800106c:	490b      	ldr	r1, [pc, #44]	; (800109c <HD44780_Init+0x100>)
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f876 	bl	8001160 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001074:	490a      	ldr	r1, [pc, #40]	; (80010a0 <HD44780_Init+0x104>)
 8001076:	2001      	movs	r0, #1
 8001078:	f000 f872 	bl	8001160 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800107c:	f000 f81d 	bl	80010ba <HD44780_Home>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000213 	.word	0x20000213
 800108c:	20000214 	.word	0x20000214
 8001090:	20000210 	.word	0x20000210
 8001094:	20000211 	.word	0x20000211
 8001098:	20000212 	.word	0x20000212
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008

080010a4 <HD44780_Clear>:

void HD44780_Clear()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 f897 	bl	80011dc <SendCommand>
  DelayUS(2000);
 80010ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b2:	f000 f945 	bl	8001340 <DelayUS>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HD44780_Home>:

void HD44780_Home()
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80010be:	2002      	movs	r0, #2
 80010c0:	f000 f88c 	bl	80011dc <SendCommand>
  DelayUS(2000);
 80010c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010c8:	f000 f93a 	bl	8001340 <DelayUS>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HD44780_SetCursor+0x5c>)
 80010e2:	f107 0408 	add.w	r4, r7, #8
 80010e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HD44780_SetCursor+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d303      	bcc.n	80010fe <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HD44780_SetCursor+0x60>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	3318      	adds	r3, #24
 8001104:	443b      	add	r3, r7
 8001106:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4413      	add	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001118:	b25b      	sxtb	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f85d 	bl	80011dc <SendCommand>
}
 8001122:	bf00      	nop
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	080098e0 	.word	0x080098e0
 8001130:	20000213 	.word	0x20000213

08001134 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HD44780_Display+0x28>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HD44780_Display+0x28>)
 8001144:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <HD44780_Display+0x28>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f043 0308 	orr.w	r3, r3, #8
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f843 	bl	80011dc <SendCommand>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000211 	.word	0x20000211

08001160 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f82a 	bl	80011dc <SendCommand>
  for (int i=0; i<8; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e009      	b.n	80011a2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f82e 	bl	80011f8 <SendChar>
  for (int i=0; i<8; i++)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	ddf2      	ble.n	800118e <HD44780_CreateSpecialChar+0x2e>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80011ba:	e006      	b.n	80011ca <HD44780_PrintStr+0x18>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f817 	bl	80011f8 <SendChar>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f4      	bne.n	80011bc <HD44780_PrintStr+0xa>
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f812 	bl	8001214 <Send>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f804 	bl	8001214 <Send>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f023 030f 	bic.w	r3, r3, #15
 800122a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	4313      	orrs	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f80b 	bl	8001256 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001240:	7bba      	ldrb	r2, [r7, #14]
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	4313      	orrs	r3, r2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f804 	bl	8001256 <Write4Bits>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f808 	bl	8001278 <ExpanderWrite>
  PulseEnable(value);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f820 	bl	80012b0 <PulseEnable>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <ExpanderWrite+0x30>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4313      	orrs	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800128e:	f107 020f 	add.w	r2, r7, #15
 8001292:	230a      	movs	r3, #10
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	214e      	movs	r1, #78	; 0x4e
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <ExpanderWrite+0x34>)
 800129c:	f002 f87c 	bl	8003398 <HAL_I2C_Master_Transmit>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000214 	.word	0x20000214
 80012ac:	20000280 	.word	0x20000280

080012b0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffd8 	bl	8001278 <ExpanderWrite>
  DelayUS(20);
 80012c8:	2014      	movs	r0, #20
 80012ca:	f000 f839 	bl	8001340 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffce 	bl	8001278 <ExpanderWrite>
  DelayUS(20);
 80012dc:	2014      	movs	r0, #20
 80012de:	f000 f82f 	bl	8001340 <DelayUS>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <DelayInit>:

static void DelayInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <DelayInit+0x4c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <DelayInit+0x4c>)
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <DelayInit+0x4c>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <DelayInit+0x4c>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <DelayInit+0x50>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <DelayInit+0x50>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <DelayInit+0x50>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a08      	ldr	r2, [pc, #32]	; (800133c <DelayInit+0x50>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <DelayInit+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001326:	bf00      	nop
  __ASM volatile ("NOP");
 8001328:	bf00      	nop
  __ASM volatile ("NOP");
 800132a:	bf00      	nop
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000edf0 	.word	0xe000edf0
 800133c:	e0001000 	.word	0xe0001000

08001340 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <DelayUS+0x44>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <DelayUS+0x48>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9a      	lsrs	r2, r3, #18
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <DelayUS+0x4c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <DelayUS+0x4c>)
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f6      	bhi.n	8001362 <DelayUS+0x22>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000014 	.word	0x20000014
 8001388:	431bde83 	.word	0x431bde83
 800138c:	e0001000 	.word	0xe0001000

08001390 <HAL_TIM_IC_CaptureCallback>:

uint32_t counter = 0;
uint16_t count = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x20>)
 80013a0:	6013      	str	r3, [r2, #0]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000428 	.word	0x20000428
 80013b4:	00000000 	.word	0x00000000

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b092      	sub	sp, #72	; 0x48
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013be:	f001 fa9f 	bl	8002900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c2:	f000 fbff 	bl	8001bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c6:	f000 fe29 	bl	800201c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013ca:	f000 fc65 	bl	8001c98 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013ce:	f000 fc91 	bl	8001cf4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80013d2:	f000 fd83 	bl	8001edc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80013d6:	f000 fdf7 	bl	8001fc8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013da:	f000 fd2b 	bl	8001e34 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013de:	f000 fefb 	bl	80021d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f7ff fdda 	bl	8000f9c <HD44780_Init>
  HD44780_Clear();
 80013e8:	f7ff fe5c 	bl	80010a4 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff fe6e 	bl	80010d0 <HD44780_SetCursor>
  HD44780_PrintStr("DO AN DIEU KHIEN");
 80013f4:	48ad      	ldr	r0, [pc, #692]	; (80016ac <main+0x2f4>)
 80013f6:	f7ff fedc 	bl	80011b2 <HD44780_PrintStr>
	char str[6];
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80013fa:	2100      	movs	r1, #0
 80013fc:	48ac      	ldr	r0, [pc, #688]	; (80016b0 <main+0x2f8>)
 80013fe:	f002 ffc9 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001402:	213c      	movs	r1, #60	; 0x3c
 8001404:	48ab      	ldr	r0, [pc, #684]	; (80016b4 <main+0x2fc>)
 8001406:	f003 f933 	bl	8004670 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800140a:	2108      	movs	r1, #8
 800140c:	48aa      	ldr	r0, [pc, #680]	; (80016b8 <main+0x300>)
 800140e:	f002 ffc1 	bl	8004394 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float KP, KD, KI;
  KP = 14;
 8001412:	4baa      	ldr	r3, [pc, #680]	; (80016bc <main+0x304>)
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  KI = 0.0143;
 8001416:	4baa      	ldr	r3, [pc, #680]	; (80016c0 <main+0x308>)
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
  KD = 10;
 800141a:	4baa      	ldr	r3, [pc, #680]	; (80016c4 <main+0x30c>)
 800141c:	643b      	str	r3, [r7, #64]	; 0x40
  Setpoint = 3600;
 800141e:	4baa      	ldr	r3, [pc, #680]	; (80016c8 <main+0x310>)
 8001420:	4aaa      	ldr	r2, [pc, #680]	; (80016cc <main+0x314>)
 8001422:	601a      	str	r2, [r3, #0]
  uint16_t ReSetpoint = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	877b      	strh	r3, [r7, #58]	; 0x3a

  // 1100 14 0.02 10
  Kp = KP/100;
 8001428:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800142c:	eddf 6aa8 	vldr	s13, [pc, #672]	; 80016d0 <main+0x318>
 8001430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001434:	4ba7      	ldr	r3, [pc, #668]	; (80016d4 <main+0x31c>)
 8001436:	edc3 7a00 	vstr	s15, [r3]
  Ki = KI/100;
 800143a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800143e:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80016d0 <main+0x318>
 8001442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001446:	4ba4      	ldr	r3, [pc, #656]	; (80016d8 <main+0x320>)
 8001448:	edc3 7a00 	vstr	s15, [r3]
  Kd = KD/100;
 800144c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001450:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80016d0 <main+0x318>
 8001454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001458:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <main+0x324>)
 800145a:	edc3 7a00 	vstr	s15, [r3]


  int16_t Position = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	873b      	strh	r3, [r7, #56]	; 0x38
  int16_t lastPosition = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	86fb      	strh	r3, [r7, #54]	; 0x36
  while (1)
  {
			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0) {
 8001466:	2110      	movs	r1, #16
 8001468:	489d      	ldr	r0, [pc, #628]	; (80016e0 <main+0x328>)
 800146a:	f001 fe1f 	bl	80030ac <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 81a2 	bne.w	80017ba <main+0x402>
				P = 0; I = 0; D = 0; PID = 0;
 8001476:	4b9b      	ldr	r3, [pc, #620]	; (80016e4 <main+0x32c>)
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	4b9a      	ldr	r3, [pc, #616]	; (80016e8 <main+0x330>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b99      	ldr	r3, [pc, #612]	; (80016ec <main+0x334>)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	4b98      	ldr	r3, [pc, #608]	; (80016f0 <main+0x338>)
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
				last_error = 0; error = 0;
 8001496:	4b97      	ldr	r3, [pc, #604]	; (80016f4 <main+0x33c>)
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	4b96      	ldr	r3, [pc, #600]	; (80016f8 <main+0x340>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
				HAL_Delay(100);
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f001 fa9c 	bl	80029e4 <HAL_Delay>
				__HAL_TIM_SetCounter(&htim2,0);
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <main+0x2fc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
			}

//##################### read Value from uart ##########################//
while (!running) {
 80014b4:	e181      	b.n	80017ba <main+0x402>
	  Kp = KP/100;
 80014b6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80014ba:	eddf 6a85 	vldr	s13, [pc, #532]	; 80016d0 <main+0x318>
 80014be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c2:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <main+0x31c>)
 80014c4:	edc3 7a00 	vstr	s15, [r3]
	  Ki = KI/100;
 80014c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014cc:	eddf 6a80 	vldr	s13, [pc, #512]	; 80016d0 <main+0x318>
 80014d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <main+0x320>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]
	  Kd = KD/100;
 80014da:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80014de:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80016d0 <main+0x318>
 80014e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e6:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <main+0x324>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
	HAL_UART_Receive(&huart1, &buffer, 30, 100);
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	221e      	movs	r2, #30
 80014f0:	4982      	ldr	r1, [pc, #520]	; (80016fc <main+0x344>)
 80014f2:	4883      	ldr	r0, [pc, #524]	; (8001700 <main+0x348>)
 80014f4:	f004 f8f5 	bl	80056e2 <HAL_UART_Receive>
	if ((char)buffer[0] == 's') running = 1;
 80014f8:	4b80      	ldr	r3, [pc, #512]	; (80016fc <main+0x344>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b73      	cmp	r3, #115	; 0x73
 80014fe:	d102      	bne.n	8001506 <main+0x14e>
 8001500:	4b80      	ldr	r3, [pc, #512]	; (8001704 <main+0x34c>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
	if ((char)buffer[0] == 'o') running = 0;
 8001506:	4b7d      	ldr	r3, [pc, #500]	; (80016fc <main+0x344>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b6f      	cmp	r3, #111	; 0x6f
 800150c:	d102      	bne.n	8001514 <main+0x15c>
 800150e:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <main+0x34c>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]

	  pch = strtok(buffer, ":,");
 8001514:	497c      	ldr	r1, [pc, #496]	; (8001708 <main+0x350>)
 8001516:	4879      	ldr	r0, [pc, #484]	; (80016fc <main+0x344>)
 8001518:	f005 ff40 	bl	800739c <strtok>
 800151c:	4603      	mov	r3, r0
 800151e:	4a7b      	ldr	r2, [pc, #492]	; (800170c <main+0x354>)
 8001520:	6013      	str	r3, [r2, #0]
	  while (pch != NULL)
 8001522:	e090      	b.n	8001646 <main+0x28e>
	  {
		if (strcmp(pch, "Kp") == 0)
 8001524:	4b79      	ldr	r3, [pc, #484]	; (800170c <main+0x354>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4979      	ldr	r1, [pc, #484]	; (8001710 <main+0x358>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe50 	bl	80001d0 <strcmp>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d110      	bne.n	8001558 <main+0x1a0>
		{
		  KP = atof(strtok(NULL, ":,"));
 8001536:	4974      	ldr	r1, [pc, #464]	; (8001708 <main+0x350>)
 8001538:	2000      	movs	r0, #0
 800153a:	f005 ff2f 	bl	800739c <strtok>
 800153e:	4603      	mov	r3, r0
 8001540:	4618      	mov	r0, r3
 8001542:	f005 f8a5 	bl	8006690 <atof>
 8001546:	ec53 2b10 	vmov	r2, r3, d0
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb1d 	bl	8000b8c <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
 8001556:	e06f      	b.n	8001638 <main+0x280>
		}
		else if (strcmp(pch, "Kd") == 0)
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <main+0x354>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	496d      	ldr	r1, [pc, #436]	; (8001714 <main+0x35c>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe36 	bl	80001d0 <strcmp>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d110      	bne.n	800158c <main+0x1d4>
		{
		  KD = atof(strtok(NULL, ":,"));
 800156a:	4967      	ldr	r1, [pc, #412]	; (8001708 <main+0x350>)
 800156c:	2000      	movs	r0, #0
 800156e:	f005 ff15 	bl	800739c <strtok>
 8001572:	4603      	mov	r3, r0
 8001574:	4618      	mov	r0, r3
 8001576:	f005 f88b 	bl	8006690 <atof>
 800157a:	ec53 2b10 	vmov	r2, r3, d0
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fb03 	bl	8000b8c <__aeabi_d2f>
 8001586:	4603      	mov	r3, r0
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
 800158a:	e055      	b.n	8001638 <main+0x280>
		}
		else
		if (strcmp(pch, "Ki") == 0)
 800158c:	4b5f      	ldr	r3, [pc, #380]	; (800170c <main+0x354>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4961      	ldr	r1, [pc, #388]	; (8001718 <main+0x360>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe1c 	bl	80001d0 <strcmp>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d110      	bne.n	80015c0 <main+0x208>
		{
		  KI = atof(strtok(NULL, ":,"));
 800159e:	495a      	ldr	r1, [pc, #360]	; (8001708 <main+0x350>)
 80015a0:	2000      	movs	r0, #0
 80015a2:	f005 fefb 	bl	800739c <strtok>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 f871 	bl	8006690 <atof>
 80015ae:	ec53 2b10 	vmov	r2, r3, d0
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fae9 	bl	8000b8c <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015be:	e03b      	b.n	8001638 <main+0x280>
		}
		else
			if (strcmp(pch, "Ag") == 0)
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <main+0x354>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4955      	ldr	r1, [pc, #340]	; (800171c <main+0x364>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe02 	bl	80001d0 <strcmp>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <main+0x24c>
		{
			ReSetpoint = atof(strtok(NULL, ":,"));
 80015d2:	494d      	ldr	r1, [pc, #308]	; (8001708 <main+0x350>)
 80015d4:	2000      	movs	r0, #0
 80015d6:	f005 fee1 	bl	800739c <strtok>
 80015da:	4603      	mov	r3, r0
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 f857 	bl	8006690 <atof>
 80015e2:	ec53 2b10 	vmov	r2, r3, d0
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff faaf 	bl	8000b4c <__aeabi_d2uiz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	877b      	strh	r3, [r7, #58]	; 0x3a
			Setpoint = ReSetpoint;
 80015f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <main+0x310>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
 8001602:	e019      	b.n	8001638 <main+0x280>
		}
		else if (strcmp(pch, "Re") == 0)
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <main+0x354>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4945      	ldr	r1, [pc, #276]	; (8001720 <main+0x368>)
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fde0 	bl	80001d0 <strcmp>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d110      	bne.n	8001638 <main+0x280>
		{
		  Load = atof(strtok(NULL, ":,"));
 8001616:	493c      	ldr	r1, [pc, #240]	; (8001708 <main+0x350>)
 8001618:	2000      	movs	r0, #0
 800161a:	f005 febf 	bl	800739c <strtok>
 800161e:	4603      	mov	r3, r0
 8001620:	4618      	mov	r0, r3
 8001622:	f005 f835 	bl	8006690 <atof>
 8001626:	ec53 2b10 	vmov	r2, r3, d0
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff faad 	bl	8000b8c <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <main+0x36c>)
 8001636:	6013      	str	r3, [r2, #0]
		}
		pch = strtok(NULL, ":,");
 8001638:	4933      	ldr	r1, [pc, #204]	; (8001708 <main+0x350>)
 800163a:	2000      	movs	r0, #0
 800163c:	f005 feae 	bl	800739c <strtok>
 8001640:	4603      	mov	r3, r0
 8001642:	4a32      	ldr	r2, [pc, #200]	; (800170c <main+0x354>)
 8001644:	6013      	str	r3, [r2, #0]
	  while (pch != NULL)
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <main+0x354>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f af6a 	bne.w	8001524 <main+0x16c>
		}
	 // if (counter < 25000) Position = counter; else Position = -(50000 - counter);
	  Position = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	873b      	strh	r3, [r7, #56]	; 0x38
	  lastPosition = counter;
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <main+0x370>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	86fb      	strh	r3, [r7, #54]	; 0x36
		P = 0; I = 0; D = 0; PID = 0;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <main+0x32c>)
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <main+0x330>)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <main+0x334>)
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <main+0x338>)
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
		last_error = 0; error = 0;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <main+0x33c>)
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <main+0x340>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 800168a:	2064      	movs	r0, #100	; 0x64
 800168c:	f001 f9aa 	bl	80029e4 <HAL_Delay>
		//HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
//		__HAL_TIM_SetCounter(&htim2,0);
//		if (counter == 0) lastPosition = 0;
		if (Load) {
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <main+0x36c>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	eef5 7a40 	vcmp.f32	s15, #0.0
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	d045      	beq.n	800172c <main+0x374>
			htim3.Instance->CCR3 = 1750;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <main+0x300>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016aa:	e044      	b.n	8001736 <main+0x37e>
 80016ac:	080098f0 	.word	0x080098f0
 80016b0:	20000364 	.word	0x20000364
 80016b4:	2000031c 	.word	0x2000031c
 80016b8:	20000238 	.word	0x20000238
 80016bc:	41600000 	.word	0x41600000
 80016c0:	3c6a4a8c 	.word	0x3c6a4a8c
 80016c4:	41200000 	.word	0x41200000
 80016c8:	200003f4 	.word	0x200003f4
 80016cc:	45610000 	.word	0x45610000
 80016d0:	42c80000 	.word	0x42c80000
 80016d4:	200003f8 	.word	0x200003f8
 80016d8:	200003fc 	.word	0x200003fc
 80016dc:	20000400 	.word	0x20000400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	20000404 	.word	0x20000404
 80016e8:	20000408 	.word	0x20000408
 80016ec:	2000040c 	.word	0x2000040c
 80016f0:	20000410 	.word	0x20000410
 80016f4:	20000414 	.word	0x20000414
 80016f8:	20000418 	.word	0x20000418
 80016fc:	20000218 	.word	0x20000218
 8001700:	200003ac 	.word	0x200003ac
 8001704:	20000424 	.word	0x20000424
 8001708:	08009904 	.word	0x08009904
 800170c:	20000420 	.word	0x20000420
 8001710:	08009908 	.word	0x08009908
 8001714:	0800990c 	.word	0x0800990c
 8001718:	08009910 	.word	0x08009910
 800171c:	08009914 	.word	0x08009914
 8001720:	08009918 	.word	0x08009918
 8001724:	2000041c 	.word	0x2000041c
 8001728:	20000428 	.word	0x20000428
		} else {
			htim3.Instance->CCR3 = 2500;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <main+0x410>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		Motor_Control(0);
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fd1e 	bl	8002178 <Motor_Control>

		//##################### I2C LCD SHOW ##########################//
			HD44780_Clear();
 800173c:	f7ff fcb2 	bl	80010a4 <HD44780_Clear>
			sprintf(str, "%ld", (uint32_t)Setpoint);
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <main+0x414>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	ee17 2a90 	vmov	r2, s15
 8001752:	491f      	ldr	r1, [pc, #124]	; (80017d0 <main+0x418>)
 8001754:	4618      	mov	r0, r3
 8001756:	f004 ffd1 	bl	80066fc <siprintf>
			HD44780_SetCursor(10,1);
 800175a:	2101      	movs	r1, #1
 800175c:	200a      	movs	r0, #10
 800175e:	f7ff fcb7 	bl	80010d0 <HD44780_SetCursor>
			HD44780_PrintStr(str);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fd23 	bl	80011b2 <HD44780_PrintStr>


			sprintf(str, "%ld", (uint32_t)Load);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <main+0x41c>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	ee17 2a90 	vmov	r2, s15
 800177e:	4914      	ldr	r1, [pc, #80]	; (80017d0 <main+0x418>)
 8001780:	4618      	mov	r0, r3
 8001782:	f004 ffbb 	bl	80066fc <siprintf>
			HD44780_SetCursor(8,1);
 8001786:	2101      	movs	r1, #1
 8001788:	2008      	movs	r0, #8
 800178a:	f7ff fca1 	bl	80010d0 <HD44780_SetCursor>
			HD44780_PrintStr(str);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd0d 	bl	80011b2 <HD44780_PrintStr>
			sprintf(str, "%ld", (uint32_t)(counter));
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <main+0x420>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	490b      	ldr	r1, [pc, #44]	; (80017d0 <main+0x418>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 ffaa 	bl	80066fc <siprintf>
			HD44780_SetCursor(0,1);
 80017a8:	2101      	movs	r1, #1
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fc90 	bl	80010d0 <HD44780_SetCursor>
			HD44780_PrintStr(str);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fcfc 	bl	80011b2 <HD44780_PrintStr>
while (!running) {
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <main+0x424>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f43f ae79 	beq.w	80014b6 <main+0xfe>
		//##################### I2C LCD SHOW ##########################//

}


while (running) {
 80017c4:	e1eb      	b.n	8001b9e <main+0x7e6>
 80017c6:	bf00      	nop
 80017c8:	20000238 	.word	0x20000238
 80017cc:	200003f4 	.word	0x200003f4
 80017d0:	0800991c 	.word	0x0800991c
 80017d4:	2000041c 	.word	0x2000041c
 80017d8:	20000428 	.word	0x20000428
 80017dc:	20000424 	.word	0x20000424
 80017e0:	42c80000 	.word	0x42c80000
	//##################### caculate PID ##########################//
	  Kp = KP/100;
 80017e4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80017e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80017e0 <main+0x428>
 80017ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f0:	4b9d      	ldr	r3, [pc, #628]	; (8001a68 <main+0x6b0>)
 80017f2:	edc3 7a00 	vstr	s15, [r3]
	  Ki = KI/100;
 80017f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80017fa:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8001a6c <main+0x6b4>
 80017fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001802:	4b9b      	ldr	r3, [pc, #620]	; (8001a70 <main+0x6b8>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	  Kd = KD/100;
 8001808:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800180c:	eddf 6a97 	vldr	s13, [pc, #604]	; 8001a6c <main+0x6b4>
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	4b97      	ldr	r3, [pc, #604]	; (8001a74 <main+0x6bc>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
	HAL_UART_Receive(&huart1, &buffer, 30, 10);
 800181a:	230a      	movs	r3, #10
 800181c:	221e      	movs	r2, #30
 800181e:	4996      	ldr	r1, [pc, #600]	; (8001a78 <main+0x6c0>)
 8001820:	4896      	ldr	r0, [pc, #600]	; (8001a7c <main+0x6c4>)
 8001822:	f003 ff5e 	bl	80056e2 <HAL_UART_Receive>
	if ((char)buffer[0] == 's') running = 1;
 8001826:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <main+0x6c0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b73      	cmp	r3, #115	; 0x73
 800182c:	d102      	bne.n	8001834 <main+0x47c>
 800182e:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <main+0x6c8>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
	if ((char)buffer[0] == 'o') running = 0;
 8001834:	4b90      	ldr	r3, [pc, #576]	; (8001a78 <main+0x6c0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b6f      	cmp	r3, #111	; 0x6f
 800183a:	d102      	bne.n	8001842 <main+0x48a>
 800183c:	4b90      	ldr	r3, [pc, #576]	; (8001a80 <main+0x6c8>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
		//if (Position < 0) Position = 0;

//	if (Position > 0.98*Setpoint) Setpoint = 0;
//	if (Position < (int)ReSetpoint*0.02 && Setpoint == 0) Setpoint = ReSetpoint;

    if (Position > 0.98*Setpoint && Position < 1.02*Setpoint){
 8001842:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe7c 	bl	8000544 <__aeabi_i2d>
 800184c:	4604      	mov	r4, r0
 800184e:	460d      	mov	r5, r1
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <main+0x6cc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe87 	bl	8000568 <__aeabi_f2d>
 800185a:	a37d      	add	r3, pc, #500	; (adr r3, 8001a50 <main+0x698>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe feda 	bl	8000618 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4620      	mov	r0, r4
 800186a:	4629      	mov	r1, r5
 800186c:	f7ff f964 	bl	8000b38 <__aeabi_dcmpgt>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d01f      	beq.n	80018b6 <main+0x4fe>
 8001876:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe62 	bl	8000544 <__aeabi_i2d>
 8001880:	4604      	mov	r4, r0
 8001882:	460d      	mov	r5, r1
 8001884:	4b7f      	ldr	r3, [pc, #508]	; (8001a84 <main+0x6cc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe6d 	bl	8000568 <__aeabi_f2d>
 800188e:	a372      	add	r3, pc, #456	; (adr r3, 8001a58 <main+0x6a0>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fec0 	bl	8000618 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7ff f92c 	bl	8000afc <__aeabi_dcmplt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <main+0x4fe>
        count ++;
 80018aa:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <main+0x6d0>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <main+0x6d0>)
 80018b4:	801a      	strh	r2, [r3, #0]
    }
    if (count > 10){
 80018b6:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <main+0x6d0>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d906      	bls.n	80018cc <main+0x514>
    	Setpoint = 0;
 80018be:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <main+0x6cc>)
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
        count = 0;
 80018c6:	4b70      	ldr	r3, [pc, #448]	; (8001a88 <main+0x6d0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	801a      	strh	r2, [r3, #0]
    }

    if (Position < (int)ReSetpoint*0.02 && Setpoint == 0 && Position > -(int)ReSetpoint*0.02){
 80018cc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe37 	bl	8000544 <__aeabi_i2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe31 	bl	8000544 <__aeabi_i2d>
 80018e2:	a35f      	add	r3, pc, #380	; (adr r3, 8001a60 <main+0x6a8>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fe96 	bl	8000618 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7ff f902 	bl	8000afc <__aeabi_dcmplt>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d027      	beq.n	800194e <main+0x596>
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <main+0x6cc>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	d11f      	bne.n	800194e <main+0x596>
 800190e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe16 	bl	8000544 <__aeabi_i2d>
 8001918:	4604      	mov	r4, r0
 800191a:	460d      	mov	r5, r1
 800191c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800191e:	425b      	negs	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe0f 	bl	8000544 <__aeabi_i2d>
 8001926:	a34e      	add	r3, pc, #312	; (adr r3, 8001a60 <main+0x6a8>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe74 	bl	8000618 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7ff f8fe 	bl	8000b38 <__aeabi_dcmpgt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <main+0x596>
        count ++;
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <main+0x6d0>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <main+0x6d0>)
 800194c:	801a      	strh	r2, [r3, #0]
    }
    if (count > 10){
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <main+0x6d0>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b0a      	cmp	r3, #10
 8001954:	d90a      	bls.n	800196c <main+0x5b4>
    	Setpoint = ReSetpoint;
 8001956:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <main+0x6cc>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
        count = 0;
 8001966:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <main+0x6d0>)
 8001968:	2200      	movs	r2, #0
 800196a:	801a      	strh	r2, [r3, #0]
    }

		Position = counter - lastPosition;
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <main+0x6d4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b29a      	uxth	r2, r3
 8001972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	b29b      	uxth	r3, r3
 8001978:	873b      	strh	r3, [r7, #56]	; 0x38
		Input = Position;
 800197a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <main+0x6d8>)
 8001988:	edc3 7a00 	vstr	s15, [r3]
	    error = Setpoint - Input;
 800198c:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <main+0x6cc>)
 800198e:	ed93 7a00 	vldr	s14, [r3]
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <main+0x6d8>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <main+0x6dc>)
 800199e:	edc3 7a00 	vstr	s15, [r3]
	    P = Kp * error;
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <main+0x6b0>)
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <main+0x6dc>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <main+0x6e0>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
	    I += Ki * error * dt;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <main+0x6b8>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <main+0x6dc>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <main+0x6e4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <main+0x6e8>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <main+0x6e8>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
	    D = Kd * (error - last_error) / dt;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <main+0x6dc>)
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <main+0x6ec>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <main+0x6bc>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <main+0x6e4>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a06:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <main+0x6f0>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]
	    PID = P + I + D;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <main+0x6e0>)
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <main+0x6e8>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <main+0x6f0>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <main+0x6f4>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
	    last_error = error;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <main+0x6dc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <main+0x6ec>)
 8001a32:	6013      	str	r3, [r2, #0]
	    int speed = PID;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <main+0x6f4>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
		  if (speed > 100) {
 8001a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	dd32      	ble.n	8001ab0 <main+0x6f8>
			  speed = 100;
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a4e:	e036      	b.n	8001abe <main+0x706>
 8001a50:	f5c28f5c 	.word	0xf5c28f5c
 8001a54:	3fef5c28 	.word	0x3fef5c28
 8001a58:	851eb852 	.word	0x851eb852
 8001a5c:	3ff051eb 	.word	0x3ff051eb
 8001a60:	47ae147b 	.word	0x47ae147b
 8001a64:	3f947ae1 	.word	0x3f947ae1
 8001a68:	200003f8 	.word	0x200003f8
 8001a6c:	42c80000 	.word	0x42c80000
 8001a70:	200003fc 	.word	0x200003fc
 8001a74:	20000400 	.word	0x20000400
 8001a78:	20000218 	.word	0x20000218
 8001a7c:	200003ac 	.word	0x200003ac
 8001a80:	20000424 	.word	0x20000424
 8001a84:	200003f4 	.word	0x200003f4
 8001a88:	2000042c 	.word	0x2000042c
 8001a8c:	20000428 	.word	0x20000428
 8001a90:	200003f0 	.word	0x200003f0
 8001a94:	20000418 	.word	0x20000418
 8001a98:	20000404 	.word	0x20000404
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000408 	.word	0x20000408
 8001aa4:	20000414 	.word	0x20000414
 8001aa8:	2000040c 	.word	0x2000040c
 8001aac:	20000410 	.word	0x20000410
		  }
		  else if (speed < -100) {
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001ab6:	da02      	bge.n	8001abe <main+0x706>
			  speed = -100;
 8001ab8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
		  }
	    Motor_Control(speed);
 8001abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ac0:	f000 fb5a 	bl	8002178 <Motor_Control>
		  HAL_Delay(dt);
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <main+0x7f4>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ace:	ee17 0a90 	vmov	r0, s15
 8001ad2:	f000 ff87 	bl	80029e4 <HAL_Delay>
	//##################### caculate PID ##########################//


	//##################### tranfer data ##########################//
		  char buffer1[30];
		  int len = sprintf(buffer1, "%d", Position);
 8001ad6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <main+0x7f8>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fe0c 	bl	80066fc <siprintf>
 8001ae4:	62f8      	str	r0, [r7, #44]	; 0x2c
		  if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer1, len, 20) != HAL_OK)
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	1d39      	adds	r1, r7, #4
 8001aec:	2314      	movs	r3, #20
 8001aee:	4831      	ldr	r0, [pc, #196]	; (8001bb4 <main+0x7fc>)
 8001af0:	f003 fd65 	bl	80055be <HAL_UART_Transmit>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <main+0x746>
		  {
		    Error_Handler();
 8001afa:	f000 fbc7 	bl	800228c <Error_Handler>
		  }

		  uint8_t data[] = "%";
 8001afe:	2325      	movs	r3, #37	; 0x25
 8001b00:	803b      	strh	r3, [r7, #0]
		  HAL_UART_Transmit(&huart1, data, sizeof (data), 10);
 8001b02:	4639      	mov	r1, r7
 8001b04:	230a      	movs	r3, #10
 8001b06:	2202      	movs	r2, #2
 8001b08:	482a      	ldr	r0, [pc, #168]	; (8001bb4 <main+0x7fc>)
 8001b0a:	f003 fd58 	bl	80055be <HAL_UART_Transmit>

		  len = sprintf(buffer1, "%d\r\n", speed);
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b12:	4929      	ldr	r1, [pc, #164]	; (8001bb8 <main+0x800>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fdf1 	bl	80066fc <siprintf>
 8001b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
		  if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer1, len, 20) != HAL_OK)
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	1d39      	adds	r1, r7, #4
 8001b22:	2314      	movs	r3, #20
 8001b24:	4823      	ldr	r0, [pc, #140]	; (8001bb4 <main+0x7fc>)
 8001b26:	f003 fd4a 	bl	80055be <HAL_UART_Transmit>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <main+0x77c>
		  {
		    Error_Handler();
 8001b30:	f000 fbac 	bl	800228c <Error_Handler>
		  }
	//##################### tranfer data ##########################//

		  //##################### I2C LCD SHOW ##########################//
		  HD44780_Clear();
 8001b34:	f7ff fab6 	bl	80010a4 <HD44780_Clear>
		  		sprintf(str, "%ld", (uint32_t)speed);
 8001b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3e:	491f      	ldr	r1, [pc, #124]	; (8001bbc <main+0x804>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 fddb 	bl	80066fc <siprintf>
		  		HD44780_SetCursor(10,1);
 8001b46:	2101      	movs	r1, #1
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f7ff fac1 	bl	80010d0 <HD44780_SetCursor>
		  		HD44780_PrintStr(str);
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fb2d 	bl	80011b2 <HD44780_PrintStr>

		  		sprintf(str, "%ld", (uint32_t)running);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <main+0x808>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4916      	ldr	r1, [pc, #88]	; (8001bbc <main+0x804>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fdc9 	bl	80066fc <siprintf>
		  				  		HD44780_SetCursor(8,1);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2008      	movs	r0, #8
 8001b6e:	f7ff faaf 	bl	80010d0 <HD44780_SetCursor>
		  				  		HD44780_PrintStr(str);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb1b 	bl	80011b2 <HD44780_PrintStr>

		  	  sprintf(str, "%d", Position);
 8001b7c:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <main+0x7f8>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fdb8 	bl	80066fc <siprintf>
		  	HD44780_SetCursor(0,1);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fa9e 	bl	80010d0 <HD44780_SetCursor>
		  			  				  		HD44780_PrintStr(str);
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fb0a 	bl	80011b2 <HD44780_PrintStr>
while (running) {
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <main+0x808>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f47f ae1e 	bne.w	80017e4 <main+0x42c>
			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0) {
 8001ba8:	e45d      	b.n	8001466 <main+0xae>
 8001baa:	bf00      	nop
 8001bac:	20000010 	.word	0x20000010
 8001bb0:	08009920 	.word	0x08009920
 8001bb4:	200003ac 	.word	0x200003ac
 8001bb8:	08009924 	.word	0x08009924
 8001bbc:	0800991c 	.word	0x0800991c
 8001bc0:	20000424 	.word	0x20000424

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	; 0x50
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	2230      	movs	r2, #48	; 0x30
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fd8a 	bl	80066ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <SystemClock_Config+0xcc>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <SystemClock_Config+0xcc>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <SystemClock_Config+0xcc>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <SystemClock_Config+0xd0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <SystemClock_Config+0xd0>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <SystemClock_Config+0xd0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c34:	2308      	movs	r3, #8
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c38:	23a8      	movs	r3, #168	; 0xa8
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c40:	2304      	movs	r3, #4
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fead 	bl	80039a8 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c54:	f000 fb1a 	bl	800228c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	230f      	movs	r3, #15
 8001c5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2105      	movs	r1, #5
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f90e 	bl	8003e98 <HAL_RCC_ClockConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c82:	f000 fb03 	bl	800228c <Error_Handler>
  }
}
 8001c86:	bf00      	nop
 8001c88:	3750      	adds	r7, #80	; 0x50
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000

08001c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001c9e:	4a13      	ldr	r2, [pc, #76]	; (8001cec <MX_I2C1_Init+0x54>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <MX_I2C1_Init+0x58>)
 8001ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_I2C1_Init+0x50>)
 8001cd6:	f001 fa1b 	bl	8003110 <HAL_I2C_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ce0:	f000 fad4 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000280 	.word	0x20000280
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	000186a0 	.word	0x000186a0

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b096      	sub	sp, #88	; 0x58
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2220      	movs	r2, #32
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fcdd 	bl	80066ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d34:	4a3e      	ldr	r2, [pc, #248]	; (8001e30 <MX_TIM1_Init+0x13c>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d38:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d44:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d52:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d5e:	4833      	ldr	r0, [pc, #204]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d60:	f002 fa7a 	bl	8004258 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d6a:	f000 fa8f 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d78:	4619      	mov	r1, r3
 8001d7a:	482c      	ldr	r0, [pc, #176]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d7c:	f002 fef0 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d86:	f000 fa81 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d8a:	4828      	ldr	r0, [pc, #160]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001d8c:	f002 fab3 	bl	80042f6 <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d96:	f000 fa79 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da6:	4619      	mov	r1, r3
 8001da8:	4820      	ldr	r0, [pc, #128]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001daa:	f003 fad9 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001db4:	f000 fa6a 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4813      	ldr	r0, [pc, #76]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001dde:	f002 fdfd 	bl	80049dc <HAL_TIM_PWM_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001de8:	f000 fa50 	bl	800228c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001e10:	f003 fb22 	bl	8005458 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001e1a:	f000 fa37 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <MX_TIM1_Init+0x138>)
 8001e20:	f000 fb52 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 8001e24:	bf00      	nop
 8001e26:	3758      	adds	r7, #88	; 0x58
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200002d4 	.word	0x200002d4
 8001e30:	40010000 	.word	0x40010000

08001e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 fc52 	bl	80066ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001e66:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e80:	2301      	movs	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e90:	2301      	movs	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001ea4:	f002 fb3e 	bl	8004524 <HAL_TIM_Encoder_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eae:	f000 f9ed 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <MX_TIM2_Init+0xa4>)
 8001ec0:	f003 fa4e 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001eca:	f000 f9df 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	; 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000031c 	.word	0x2000031c

08001edc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08e      	sub	sp, #56	; 0x38
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	f107 0320 	add.w	r3, r7, #32
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f0c:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f0e:	4a2d      	ldr	r2, [pc, #180]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f14:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001f18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f22:	2263      	movs	r2, #99	; 0x63
 8001f24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f32:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f34:	f002 f990 	bl	8004258 <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f3e:	f000 f9a5 	bl	800228c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f50:	f002 fe06 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f5a:	f000 f997 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f5e:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f60:	f002 f9c9 	bl	80042f6 <HAL_TIM_PWM_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f6a:	f000 f98f 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001f7e:	f003 f9ef 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f88:	f000 f980 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8c:	2360      	movs	r3, #96	; 0x60
 8001f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001fa4:	f002 fd1a 	bl	80049dc <HAL_TIM_PWM_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001fae:	f000 f96d 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM4_Init+0xe4>)
 8001fb4:	f000 fa88 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 8001fb8:	bf00      	nop
 8001fba:	3738      	adds	r7, #56	; 0x38
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000364 	.word	0x20000364
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <MX_USART1_UART_Init+0x50>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USART1_UART_Init+0x4c>)
 8002000:	f003 fa90 	bl	8005524 <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800200a:	f000 f93f 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200003ac 	.word	0x200003ac
 8002018:	40011000 	.word	0x40011000

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <MX_GPIO_Init+0x148>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <MX_GPIO_Init+0x148>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b48      	ldr	r3, [pc, #288]	; (8002164 <MX_GPIO_Init+0x148>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b44      	ldr	r3, [pc, #272]	; (8002164 <MX_GPIO_Init+0x148>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a43      	ldr	r2, [pc, #268]	; (8002164 <MX_GPIO_Init+0x148>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <MX_GPIO_Init+0x148>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <MX_GPIO_Init+0x148>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <MX_GPIO_Init+0x148>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <MX_GPIO_Init+0x148>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <MX_GPIO_Init+0x148>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a35      	ldr	r2, [pc, #212]	; (8002164 <MX_GPIO_Init+0x148>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <MX_GPIO_Init+0x148>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <MX_GPIO_Init+0x148>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a2e      	ldr	r2, [pc, #184]	; (8002164 <MX_GPIO_Init+0x148>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <MX_GPIO_Init+0x148>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <MX_GPIO_Init+0x148>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a27      	ldr	r2, [pc, #156]	; (8002164 <MX_GPIO_Init+0x148>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <MX_GPIO_Init+0x148>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	21c0      	movs	r1, #192	; 0xc0
 80020de:	4822      	ldr	r0, [pc, #136]	; (8002168 <MX_GPIO_Init+0x14c>)
 80020e0:	f000 fffc 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor_dir_2_Pin|motor_dir_1_Pin, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80020ea:	4820      	ldr	r0, [pc, #128]	; (800216c <MX_GPIO_Init+0x150>)
 80020ec:	f000 fff6 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020f0:	2310      	movs	r3, #16
 80020f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	481b      	ldr	r0, [pc, #108]	; (8002170 <MX_GPIO_Init+0x154>)
 8002104:	f000 fe36 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	4812      	ldr	r0, [pc, #72]	; (8002168 <MX_GPIO_Init+0x14c>)
 8002120:	f000 fe28 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_dir_2_Pin motor_dir_1_Pin */
  GPIO_InitStruct.Pin = motor_dir_2_Pin|motor_dir_1_Pin;
 8002124:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <MX_GPIO_Init+0x150>)
 800213e:	f000 fe19 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002142:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <MX_GPIO_Init+0x158>)
 8002158:	f000 fe0c 	bl	8002d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40020800 	.word	0x40020800

08002178 <Motor_Control>:

/* USER CODE BEGIN 4 */
static void Motor_Control(int32_t motorSpeed){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

	if (motorSpeed > 0){
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	dd0c      	ble.n	80021a0 <Motor_Control+0x28>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218c:	4810      	ldr	r0, [pc, #64]	; (80021d0 <Motor_Control+0x58>)
 800218e:	f000 ffa5 	bl	80030dc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <Motor_Control+0x58>)
 800219a:	f000 ff9f 	bl	80030dc <HAL_GPIO_WritePin>
 800219e:	e00e      	b.n	80021be <Motor_Control+0x46>
	} else {
		motorSpeed = -motorSpeed;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	425b      	negs	r3, r3
 80021a4:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ac:	4808      	ldr	r0, [pc, #32]	; (80021d0 <Motor_Control+0x58>)
 80021ae:	f000 ff95 	bl	80030dc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <Motor_Control+0x58>)
 80021ba:	f000 ff8f 	bl	80030dc <HAL_GPIO_WritePin>
	}
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,motorSpeed);
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <Motor_Control+0x5c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	20000364 	.word	0x20000364

080021d8 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	f107 0320 	add.w	r3, r7, #32
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <MX_TIM3_Init+0xac>)
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <MX_TIM3_Init+0xb0>)
 80021fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <MX_TIM3_Init+0xac>)
 8002202:	2253      	movs	r2, #83	; 0x53
 8002204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <MX_TIM3_Init+0xac>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_TIM3_Init+0xac>)
 800220e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_TIM3_Init+0xac>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_TIM3_Init+0xac>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002220:	4818      	ldr	r0, [pc, #96]	; (8002284 <MX_TIM3_Init+0xac>)
 8002222:	f002 f868 	bl	80042f6 <HAL_TIM_PWM_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800222c:	f000 f82e 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4619      	mov	r1, r3
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <MX_TIM3_Init+0xac>)
 8002240:	f003 f88e 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800224a:	f000 f81f 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224e:	2360      	movs	r3, #96	; 0x60
 8002250:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2208      	movs	r2, #8
 8002262:	4619      	mov	r1, r3
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <MX_TIM3_Init+0xac>)
 8002266:	f002 fbb9 	bl	80049dc <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002270:	f000 f80c 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_TIM3_Init+0xac>)
 8002276:	f000 f927 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000238 	.word	0x20000238
 8002288:	40000400 	.word	0x40000400

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	e7fe      	b.n	8002294 <Error_Handler+0x8>
	...

08002298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_MspInit+0x4c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_MspInit+0x4c>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_MspInit+0x4c>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_MspInit+0x4c>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_MspInit+0x4c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_I2C_MspInit+0x84>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12b      	bne.n	8002362 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_I2C_MspInit+0x88>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_I2C_MspInit+0x88>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_I2C_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232a:	2312      	movs	r3, #18
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002336:	2304      	movs	r3, #4
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <HAL_I2C_MspInit+0x8c>)
 8002342:	f000 fd17 	bl	8002d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_I2C_MspInit+0x88>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_I2C_MspInit+0x88>)
 8002350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_I2C_MspInit+0x88>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40005400 	.word	0x40005400
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400

08002378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <HAL_TIM_Base_MspInit+0x64>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_TIM_Base_MspInit+0x68>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <HAL_TIM_Base_MspInit+0x68>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_TIM_Base_MspInit+0x68>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023a6:	e012      	b.n	80023ce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_TIM_Base_MspInit+0x6c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_TIM_Base_MspInit+0x68>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_TIM_Base_MspInit+0x68>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_TIM_Base_MspInit+0x68>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40000800 	.word	0x40000800

080023e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d133      	bne.n	8002472 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_TIM_Encoder_MspInit+0x94>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a1a      	ldr	r2, [pc, #104]	; (800247c <HAL_TIM_Encoder_MspInit+0x94>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_TIM_Encoder_MspInit+0x94>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_TIM_Encoder_MspInit+0x94>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a13      	ldr	r2, [pc, #76]	; (800247c <HAL_TIM_Encoder_MspInit+0x94>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_TIM_Encoder_MspInit+0x94>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002442:	2303      	movs	r3, #3
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002452:	2301      	movs	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4808      	ldr	r0, [pc, #32]	; (8002480 <HAL_TIM_Encoder_MspInit+0x98>)
 800245e:	f000 fc89 	bl	8002d74 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	201c      	movs	r0, #28
 8002468:	f000 fbbb 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800246c:	201c      	movs	r0, #28
 800246e:	f000 fbd4 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000

08002484 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10d      	bne.n	80024b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_TIM_PWM_MspInit+0x40>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_TIM_PWM_MspInit+0x40>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_TIM_PWM_MspInit+0x40>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <HAL_TIM_MspPostInit+0xfc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d11f      	bne.n	800252a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_pwm_Pin;
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_pwm_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	482a      	ldr	r0, [pc, #168]	; (80025cc <HAL_TIM_MspPostInit+0x104>)
 8002524:	f000 fc26 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002528:	e048      	b.n	80025bc <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a28      	ldr	r2, [pc, #160]	; (80025d0 <HAL_TIM_MspPostInit+0x108>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d11f      	bne.n	8002574 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002562:	2302      	movs	r3, #2
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4819      	ldr	r0, [pc, #100]	; (80025d4 <HAL_TIM_MspPostInit+0x10c>)
 800256e:	f000 fc01 	bl	8002d74 <HAL_GPIO_Init>
}
 8002572:	e023      	b.n	80025bc <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_TIM_MspPostInit+0x110>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d11e      	bne.n	80025bc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 8002588:	f043 0308 	orr.w	r3, r3, #8
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_TIM_MspPostInit+0x100>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor_pwm_Pin;
 800259a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025ac:	2302      	movs	r3, #2
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor_pwm_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	4809      	ldr	r0, [pc, #36]	; (80025dc <HAL_TIM_MspPostInit+0x114>)
 80025b8:	f000 fbdc 	bl	8002d74 <HAL_GPIO_Init>
}
 80025bc:	bf00      	nop
 80025be:	3728      	adds	r7, #40	; 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40000800 	.word	0x40000800
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <HAL_UART_MspInit+0x94>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d134      	bne.n	800266c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_UART_MspInit+0x98>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <HAL_UART_MspInit+0x98>)
 800260c:	f043 0310 	orr.w	r3, r3, #16
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_UART_MspInit+0x98>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_UART_MspInit+0x98>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_UART_MspInit+0x98>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_UART_MspInit+0x98>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800263a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800264c:	2307      	movs	r3, #7
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4809      	ldr	r0, [pc, #36]	; (800267c <HAL_UART_MspInit+0x9c>)
 8002658:	f000 fb8c 	bl	8002d74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2025      	movs	r0, #37	; 0x25
 8002662:	f000 fabe 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002666:	2025      	movs	r0, #37	; 0x25
 8002668:	f000 fad7 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40011000 	.word	0x40011000
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <NMI_Handler+0x4>

08002686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <MemManage_Handler+0x4>

08002692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <UsageFault_Handler+0x4>

0800269e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026cc:	f000 f96a 	bl	80029a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <TIM2_IRQHandler+0x10>)
 80026da:	f002 f877 	bl	80047cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000031c 	.word	0x2000031c

080026e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <USART1_IRQHandler+0x10>)
 80026ee:	f003 f89b 	bl	8005828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200003ac 	.word	0x200003ac

080026fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_kill>:

int _kill(int pid, int sig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002716:	f003 ffbf 	bl	8006698 <__errno>
 800271a:	4603      	mov	r3, r0
 800271c:	2216      	movs	r2, #22
 800271e:	601a      	str	r2, [r3, #0]
  return -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_exit>:

void _exit (int status)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ffe7 	bl	800270c <_kill>
  while (1) {}    /* Make sure we hang here */
 800273e:	e7fe      	b.n	800273e <_exit+0x12>

08002740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	e00a      	b.n	8002768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002752:	f3af 8000 	nop.w
 8002756:	4601      	mov	r1, r0
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	60ba      	str	r2, [r7, #8]
 800275e:	b2ca      	uxtb	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	dbf0      	blt.n	8002752 <_read+0x12>
  }

  return len;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e009      	b.n	80027a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	60ba      	str	r2, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dbf1      	blt.n	800278c <_write+0x12>
  }
  return len;
 80027a8:	687b      	ldr	r3, [r7, #4]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_close>:

int _close(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027da:	605a      	str	r2, [r3, #4]
  return 0;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_isatty>:

int _isatty(int file)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <_sbrk+0x5c>)
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <_sbrk+0x60>)
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <_sbrk+0x64>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <_sbrk+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d207      	bcs.n	800285c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800284c:	f003 ff24 	bl	8006698 <__errno>
 8002850:	4603      	mov	r3, r0
 8002852:	220c      	movs	r2, #12
 8002854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e009      	b.n	8002870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <_sbrk+0x64>)
 800286c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20020000 	.word	0x20020000
 800287c:	00000400 	.word	0x00000400
 8002880:	20000430 	.word	0x20000430
 8002884:	20000448 	.word	0x20000448

08002888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <SystemInit+0x20>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <SystemInit+0x20>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028c8:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d6:	f7ff ffd7 	bl	8002888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028da:	f003 fee3 	bl	80066a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028de:	f7fe fd6b 	bl	80013b8 <main>
  bx  lr    
 80028e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80028f0:	08009de0 	.word	0x08009de0
  ldr r2, =_sbss
 80028f4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80028f8:	20000448 	.word	0x20000448

080028fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC_IRQHandler>
	...

08002900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_Init+0x40>)
 800290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_Init+0x40>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_Init+0x40>)
 8002916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_Init+0x40>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_Init+0x40>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002928:	2003      	movs	r0, #3
 800292a:	f000 f94f 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292e:	200f      	movs	r0, #15
 8002930:	f000 f808 	bl	8002944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002934:	f7ff fcb0 	bl	8002298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00

08002944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x54>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_InitTick+0x58>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	fbb3 f3f1 	udiv	r3, r3, r1
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f967 	bl	8002c36 <HAL_SYSTICK_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e00e      	b.n	8002990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b0f      	cmp	r3, #15
 8002976:	d80a      	bhi.n	800298e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	2200      	movs	r2, #0
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 f92f 	bl	8002be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <HAL_InitTick+0x5c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000014 	.word	0x20000014
 800299c:	2000001c 	.word	0x2000001c
 80029a0:	20000018 	.word	0x20000018

080029a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x20>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_IncTick+0x24>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_IncTick+0x24>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000001c 	.word	0x2000001c
 80029c8:	20000434 	.word	0x20000434

080029cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return uwTick;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_GetTick+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000434 	.word	0x20000434

080029e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff ffee 	bl	80029cc <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d005      	beq.n	8002a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_Delay+0x44>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0a:	bf00      	nop
 8002a0c:	f7ff ffde 	bl	80029cc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d8f7      	bhi.n	8002a0c <HAL_Delay+0x28>
  {
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000001c 	.word	0x2000001c

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff8e 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff29 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff3e 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff8e 	bl	8002b20 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5d 	bl	8002acc <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff31 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa2 	bl	8002b88 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff feb6 	bl	80029cc <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d008      	beq.n	8002c80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e052      	b.n	8002d26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0216 	bic.w	r2, r2, #22
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d103      	bne.n	8002cb0 <HAL_DMA_Abort+0x62>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0208 	bic.w	r2, r2, #8
 8002cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd0:	e013      	b.n	8002cfa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd2:	f7ff fe7b 	bl	80029cc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d90c      	bls.n	8002cfa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e015      	b.n	8002d26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e4      	bne.n	8002cd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	223f      	movs	r2, #63	; 0x3f
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d004      	beq.n	8002d4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e00c      	b.n	8002d66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2205      	movs	r2, #5
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e16b      	b.n	8003068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 815a 	bne.w	8003062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80b4 	beq.w	8003062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b60      	ldr	r3, [pc, #384]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a5f      	ldr	r2, [pc, #380]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_GPIO_Init+0x310>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_GPIO_Init+0x314>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_Init+0x318>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_Init+0x31c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_GPIO_Init+0x320>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <HAL_GPIO_Init+0x324>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x216>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4d      	ldr	r2, [pc, #308]	; (800309c <HAL_GPIO_Init+0x328>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x212>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_GPIO_Init+0x32c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x20e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4b      	ldr	r2, [pc, #300]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x20a>
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e00e      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f82:	2306      	movs	r3, #6
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x310>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003032:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f ae90 	bls.w	8002d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40013800 	.word	0x40013800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40021000 	.word	0x40021000
 800309c:	40021400 	.word	0x40021400
 80030a0:	40021800 	.word	0x40021800
 80030a4:	40021c00 	.word	0x40021c00
 80030a8:	40013c00 	.word	0x40013c00

080030ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e001      	b.n	80030ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f8:	e003      	b.n	8003102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	619a      	str	r2, [r3, #24]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e12b      	b.n	800337a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff f8d6 	bl	80022e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003174:	f001 f848 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a81      	ldr	r2, [pc, #516]	; (8003384 <HAL_I2C_Init+0x274>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d807      	bhi.n	8003194 <HAL_I2C_Init+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a80      	ldr	r2, [pc, #512]	; (8003388 <HAL_I2C_Init+0x278>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e006      	b.n	80031a2 <HAL_I2C_Init+0x92>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a7d      	ldr	r2, [pc, #500]	; (800338c <HAL_I2C_Init+0x27c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0e7      	b.n	800337a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a78      	ldr	r2, [pc, #480]	; (8003390 <HAL_I2C_Init+0x280>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_I2C_Init+0x274>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d802      	bhi.n	80031e4 <HAL_I2C_Init+0xd4>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3301      	adds	r3, #1
 80031e2:	e009      	b.n	80031f8 <HAL_I2C_Init+0xe8>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_I2C_Init+0x284>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3301      	adds	r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800320a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	495c      	ldr	r1, [pc, #368]	; (8003384 <HAL_I2C_Init+0x274>)
 8003214:	428b      	cmp	r3, r1
 8003216:	d819      	bhi.n	800324c <HAL_I2C_Init+0x13c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fbb1 f3f3 	udiv	r3, r1, r3
 8003226:	1c59      	adds	r1, r3, #1
 8003228:	f640 73fc 	movw	r3, #4092	; 0xffc
 800322c:	400b      	ands	r3, r1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_I2C_Init+0x138>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e59      	subs	r1, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	e051      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 8003248:	2304      	movs	r3, #4
 800324a:	e04f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <HAL_I2C_Init+0x168>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e012      	b.n	800329e <HAL_I2C_Init+0x18e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e58      	subs	r0, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Init+0x196>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e022      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <HAL_I2C_Init+0x1bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e58      	subs	r0, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	440b      	add	r3, r1
 80032bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	6809      	ldr	r1, [r1, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800331a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6911      	ldr	r1, [r2, #16]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	000186a0 	.word	0x000186a0
 8003388:	001e847f 	.word	0x001e847f
 800338c:	003d08ff 	.word	0x003d08ff
 8003390:	431bde83 	.word	0x431bde83
 8003394:	10624dd3 	.word	0x10624dd3

08003398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	461a      	mov	r2, r3
 80033a4:	460b      	mov	r3, r1
 80033a6:	817b      	strh	r3, [r7, #10]
 80033a8:	4613      	mov	r3, r2
 80033aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff fb0e 	bl	80029cc <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f040 80e0 	bne.w	8003580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	4970      	ldr	r1, [pc, #448]	; (800358c <HAL_I2C_Master_Transmit+0x1f4>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f964 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e0d3      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2C_Master_Transmit+0x50>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0cc      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d007      	beq.n	800340e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2210      	movs	r2, #16
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	893a      	ldrh	r2, [r7, #8]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a50      	ldr	r2, [pc, #320]	; (8003590 <HAL_I2C_Master_Transmit+0x1f8>)
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f89c 	bl	8003594 <I2C_MasterRequestWrite>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e08d      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800347c:	e066      	b.n	800354c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6a39      	ldr	r1, [r7, #32]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f9de 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b04      	cmp	r3, #4
 8003494:	d107      	bne.n	80034a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06b      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11b      	bne.n	8003520 <HAL_I2C_Master_Transmit+0x188>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d017      	beq.n	8003520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	6a39      	ldr	r1, [r7, #32]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f9ce 	bl	80038c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e01a      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d194      	bne.n	800347e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00100002 	.word	0x00100002
 8003590:	ffff0000 	.word	0xffff0000

08003594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	460b      	mov	r3, r1
 80035a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d006      	beq.n	80035be <I2C_MasterRequestWrite+0x2a>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d003      	beq.n	80035be <I2C_MasterRequestWrite+0x2a>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035bc:	d108      	bne.n	80035d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e00b      	b.n	80035e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	2b12      	cmp	r3, #18
 80035d6:	d107      	bne.n	80035e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f84f 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d103      	bne.n	8003618 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e035      	b.n	8003688 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003624:	d108      	bne.n	8003638 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e01b      	b.n	8003670 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	11db      	asrs	r3, r3, #7
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0306 	and.w	r3, r3, #6
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f063 030f 	orn	r3, r3, #15
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	490e      	ldr	r1, [pc, #56]	; (8003690 <I2C_MasterRequestWrite+0xfc>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f875 	bl	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e010      	b.n	8003688 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <I2C_MasterRequestWrite+0x100>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f865 	bl	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	00010008 	.word	0x00010008
 8003694:	00010002 	.word	0x00010002

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e025      	b.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d021      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7ff f98b 	bl	80029cc <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e023      	b.n	800373e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10d      	bne.n	800371c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	e00c      	b.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d0b6      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003754:	e051      	b.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d123      	bne.n	80037ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003774:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800377e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0204 	orr.w	r2, r3, #4
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e046      	b.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d021      	beq.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7ff f909 	bl	80029cc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e020      	b.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10c      	bne.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4013      	ands	r3, r2
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e00b      	b.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	43da      	mvns	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d18d      	bne.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003850:	e02d      	b.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f878 	bl	8003948 <I2C_IsAcknowledgeFailed>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e02d      	b.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d021      	beq.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7ff f8af 	bl	80029cc <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d116      	bne.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e007      	b.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d1ca      	bne.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d2:	e02d      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f837 	bl	8003948 <I2C_IsAcknowledgeFailed>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e02d      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d021      	beq.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ec:	f7ff f86e 	bl	80029cc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e007      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d1ca      	bne.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d11b      	bne.n	8003998 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003968:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e267      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d075      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c6:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00c      	beq.n	80039ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d112      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b82      	ldr	r3, [pc, #520]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	4b7e      	ldr	r3, [pc, #504]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05b      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x108>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d157      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e242      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x74>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e01d      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x98>
 8003a26:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6f      	ldr	r2, [pc, #444]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6c      	ldr	r2, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a40:	4b69      	ldr	r3, [pc, #420]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a68      	ldr	r2, [pc, #416]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe ffb4 	bl	80029cc <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe ffb0 	bl	80029cc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e207      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0xc0>
 8003a86:	e014      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe ffa0 	bl	80029cc <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe ff9c 	bl	80029cc <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1f3      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0xe8>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d063      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d11c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b44      	ldr	r3, [pc, #272]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1c7      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	4b3b      	ldr	r3, [pc, #236]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4937      	ldr	r1, [pc, #220]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	e03a      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_RCC_OscConfig+0x244>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe ff55 	bl	80029cc <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe ff51 	bl	80029cc <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e1a8      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4925      	ldr	r1, [pc, #148]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCC_OscConfig+0x244>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe ff34 	bl	80029cc <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b68:	f7fe ff30 	bl	80029cc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e187      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d036      	beq.n	8003c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_RCC_OscConfig+0x248>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe ff14 	bl	80029cc <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe ff10 	bl	80029cc <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e167      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x200>
 8003bc6:	e01b      	b.n	8003c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x248>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bce:	f7fe fefd 	bl	80029cc <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e00e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fef9 	bl	80029cc <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d907      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e150      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	42470000 	.word	0x42470000
 8003bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ea      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8097 	beq.w	8003d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b7d      	ldr	r3, [pc, #500]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	4a7c      	ldr	r2, [pc, #496]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d118      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4a:	4b74      	ldr	r3, [pc, #464]	; (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a73      	ldr	r2, [pc, #460]	; (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fe feb9 	bl	80029cc <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe feb5 	bl	80029cc <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e10c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	4b6a      	ldr	r3, [pc, #424]	; (8003e1c <HAL_RCC_OscConfig+0x474>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x2ea>
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c90:	e01c      	b.n	8003ccc <HAL_RCC_OscConfig+0x324>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x30c>
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a5e      	ldr	r2, [pc, #376]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0x324>
 8003cb4:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a57      	ldr	r2, [pc, #348]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a54      	ldr	r2, [pc, #336]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 0304 	bic.w	r3, r3, #4
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe fe7a 	bl	80029cc <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fe76 	bl	80029cc <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0cb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf2:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ee      	beq.n	8003cdc <HAL_RCC_OscConfig+0x334>
 8003cfe:	e014      	b.n	8003d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fe fe64 	bl	80029cc <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe fe60 	bl	80029cc <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0b5      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1e:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ee      	bne.n	8003d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a1 	beq.w	8003e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d05c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d141      	bne.n	8003dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe fe34 	bl	80029cc <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe fe30 	bl	80029cc <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e087      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	491b      	ldr	r1, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe fe09 	bl	80029cc <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe fe05 	bl	80029cc <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e05c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x416>
 8003ddc:	e054      	b.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fdf2 	bl	80029cc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fdee 	bl	80029cc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e045      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x444>
 8003e0a:	e03d      	b.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e038      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <HAL_RCC_OscConfig+0x4ec>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d028      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d121      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0cc      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b68      	ldr	r3, [pc, #416]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d90c      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b63      	ldr	r3, [pc, #396]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b8      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a52      	ldr	r2, [pc, #328]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	494d      	ldr	r1, [pc, #308]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d044      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d119      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e06f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e067      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4934      	ldr	r1, [pc, #208]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fe fd20 	bl	80029cc <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe fd1c 	bl	80029cc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e04f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d20c      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e032      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4916      	ldr	r1, [pc, #88]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	490e      	ldr	r1, [pc, #56]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401e:	f000 f821 	bl	8004064 <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490a      	ldr	r1, [pc, #40]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fc80 	bl	8002944 <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00
 8004054:	40023800 	.word	0x40023800
 8004058:	0800992c 	.word	0x0800992c
 800405c:	20000014 	.word	0x20000014
 8004060:	20000018 	.word	0x20000018

08004064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004068:	b090      	sub	sp, #64	; 0x40
 800406a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
 8004070:	2300      	movs	r3, #0
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004074:	2300      	movs	r3, #0
 8004076:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800407c:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d00d      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004088:	2b08      	cmp	r3, #8
 800408a:	f200 80a1 	bhi.w	80041d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x34>
 8004092:	2b04      	cmp	r3, #4
 8004094:	d003      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x3a>
 8004096:	e09b      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800409c:	e09b      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409e:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_RCC_GetSysClockFreq+0x188>)
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040a2:	e098      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ae:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d028      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	099b      	lsrs	r3, r3, #6
 80040c0:	2200      	movs	r2, #0
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	627a      	str	r2, [r7, #36]	; 0x24
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040cc:	2100      	movs	r1, #0
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_GetSysClockFreq+0x188>)
 80040d0:	fb03 f201 	mul.w	r2, r3, r1
 80040d4:	2300      	movs	r3, #0
 80040d6:	fb00 f303 	mul.w	r3, r0, r3
 80040da:	4413      	add	r3, r2
 80040dc:	4a43      	ldr	r2, [pc, #268]	; (80041ec <HAL_RCC_GetSysClockFreq+0x188>)
 80040de:	fba0 1202 	umull	r1, r2, r0, r2
 80040e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e4:	460a      	mov	r2, r1
 80040e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80040e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ea:	4413      	add	r3, r2
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	2200      	movs	r2, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	61fa      	str	r2, [r7, #28]
 80040f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040fe:	f7fc fd95 	bl	8000c2c <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4613      	mov	r3, r2
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800410a:	e053      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	2200      	movs	r2, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	617a      	str	r2, [r7, #20]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800411e:	f04f 0b00 	mov.w	fp, #0
 8004122:	4652      	mov	r2, sl
 8004124:	465b      	mov	r3, fp
 8004126:	f04f 0000 	mov.w	r0, #0
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	0159      	lsls	r1, r3, #5
 8004130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004134:	0150      	lsls	r0, r2, #5
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	ebb2 080a 	subs.w	r8, r2, sl
 800413e:	eb63 090b 	sbc.w	r9, r3, fp
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800414e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004152:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004156:	ebb2 0408 	subs.w	r4, r2, r8
 800415a:	eb63 0509 	sbc.w	r5, r3, r9
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	00eb      	lsls	r3, r5, #3
 8004168:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416c:	00e2      	lsls	r2, r4, #3
 800416e:	4614      	mov	r4, r2
 8004170:	461d      	mov	r5, r3
 8004172:	eb14 030a 	adds.w	r3, r4, sl
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	eb45 030b 	adc.w	r3, r5, fp
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418a:	4629      	mov	r1, r5
 800418c:	028b      	lsls	r3, r1, #10
 800418e:	4621      	mov	r1, r4
 8004190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004194:	4621      	mov	r1, r4
 8004196:	028a      	lsls	r2, r1, #10
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	2200      	movs	r2, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a8:	f7fc fd40 	bl	8000c2c <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ce:	e002      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3740      	adds	r7, #64	; 0x40
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	017d7840 	.word	0x017d7840

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000014 	.word	0x20000014

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800420c:	f7ff fff0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	0800993c 	.word	0x0800993c

08004230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004234:	f7ff ffdc 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0b5b      	lsrs	r3, r3, #13
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40023800 	.word	0x40023800
 8004254:	0800993c 	.word	0x0800993c

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e041      	b.n	80042ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe f87a 	bl	8002378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fd52 	bl	8004d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e041      	b.n	800438c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fe f8b1 	bl	8002484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 fd03 	bl	8004d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x24>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e022      	b.n	80043fe <HAL_TIM_PWM_Start+0x6a>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d109      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x3e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	bf14      	ite	ne
 80043ca:	2301      	movne	r3, #1
 80043cc:	2300      	moveq	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e015      	b.n	80043fe <HAL_TIM_PWM_Start+0x6a>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x58>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e008      	b.n	80043fe <HAL_TIM_PWM_Start+0x6a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e07c      	b.n	8004500 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0x82>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004414:	e013      	b.n	800443e <HAL_TIM_PWM_Start+0xaa>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0x92>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004424:	e00b      	b.n	800443e <HAL_TIM_PWM_Start+0xaa>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0xa2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004434:	e003      	b.n	800443e <HAL_TIM_PWM_Start+0xaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2201      	movs	r2, #1
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ff64 	bl	8005314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_TIM_PWM_Start+0x174>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_PWM_Start+0xcc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2c      	ldr	r2, [pc, #176]	; (800450c <HAL_TIM_PWM_Start+0x178>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_TIM_PWM_Start+0xd0>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_TIM_PWM_Start+0xd2>
 8004464:	2300      	movs	r3, #0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_TIM_PWM_Start+0x174>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d01d      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <HAL_TIM_PWM_Start+0x17c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d018      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_TIM_PWM_Start+0x180>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_TIM_PWM_Start+0x184>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a16      	ldr	r2, [pc, #88]	; (800450c <HAL_TIM_PWM_Start+0x178>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_TIM_PWM_Start+0x188>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIM_PWM_Start+0x136>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_TIM_PWM_Start+0x18c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d111      	bne.n	80044ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d010      	beq.n	80044fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ec:	e007      	b.n	80044fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40010000 	.word	0x40010000
 800450c:	40010400 	.word	0x40010400
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40014000 	.word	0x40014000
 8004520:	40001800 	.word	0x40001800

08004524 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e097      	b.n	8004668 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fd ff4b 	bl	80023e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 fbe1 	bl	8004d40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	4313      	orrs	r3, r2
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045c4:	f023 030c 	bic.w	r3, r3, #12
 80045c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	4313      	orrs	r3, r2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	011a      	lsls	r2, r3, #4
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	031b      	lsls	r3, r3, #12
 80045f4:	4313      	orrs	r3, r2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	4313      	orrs	r3, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004698:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d102      	bne.n	80046ac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a6:	7b7b      	ldrb	r3, [r7, #13]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e089      	b.n	80047c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	e031      	b.n	8004726 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d110      	bne.n	80046ea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c8:	7bbb      	ldrb	r3, [r7, #14]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d102      	bne.n	80046d4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ce:	7b3b      	ldrb	r3, [r7, #12]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e075      	b.n	80047c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046e8:	e01d      	b.n	8004726 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d108      	bne.n	8004702 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046f6:	7b7b      	ldrb	r3, [r7, #13]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d102      	bne.n	8004702 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046fc:	7b3b      	ldrb	r3, [r7, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e05e      	b.n	80047c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_TIM_Encoder_Start_IT+0xc4>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b04      	cmp	r3, #4
 8004730:	d010      	beq.n	8004754 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004732:	e01f      	b.n	8004774 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fde9 	bl	8005314 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0202 	orr.w	r2, r2, #2
 8004750:	60da      	str	r2, [r3, #12]
      break;
 8004752:	e02e      	b.n	80047b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	2104      	movs	r1, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fdd9 	bl	8005314 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0204 	orr.w	r2, r2, #4
 8004770:	60da      	str	r2, [r3, #12]
      break;
 8004772:	e01e      	b.n	80047b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fdc9 	bl	8005314 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2201      	movs	r2, #1
 8004788:	2104      	movs	r1, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fdc2 	bl	8005314 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0202 	orr.w	r2, r2, #2
 800479e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0204 	orr.w	r2, r2, #4
 80047ae:	60da      	str	r2, [r3, #12]
      break;
 80047b0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d11b      	bne.n	8004828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0202 	mvn.w	r2, #2
 80047f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fdbe 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa73 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fa7a 	bl	8004d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b04      	cmp	r3, #4
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0204 	mvn.w	r2, #4
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc fd94 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa49 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa50 	bl	8004d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b08      	cmp	r3, #8
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b08      	cmp	r3, #8
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0208 	mvn.w	r2, #8
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2204      	movs	r2, #4
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fd6a 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa1f 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa26 	bl	8004d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d122      	bne.n	8004924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d11b      	bne.n	8004924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0210 	mvn.w	r2, #16
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2208      	movs	r2, #8
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fd40 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9f5 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f9fc 	bl	8004d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10e      	bne.n	8004950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0201 	mvn.w	r2, #1
 8004948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9cf 	bl	8004cee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d10e      	bne.n	800497c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d107      	bne.n	800497c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fdca 	bl	8005510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d10e      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9c1 	bl	8004d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d10e      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d107      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0220 	mvn.w	r2, #32
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fd94 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e0ae      	b.n	8004b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	f200 809f 	bhi.w	8004b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a45 	.word	0x08004a45
 8004a14:	08004b49 	.word	0x08004b49
 8004a18:	08004b49 	.word	0x08004b49
 8004a1c:	08004b49 	.word	0x08004b49
 8004a20:	08004a85 	.word	0x08004a85
 8004a24:	08004b49 	.word	0x08004b49
 8004a28:	08004b49 	.word	0x08004b49
 8004a2c:	08004b49 	.word	0x08004b49
 8004a30:	08004ac7 	.word	0x08004ac7
 8004a34:	08004b49 	.word	0x08004b49
 8004a38:	08004b49 	.word	0x08004b49
 8004a3c:	08004b49 	.word	0x08004b49
 8004a40:	08004b07 	.word	0x08004b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fa18 	bl	8004e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0204 	bic.w	r2, r2, #4
 8004a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6999      	ldr	r1, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	619a      	str	r2, [r3, #24]
      break;
 8004a82:	e064      	b.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fa68 	bl	8004f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6999      	ldr	r1, [r3, #24]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	021a      	lsls	r2, r3, #8
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	619a      	str	r2, [r3, #24]
      break;
 8004ac4:	e043      	b.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fabd 	bl	800504c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0208 	orr.w	r2, r2, #8
 8004ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0204 	bic.w	r2, r2, #4
 8004af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69d9      	ldr	r1, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	61da      	str	r2, [r3, #28]
      break;
 8004b04:	e023      	b.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fb11 	bl	8005134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69d9      	ldr	r1, [r3, #28]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	021a      	lsls	r2, r3, #8
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	61da      	str	r2, [r3, #28]
      break;
 8004b46:	e002      	b.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIM_ConfigClockSource+0x1c>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0b4      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x186>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d03e      	beq.n	8004c34 <HAL_TIM_ConfigClockSource+0xd4>
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	f200 8087 	bhi.w	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	f000 8086 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x172>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	d87f      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d01a      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xa6>
 8004bd0:	2b70      	cmp	r3, #112	; 0x70
 8004bd2:	d87b      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d050      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x11a>
 8004bd8:	2b60      	cmp	r3, #96	; 0x60
 8004bda:	d877      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d03c      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0xfa>
 8004be0:	2b50      	cmp	r3, #80	; 0x50
 8004be2:	d873      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d058      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x13a>
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d86f      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d064      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x15a>
 8004bf0:	2b30      	cmp	r3, #48	; 0x30
 8004bf2:	d86b      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d060      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d867      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d05c      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d05a      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x15a>
 8004c04:	e062      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f000 fb5d 	bl	80052d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	609a      	str	r2, [r3, #8]
      break;
 8004c32:	e04f      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f000 fb46 	bl	80052d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c56:	609a      	str	r2, [r3, #8]
      break;
 8004c58:	e03c      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 faba 	bl	80051e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2150      	movs	r1, #80	; 0x50
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fb13 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004c78:	e02c      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f000 fad9 	bl	800523e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2160      	movs	r1, #96	; 0x60
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb03 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004c98:	e01c      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f000 fa9a 	bl	80051e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2140      	movs	r1, #64	; 0x40
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 faf3 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004cb8:	e00c      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f000 faea 	bl	800529e <TIM_ITRx_SetConfig>
      break;
 8004cca:	e003      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd0:	e000      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3d      	ldr	r2, [pc, #244]	; (8004e58 <TIM_Base_SetConfig+0x118>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <TIM_Base_SetConfig+0x11c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <TIM_Base_SetConfig+0x120>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d027      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	; (8004e58 <TIM_Base_SetConfig+0x118>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d023      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <TIM_Base_SetConfig+0x11c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2a      	ldr	r2, [pc, #168]	; (8004e60 <TIM_Base_SetConfig+0x120>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <TIM_Base_SetConfig+0x128>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <TIM_Base_SetConfig+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <TIM_Base_SetConfig+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <TIM_Base_SetConfig+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <TIM_Base_SetConfig+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a23      	ldr	r2, [pc, #140]	; (8004e7c <TIM_Base_SetConfig+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <TIM_Base_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0xf8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d103      	bne.n	8004e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	615a      	str	r2, [r3, #20]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40010400 	.word	0x40010400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800
 8004e74:	40001800 	.word	0x40001800
 8004e78:	40001c00 	.word	0x40001c00
 8004e7c:	40002000 	.word	0x40002000

08004e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0302 	bic.w	r3, r3, #2
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <TIM_OC1_SetConfig+0xd8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC1_SetConfig+0x64>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <TIM_OC1_SetConfig+0xdc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10c      	bne.n	8004efe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0308 	bic.w	r3, r3, #8
 8004eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <TIM_OC1_SetConfig+0xd8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_OC1_SetConfig+0x8e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <TIM_OC1_SetConfig+0xdc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d111      	bne.n	8004f32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400

08004f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0210 	bic.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0320 	bic.w	r3, r3, #32
 8004faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <TIM_OC2_SetConfig+0xe4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_OC2_SetConfig+0x68>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <TIM_OC2_SetConfig+0xe8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d10d      	bne.n	8004fe4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <TIM_OC2_SetConfig+0xe4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC2_SetConfig+0x94>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <TIM_OC2_SetConfig+0xe8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d113      	bne.n	800501c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40010400 	.word	0x40010400

0800504c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a21      	ldr	r2, [pc, #132]	; (800512c <TIM_OC3_SetConfig+0xe0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_OC3_SetConfig+0x66>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a20      	ldr	r2, [pc, #128]	; (8005130 <TIM_OC3_SetConfig+0xe4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a16      	ldr	r2, [pc, #88]	; (800512c <TIM_OC3_SetConfig+0xe0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC3_SetConfig+0x92>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a15      	ldr	r2, [pc, #84]	; (8005130 <TIM_OC3_SetConfig+0xe4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d113      	bne.n	8005106 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40010000 	.word	0x40010000
 8005130:	40010400 	.word	0x40010400

08005134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a12      	ldr	r2, [pc, #72]	; (80051d8 <TIM_OC4_SetConfig+0xa4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_OC4_SetConfig+0x68>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <TIM_OC4_SetConfig+0xa8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d109      	bne.n	80051b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	019b      	lsls	r3, r3, #6
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40010400 	.word	0x40010400

080051e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800520a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 030a 	bic.w	r3, r3, #10
 800521c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523e:	b480      	push	{r7}
 8005240:	b087      	sub	sp, #28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0210 	bic.w	r2, r3, #16
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	031b      	lsls	r3, r3, #12
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800527a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f043 0307 	orr.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	021a      	lsls	r2, r3, #8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2201      	movs	r2, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1a      	ldr	r2, [r3, #32]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	43db      	mvns	r3, r3
 8005336:	401a      	ands	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	431a      	orrs	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005374:	2302      	movs	r3, #2
 8005376:	e05a      	b.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a21      	ldr	r2, [pc, #132]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c4:	d01d      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a17      	ldr	r2, [pc, #92]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a15      	ldr	r2, [pc, #84]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10c      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4313      	orrs	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40010400 	.word	0x40010400
 8005450:	40014000 	.word	0x40014000
 8005454:	40001800 	.word	0x40001800

08005458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005470:	2302      	movs	r3, #2
 8005472:	e03d      	b.n	80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e03f      	b.n	80055b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fd f848 	bl	80025e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	; 0x24
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fe1d 	bl	80061a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08a      	sub	sp, #40	; 0x28
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d17c      	bne.n	80056d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_UART_Transmit+0x2c>
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e075      	b.n	80056da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_UART_Transmit+0x3e>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e06e      	b.n	80056da <HAL_UART_Transmit+0x11c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2221      	movs	r2, #33	; 0x21
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005612:	f7fd f9db 	bl	80029cc <HAL_GetTick>
 8005616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	d108      	bne.n	8005640 <HAL_UART_Transmit+0x82>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	e003      	b.n	8005648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005650:	e02a      	b.n	80056a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fb9b 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e036      	b.n	80056da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	3302      	adds	r3, #2
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e007      	b.n	800569a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1cf      	bne.n	8005652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2140      	movs	r1, #64	; 0x40
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fb6b 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08a      	sub	sp, #40	; 0x28
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	f040 808c 	bne.w	800581c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_UART_Receive+0x2e>
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e084      	b.n	800581e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_UART_Receive+0x40>
 800571e:	2302      	movs	r3, #2
 8005720:	e07d      	b.n	800581e <HAL_UART_Receive+0x13c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2222      	movs	r2, #34	; 0x22
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573e:	f7fd f945 	bl	80029cc <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005758:	d108      	bne.n	800576c <HAL_UART_Receive+0x8a>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e003      	b.n	8005774 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800577c:	e043      	b.n	8005806 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2120      	movs	r1, #32
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fb05 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e042      	b.n	800581e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3302      	adds	r3, #2
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e01f      	b.n	80057f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c0:	d007      	beq.n	80057d2 <HAL_UART_Receive+0xf0>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <HAL_UART_Receive+0xfe>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e008      	b.n	80057f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3301      	adds	r3, #1
 80057f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1b6      	bne.n	800577e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b0ba      	sub	sp, #232	; 0xe8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800584e:	2300      	movs	r3, #0
 8005850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10f      	bne.n	800588e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_UART_IRQHandler+0x66>
 800587a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fbd3 	bl	8006032 <UART_Receive_IT>
      return;
 800588c:	e256      	b.n	8005d3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800588e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80de 	beq.w	8005a54 <HAL_UART_IRQHandler+0x22c>
 8005898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d106      	bne.n	80058b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80d1 	beq.w	8005a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <HAL_UART_IRQHandler+0xae>
 80058be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_UART_IRQHandler+0xd2>
 80058e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0202 	orr.w	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_UART_IRQHandler+0xf6>
 8005906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d011      	beq.n	800594e <HAL_UART_IRQHandler+0x126>
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f043 0208 	orr.w	r2, r3, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 81ed 	beq.w	8005d32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_UART_IRQHandler+0x14e>
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fb5e 	bl	8006032 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <HAL_UART_IRQHandler+0x17a>
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d04f      	beq.n	8005a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa66 	bl	8005e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d141      	bne.n	8005a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1d9      	bne.n	80059b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d013      	beq.n	8005a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	4a7d      	ldr	r2, [pc, #500]	; (8005c04 <HAL_UART_IRQHandler+0x3dc>)
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd f989 	bl	8002d2e <HAL_DMA_Abort_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d016      	beq.n	8005a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	e00e      	b.n	8005a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f99a 	bl	8005d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e00a      	b.n	8005a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f996 	bl	8005d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e006      	b.n	8005a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f992 	bl	8005d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a4e:	e170      	b.n	8005d32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	bf00      	nop
    return;
 8005a52:	e16e      	b.n	8005d32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	f040 814a 	bne.w	8005cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8143 	beq.w	8005cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 813c 	beq.w	8005cf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	f040 80b4 	bne.w	8005c08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8140 	beq.w	8005d36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	f080 8139 	bcs.w	8005d36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	f000 8088 	beq.w	8005bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d9      	bne.n	8005ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3314      	adds	r3, #20
 8005b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e1      	bne.n	8005b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3314      	adds	r3, #20
 8005b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e3      	bne.n	8005b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bba:	f023 0310 	bic.w	r3, r3, #16
 8005bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e3      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fd f832 	bl	8002c4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f8c0 	bl	8005d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c00:	e099      	b.n	8005d36 <HAL_UART_IRQHandler+0x50e>
 8005c02:	bf00      	nop
 8005c04:	08005f3b 	.word	0x08005f3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 808b 	beq.w	8005d3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8086 	beq.w	8005d3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c52:	647a      	str	r2, [r7, #68]	; 0x44
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	623b      	str	r3, [r7, #32]
   return(result);
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cd0:	61fa      	str	r2, [r7, #28]
 8005cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e3      	bne.n	8005cac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f848 	bl	8005d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf0:	e023      	b.n	8005d3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_UART_IRQHandler+0x4ea>
 8005cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f929 	bl	8005f62 <UART_Transmit_IT>
    return;
 8005d10:	e014      	b.n	8005d3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <HAL_UART_IRQHandler+0x514>
 8005d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f969 	bl	8006002 <UART_EndTransmit_IT>
    return;
 8005d30:	e004      	b.n	8005d3c <HAL_UART_IRQHandler+0x514>
    return;
 8005d32:	bf00      	nop
 8005d34:	e002      	b.n	8005d3c <HAL_UART_IRQHandler+0x514>
      return;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <HAL_UART_IRQHandler+0x514>
      return;
 8005d3a:	bf00      	nop
  }
}
 8005d3c:	37e8      	adds	r7, #232	; 0xe8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop

08005d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b090      	sub	sp, #64	; 0x40
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	e050      	b.n	8005e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d04c      	beq.n	8005e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005db8:	f7fc fe08 	bl	80029cc <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d241      	bcs.n	8005e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005de8:	637a      	str	r2, [r7, #52]	; 0x34
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e5      	bne.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f023 0301 	bic.w	r3, r3, #1
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e1c:	623a      	str	r2, [r7, #32]
 8005e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	69f9      	ldr	r1, [r7, #28]
 8005e22:	6a3a      	ldr	r2, [r7, #32]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e00f      	b.n	8005e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4013      	ands	r3, r2
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2301      	moveq	r3, #1
 8005e5e:	2300      	movne	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d09f      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3740      	adds	r7, #64	; 0x40
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b095      	sub	sp, #84	; 0x54
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d119      	bne.n	8005f20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f023 0310 	bic.w	r3, r3, #16
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f0c:	61ba      	str	r2, [r7, #24]
 8005f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6979      	ldr	r1, [r7, #20]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f2e:	bf00      	nop
 8005f30:	3754      	adds	r7, #84	; 0x54
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ff09 	bl	8005d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b21      	cmp	r3, #33	; 0x21
 8005f74:	d13e      	bne.n	8005ff4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	d114      	bne.n	8005faa <UART_Transmit_IT+0x48>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d110      	bne.n	8005faa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	621a      	str	r2, [r3, #32]
 8005fa8:	e008      	b.n	8005fbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6211      	str	r1, [r2, #32]
 8005fb4:	781a      	ldrb	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10f      	bne.n	8005ff0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fe8e 	bl	8005d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b08c      	sub	sp, #48	; 0x30
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b22      	cmp	r3, #34	; 0x22
 8006044:	f040 80ab 	bne.w	800619e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006050:	d117      	bne.n	8006082 <UART_Receive_IT+0x50>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d113      	bne.n	8006082 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006070:	b29a      	uxth	r2, r3
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28
 8006080:	e026      	b.n	80060d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006094:	d007      	beq.n	80060a6 <UART_Receive_IT+0x74>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <UART_Receive_IT+0x82>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e008      	b.n	80060c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29b      	uxth	r3, r3
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4619      	mov	r1, r3
 80060de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d15a      	bne.n	800619a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0220 	bic.w	r2, r2, #32
 80060f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	2b01      	cmp	r3, #1
 8006122:	d135      	bne.n	8006190 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	613b      	str	r3, [r7, #16]
   return(result);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	623a      	str	r2, [r7, #32]
 800614c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	69f9      	ldr	r1, [r7, #28]
 8006150:	6a3a      	ldr	r2, [r7, #32]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	61bb      	str	r3, [r7, #24]
   return(result);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b10      	cmp	r3, #16
 800616a:	d10a      	bne.n	8006182 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fdf9 	bl	8005d80 <HAL_UARTEx_RxEventCallback>
 800618e:	e002      	b.n	8006196 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff fde1 	bl	8005d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e002      	b.n	80061a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3730      	adds	r7, #48	; 0x30
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ac:	b0c0      	sub	sp, #256	; 0x100
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	68d9      	ldr	r1, [r3, #12]
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	ea40 0301 	orr.w	r3, r0, r1
 80061d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	431a      	orrs	r2, r3
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006200:	f021 010c 	bic.w	r1, r1, #12
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800620e:	430b      	orrs	r3, r1
 8006210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	6999      	ldr	r1, [r3, #24]
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	ea40 0301 	orr.w	r3, r0, r1
 800622e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b8f      	ldr	r3, [pc, #572]	; (8006474 <UART_SetConfig+0x2cc>)
 8006238:	429a      	cmp	r2, r3
 800623a:	d005      	beq.n	8006248 <UART_SetConfig+0xa0>
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b8d      	ldr	r3, [pc, #564]	; (8006478 <UART_SetConfig+0x2d0>)
 8006244:	429a      	cmp	r2, r3
 8006246:	d104      	bne.n	8006252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006248:	f7fd fff2 	bl	8004230 <HAL_RCC_GetPCLK2Freq>
 800624c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006250:	e003      	b.n	800625a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006252:	f7fd ffd9 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8006256:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006264:	f040 810c 	bne.w	8006480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626c:	2200      	movs	r2, #0
 800626e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800627a:	4622      	mov	r2, r4
 800627c:	462b      	mov	r3, r5
 800627e:	1891      	adds	r1, r2, r2
 8006280:	65b9      	str	r1, [r7, #88]	; 0x58
 8006282:	415b      	adcs	r3, r3
 8006284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800628a:	4621      	mov	r1, r4
 800628c:	eb12 0801 	adds.w	r8, r2, r1
 8006290:	4629      	mov	r1, r5
 8006292:	eb43 0901 	adc.w	r9, r3, r1
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062aa:	4690      	mov	r8, r2
 80062ac:	4699      	mov	r9, r3
 80062ae:	4623      	mov	r3, r4
 80062b0:	eb18 0303 	adds.w	r3, r8, r3
 80062b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b8:	462b      	mov	r3, r5
 80062ba:	eb49 0303 	adc.w	r3, r9, r3
 80062be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062d6:	460b      	mov	r3, r1
 80062d8:	18db      	adds	r3, r3, r3
 80062da:	653b      	str	r3, [r7, #80]	; 0x50
 80062dc:	4613      	mov	r3, r2
 80062de:	eb42 0303 	adc.w	r3, r2, r3
 80062e2:	657b      	str	r3, [r7, #84]	; 0x54
 80062e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062ec:	f7fa fc9e 	bl	8000c2c <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4b61      	ldr	r3, [pc, #388]	; (800647c <UART_SetConfig+0x2d4>)
 80062f6:	fba3 2302 	umull	r2, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	011c      	lsls	r4, r3, #4
 80062fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006302:	2200      	movs	r2, #0
 8006304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006308:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800630c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	1891      	adds	r1, r2, r2
 8006316:	64b9      	str	r1, [r7, #72]	; 0x48
 8006318:	415b      	adcs	r3, r3
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006320:	4641      	mov	r1, r8
 8006322:	eb12 0a01 	adds.w	sl, r2, r1
 8006326:	4649      	mov	r1, r9
 8006328:	eb43 0b01 	adc.w	fp, r3, r1
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800633c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006340:	4692      	mov	sl, r2
 8006342:	469b      	mov	fp, r3
 8006344:	4643      	mov	r3, r8
 8006346:	eb1a 0303 	adds.w	r3, sl, r3
 800634a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800634e:	464b      	mov	r3, r9
 8006350:	eb4b 0303 	adc.w	r3, fp, r3
 8006354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006364:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800636c:	460b      	mov	r3, r1
 800636e:	18db      	adds	r3, r3, r3
 8006370:	643b      	str	r3, [r7, #64]	; 0x40
 8006372:	4613      	mov	r3, r2
 8006374:	eb42 0303 	adc.w	r3, r2, r3
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
 800637a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800637e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006382:	f7fa fc53 	bl	8000c2c <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4611      	mov	r1, r2
 800638c:	4b3b      	ldr	r3, [pc, #236]	; (800647c <UART_SetConfig+0x2d4>)
 800638e:	fba3 2301 	umull	r2, r3, r3, r1
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2264      	movs	r2, #100	; 0x64
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	1acb      	subs	r3, r1, r3
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063a2:	4b36      	ldr	r3, [pc, #216]	; (800647c <UART_SetConfig+0x2d4>)
 80063a4:	fba3 2302 	umull	r2, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063b0:	441c      	add	r4, r3
 80063b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063c4:	4642      	mov	r2, r8
 80063c6:	464b      	mov	r3, r9
 80063c8:	1891      	adds	r1, r2, r2
 80063ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80063cc:	415b      	adcs	r3, r3
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063d4:	4641      	mov	r1, r8
 80063d6:	1851      	adds	r1, r2, r1
 80063d8:	6339      	str	r1, [r7, #48]	; 0x30
 80063da:	4649      	mov	r1, r9
 80063dc:	414b      	adcs	r3, r1
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063ec:	4659      	mov	r1, fp
 80063ee:	00cb      	lsls	r3, r1, #3
 80063f0:	4651      	mov	r1, sl
 80063f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f6:	4651      	mov	r1, sl
 80063f8:	00ca      	lsls	r2, r1, #3
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	4642      	mov	r2, r8
 8006402:	189b      	adds	r3, r3, r2
 8006404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006408:	464b      	mov	r3, r9
 800640a:	460a      	mov	r2, r1
 800640c:	eb42 0303 	adc.w	r3, r2, r3
 8006410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006420:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006428:	460b      	mov	r3, r1
 800642a:	18db      	adds	r3, r3, r3
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
 800642e:	4613      	mov	r3, r2
 8006430:	eb42 0303 	adc.w	r3, r2, r3
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800643a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800643e:	f7fa fbf5 	bl	8000c2c <__aeabi_uldivmod>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <UART_SetConfig+0x2d4>)
 8006448:	fba3 1302 	umull	r1, r3, r3, r2
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	2164      	movs	r1, #100	; 0x64
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	3332      	adds	r3, #50	; 0x32
 800645a:	4a08      	ldr	r2, [pc, #32]	; (800647c <UART_SetConfig+0x2d4>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	f003 0207 	and.w	r2, r3, #7
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4422      	add	r2, r4
 800646e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006470:	e105      	b.n	800667e <UART_SetConfig+0x4d6>
 8006472:	bf00      	nop
 8006474:	40011000 	.word	0x40011000
 8006478:	40011400 	.word	0x40011400
 800647c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006484:	2200      	movs	r2, #0
 8006486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800648a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800648e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006492:	4642      	mov	r2, r8
 8006494:	464b      	mov	r3, r9
 8006496:	1891      	adds	r1, r2, r2
 8006498:	6239      	str	r1, [r7, #32]
 800649a:	415b      	adcs	r3, r3
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064a2:	4641      	mov	r1, r8
 80064a4:	1854      	adds	r4, r2, r1
 80064a6:	4649      	mov	r1, r9
 80064a8:	eb43 0501 	adc.w	r5, r3, r1
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	00eb      	lsls	r3, r5, #3
 80064b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ba:	00e2      	lsls	r2, r4, #3
 80064bc:	4614      	mov	r4, r2
 80064be:	461d      	mov	r5, r3
 80064c0:	4643      	mov	r3, r8
 80064c2:	18e3      	adds	r3, r4, r3
 80064c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064c8:	464b      	mov	r3, r9
 80064ca:	eb45 0303 	adc.w	r3, r5, r3
 80064ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064ee:	4629      	mov	r1, r5
 80064f0:	008b      	lsls	r3, r1, #2
 80064f2:	4621      	mov	r1, r4
 80064f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f8:	4621      	mov	r1, r4
 80064fa:	008a      	lsls	r2, r1, #2
 80064fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006500:	f7fa fb94 	bl	8000c2c <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4b60      	ldr	r3, [pc, #384]	; (800668c <UART_SetConfig+0x4e4>)
 800650a:	fba3 2302 	umull	r2, r3, r3, r2
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	011c      	lsls	r4, r3, #4
 8006512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006516:	2200      	movs	r2, #0
 8006518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800651c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006524:	4642      	mov	r2, r8
 8006526:	464b      	mov	r3, r9
 8006528:	1891      	adds	r1, r2, r2
 800652a:	61b9      	str	r1, [r7, #24]
 800652c:	415b      	adcs	r3, r3
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006534:	4641      	mov	r1, r8
 8006536:	1851      	adds	r1, r2, r1
 8006538:	6139      	str	r1, [r7, #16]
 800653a:	4649      	mov	r1, r9
 800653c:	414b      	adcs	r3, r1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800654c:	4659      	mov	r1, fp
 800654e:	00cb      	lsls	r3, r1, #3
 8006550:	4651      	mov	r1, sl
 8006552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006556:	4651      	mov	r1, sl
 8006558:	00ca      	lsls	r2, r1, #3
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	4603      	mov	r3, r0
 8006560:	4642      	mov	r2, r8
 8006562:	189b      	adds	r3, r3, r2
 8006564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006568:	464b      	mov	r3, r9
 800656a:	460a      	mov	r2, r1
 800656c:	eb42 0303 	adc.w	r3, r2, r3
 8006570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	67bb      	str	r3, [r7, #120]	; 0x78
 800657e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800658c:	4649      	mov	r1, r9
 800658e:	008b      	lsls	r3, r1, #2
 8006590:	4641      	mov	r1, r8
 8006592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006596:	4641      	mov	r1, r8
 8006598:	008a      	lsls	r2, r1, #2
 800659a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800659e:	f7fa fb45 	bl	8000c2c <__aeabi_uldivmod>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4b39      	ldr	r3, [pc, #228]	; (800668c <UART_SetConfig+0x4e4>)
 80065a8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	2164      	movs	r1, #100	; 0x64
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3332      	adds	r3, #50	; 0x32
 80065ba:	4a34      	ldr	r2, [pc, #208]	; (800668c <UART_SetConfig+0x4e4>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c6:	441c      	add	r4, r3
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065cc:	2200      	movs	r2, #0
 80065ce:	673b      	str	r3, [r7, #112]	; 0x70
 80065d0:	677a      	str	r2, [r7, #116]	; 0x74
 80065d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	415b      	adcs	r3, r3
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e6:	4641      	mov	r1, r8
 80065e8:	1851      	adds	r1, r2, r1
 80065ea:	6039      	str	r1, [r7, #0]
 80065ec:	4649      	mov	r1, r9
 80065ee:	414b      	adcs	r3, r1
 80065f0:	607b      	str	r3, [r7, #4]
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065fe:	4659      	mov	r1, fp
 8006600:	00cb      	lsls	r3, r1, #3
 8006602:	4651      	mov	r1, sl
 8006604:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006608:	4651      	mov	r1, sl
 800660a:	00ca      	lsls	r2, r1, #3
 800660c:	4610      	mov	r0, r2
 800660e:	4619      	mov	r1, r3
 8006610:	4603      	mov	r3, r0
 8006612:	4642      	mov	r2, r8
 8006614:	189b      	adds	r3, r3, r2
 8006616:	66bb      	str	r3, [r7, #104]	; 0x68
 8006618:	464b      	mov	r3, r9
 800661a:	460a      	mov	r2, r1
 800661c:	eb42 0303 	adc.w	r3, r2, r3
 8006620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	663b      	str	r3, [r7, #96]	; 0x60
 800662c:	667a      	str	r2, [r7, #100]	; 0x64
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800663a:	4649      	mov	r1, r9
 800663c:	008b      	lsls	r3, r1, #2
 800663e:	4641      	mov	r1, r8
 8006640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006644:	4641      	mov	r1, r8
 8006646:	008a      	lsls	r2, r1, #2
 8006648:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800664c:	f7fa faee 	bl	8000c2c <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4b0d      	ldr	r3, [pc, #52]	; (800668c <UART_SetConfig+0x4e4>)
 8006656:	fba3 1302 	umull	r1, r3, r3, r2
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2164      	movs	r1, #100	; 0x64
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	3332      	adds	r3, #50	; 0x32
 8006668:	4a08      	ldr	r2, [pc, #32]	; (800668c <UART_SetConfig+0x4e4>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4422      	add	r2, r4
 800667c:	609a      	str	r2, [r3, #8]
}
 800667e:	bf00      	nop
 8006680:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006684:	46bd      	mov	sp, r7
 8006686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800668a:	bf00      	nop
 800668c:	51eb851f 	.word	0x51eb851f

08006690 <atof>:
 8006690:	2100      	movs	r1, #0
 8006692:	f000 be77 	b.w	8007384 <strtod>
	...

08006698 <__errno>:
 8006698:	4b01      	ldr	r3, [pc, #4]	; (80066a0 <__errno+0x8>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000020 	.word	0x20000020

080066a4 <__libc_init_array>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4d0d      	ldr	r5, [pc, #52]	; (80066dc <__libc_init_array+0x38>)
 80066a8:	4c0d      	ldr	r4, [pc, #52]	; (80066e0 <__libc_init_array+0x3c>)
 80066aa:	1b64      	subs	r4, r4, r5
 80066ac:	10a4      	asrs	r4, r4, #2
 80066ae:	2600      	movs	r6, #0
 80066b0:	42a6      	cmp	r6, r4
 80066b2:	d109      	bne.n	80066c8 <__libc_init_array+0x24>
 80066b4:	4d0b      	ldr	r5, [pc, #44]	; (80066e4 <__libc_init_array+0x40>)
 80066b6:	4c0c      	ldr	r4, [pc, #48]	; (80066e8 <__libc_init_array+0x44>)
 80066b8:	f003 f906 	bl	80098c8 <_init>
 80066bc:	1b64      	subs	r4, r4, r5
 80066be:	10a4      	asrs	r4, r4, #2
 80066c0:	2600      	movs	r6, #0
 80066c2:	42a6      	cmp	r6, r4
 80066c4:	d105      	bne.n	80066d2 <__libc_init_array+0x2e>
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
 80066c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066cc:	4798      	blx	r3
 80066ce:	3601      	adds	r6, #1
 80066d0:	e7ee      	b.n	80066b0 <__libc_init_array+0xc>
 80066d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d6:	4798      	blx	r3
 80066d8:	3601      	adds	r6, #1
 80066da:	e7f2      	b.n	80066c2 <__libc_init_array+0x1e>
 80066dc:	08009dd8 	.word	0x08009dd8
 80066e0:	08009dd8 	.word	0x08009dd8
 80066e4:	08009dd8 	.word	0x08009dd8
 80066e8:	08009ddc 	.word	0x08009ddc

080066ec <memset>:
 80066ec:	4402      	add	r2, r0
 80066ee:	4603      	mov	r3, r0
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d100      	bne.n	80066f6 <memset+0xa>
 80066f4:	4770      	bx	lr
 80066f6:	f803 1b01 	strb.w	r1, [r3], #1
 80066fa:	e7f9      	b.n	80066f0 <memset+0x4>

080066fc <siprintf>:
 80066fc:	b40e      	push	{r1, r2, r3}
 80066fe:	b500      	push	{lr}
 8006700:	b09c      	sub	sp, #112	; 0x70
 8006702:	ab1d      	add	r3, sp, #116	; 0x74
 8006704:	9002      	str	r0, [sp, #8]
 8006706:	9006      	str	r0, [sp, #24]
 8006708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800670c:	4809      	ldr	r0, [pc, #36]	; (8006734 <siprintf+0x38>)
 800670e:	9107      	str	r1, [sp, #28]
 8006710:	9104      	str	r1, [sp, #16]
 8006712:	4909      	ldr	r1, [pc, #36]	; (8006738 <siprintf+0x3c>)
 8006714:	f853 2b04 	ldr.w	r2, [r3], #4
 8006718:	9105      	str	r1, [sp, #20]
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	a902      	add	r1, sp, #8
 8006720:	f002 f874 	bl	800880c <_svfiprintf_r>
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	b01c      	add	sp, #112	; 0x70
 800672c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006730:	b003      	add	sp, #12
 8006732:	4770      	bx	lr
 8006734:	20000020 	.word	0x20000020
 8006738:	ffff0208 	.word	0xffff0208

0800673c <sulp>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	ec45 4b10 	vmov	d0, r4, r5
 8006746:	4616      	mov	r6, r2
 8006748:	f001 fdbe 	bl	80082c8 <__ulp>
 800674c:	ec51 0b10 	vmov	r0, r1, d0
 8006750:	b17e      	cbz	r6, 8006772 <sulp+0x36>
 8006752:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006756:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800675a:	2b00      	cmp	r3, #0
 800675c:	dd09      	ble.n	8006772 <sulp+0x36>
 800675e:	051b      	lsls	r3, r3, #20
 8006760:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006764:	2400      	movs	r4, #0
 8006766:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f7f9 ff53 	bl	8000618 <__aeabi_dmul>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	0000      	movs	r0, r0
	...

08006778 <_strtod_l>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	ed2d 8b02 	vpush	{d8}
 8006780:	b09d      	sub	sp, #116	; 0x74
 8006782:	461f      	mov	r7, r3
 8006784:	2300      	movs	r3, #0
 8006786:	9318      	str	r3, [sp, #96]	; 0x60
 8006788:	4ba2      	ldr	r3, [pc, #648]	; (8006a14 <_strtod_l+0x29c>)
 800678a:	9213      	str	r2, [sp, #76]	; 0x4c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9305      	str	r3, [sp, #20]
 8006790:	4604      	mov	r4, r0
 8006792:	4618      	mov	r0, r3
 8006794:	4688      	mov	r8, r1
 8006796:	f7f9 fd25 	bl	80001e4 <strlen>
 800679a:	f04f 0a00 	mov.w	sl, #0
 800679e:	4605      	mov	r5, r0
 80067a0:	f04f 0b00 	mov.w	fp, #0
 80067a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	2a2b      	cmp	r2, #43	; 0x2b
 80067ae:	d04e      	beq.n	800684e <_strtod_l+0xd6>
 80067b0:	d83b      	bhi.n	800682a <_strtod_l+0xb2>
 80067b2:	2a0d      	cmp	r2, #13
 80067b4:	d834      	bhi.n	8006820 <_strtod_l+0xa8>
 80067b6:	2a08      	cmp	r2, #8
 80067b8:	d834      	bhi.n	8006824 <_strtod_l+0xac>
 80067ba:	2a00      	cmp	r2, #0
 80067bc:	d03e      	beq.n	800683c <_strtod_l+0xc4>
 80067be:	2300      	movs	r3, #0
 80067c0:	930a      	str	r3, [sp, #40]	; 0x28
 80067c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80067c4:	7833      	ldrb	r3, [r6, #0]
 80067c6:	2b30      	cmp	r3, #48	; 0x30
 80067c8:	f040 80b0 	bne.w	800692c <_strtod_l+0x1b4>
 80067cc:	7873      	ldrb	r3, [r6, #1]
 80067ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067d2:	2b58      	cmp	r3, #88	; 0x58
 80067d4:	d168      	bne.n	80068a8 <_strtod_l+0x130>
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	ab18      	add	r3, sp, #96	; 0x60
 80067dc:	9702      	str	r7, [sp, #8]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4a8d      	ldr	r2, [pc, #564]	; (8006a18 <_strtod_l+0x2a0>)
 80067e2:	ab19      	add	r3, sp, #100	; 0x64
 80067e4:	a917      	add	r1, sp, #92	; 0x5c
 80067e6:	4620      	mov	r0, r4
 80067e8:	f000 fecc 	bl	8007584 <__gethex>
 80067ec:	f010 0707 	ands.w	r7, r0, #7
 80067f0:	4605      	mov	r5, r0
 80067f2:	d005      	beq.n	8006800 <_strtod_l+0x88>
 80067f4:	2f06      	cmp	r7, #6
 80067f6:	d12c      	bne.n	8006852 <_strtod_l+0xda>
 80067f8:	3601      	adds	r6, #1
 80067fa:	2300      	movs	r3, #0
 80067fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80067fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 8590 	bne.w	8007328 <_strtod_l+0xbb0>
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	b1eb      	cbz	r3, 8006848 <_strtod_l+0xd0>
 800680c:	4652      	mov	r2, sl
 800680e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006812:	ec43 2b10 	vmov	d0, r2, r3
 8006816:	b01d      	add	sp, #116	; 0x74
 8006818:	ecbd 8b02 	vpop	{d8}
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	2a20      	cmp	r2, #32
 8006822:	d1cc      	bne.n	80067be <_strtod_l+0x46>
 8006824:	3301      	adds	r3, #1
 8006826:	9317      	str	r3, [sp, #92]	; 0x5c
 8006828:	e7be      	b.n	80067a8 <_strtod_l+0x30>
 800682a:	2a2d      	cmp	r2, #45	; 0x2d
 800682c:	d1c7      	bne.n	80067be <_strtod_l+0x46>
 800682e:	2201      	movs	r2, #1
 8006830:	920a      	str	r2, [sp, #40]	; 0x28
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	9217      	str	r2, [sp, #92]	; 0x5c
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1c2      	bne.n	80067c2 <_strtod_l+0x4a>
 800683c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800683e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006842:	2b00      	cmp	r3, #0
 8006844:	f040 856e 	bne.w	8007324 <_strtod_l+0xbac>
 8006848:	4652      	mov	r2, sl
 800684a:	465b      	mov	r3, fp
 800684c:	e7e1      	b.n	8006812 <_strtod_l+0x9a>
 800684e:	2200      	movs	r2, #0
 8006850:	e7ee      	b.n	8006830 <_strtod_l+0xb8>
 8006852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006854:	b13a      	cbz	r2, 8006866 <_strtod_l+0xee>
 8006856:	2135      	movs	r1, #53	; 0x35
 8006858:	a81a      	add	r0, sp, #104	; 0x68
 800685a:	f001 fe40 	bl	80084de <__copybits>
 800685e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006860:	4620      	mov	r0, r4
 8006862:	f001 f9ff 	bl	8007c64 <_Bfree>
 8006866:	3f01      	subs	r7, #1
 8006868:	2f04      	cmp	r7, #4
 800686a:	d806      	bhi.n	800687a <_strtod_l+0x102>
 800686c:	e8df f007 	tbb	[pc, r7]
 8006870:	1714030a 	.word	0x1714030a
 8006874:	0a          	.byte	0x0a
 8006875:	00          	.byte	0x00
 8006876:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800687a:	0728      	lsls	r0, r5, #28
 800687c:	d5c0      	bpl.n	8006800 <_strtod_l+0x88>
 800687e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006882:	e7bd      	b.n	8006800 <_strtod_l+0x88>
 8006884:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800688a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800688e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006892:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006896:	e7f0      	b.n	800687a <_strtod_l+0x102>
 8006898:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006a1c <_strtod_l+0x2a4>
 800689c:	e7ed      	b.n	800687a <_strtod_l+0x102>
 800689e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80068a2:	f04f 3aff 	mov.w	sl, #4294967295
 80068a6:	e7e8      	b.n	800687a <_strtod_l+0x102>
 80068a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b30      	cmp	r3, #48	; 0x30
 80068b2:	d0f9      	beq.n	80068a8 <_strtod_l+0x130>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0a3      	beq.n	8006800 <_strtod_l+0x88>
 80068b8:	2301      	movs	r3, #1
 80068ba:	f04f 0900 	mov.w	r9, #0
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c2:	9308      	str	r3, [sp, #32]
 80068c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80068c8:	464f      	mov	r7, r9
 80068ca:	220a      	movs	r2, #10
 80068cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80068ce:	7806      	ldrb	r6, [r0, #0]
 80068d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80068d4:	b2d9      	uxtb	r1, r3
 80068d6:	2909      	cmp	r1, #9
 80068d8:	d92a      	bls.n	8006930 <_strtod_l+0x1b8>
 80068da:	9905      	ldr	r1, [sp, #20]
 80068dc:	462a      	mov	r2, r5
 80068de:	f002 fb9b 	bl	8009018 <strncmp>
 80068e2:	b398      	cbz	r0, 800694c <_strtod_l+0x1d4>
 80068e4:	2000      	movs	r0, #0
 80068e6:	4632      	mov	r2, r6
 80068e8:	463d      	mov	r5, r7
 80068ea:	9005      	str	r0, [sp, #20]
 80068ec:	4603      	mov	r3, r0
 80068ee:	2a65      	cmp	r2, #101	; 0x65
 80068f0:	d001      	beq.n	80068f6 <_strtod_l+0x17e>
 80068f2:	2a45      	cmp	r2, #69	; 0x45
 80068f4:	d118      	bne.n	8006928 <_strtod_l+0x1b0>
 80068f6:	b91d      	cbnz	r5, 8006900 <_strtod_l+0x188>
 80068f8:	9a04      	ldr	r2, [sp, #16]
 80068fa:	4302      	orrs	r2, r0
 80068fc:	d09e      	beq.n	800683c <_strtod_l+0xc4>
 80068fe:	2500      	movs	r5, #0
 8006900:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006904:	f108 0201 	add.w	r2, r8, #1
 8006908:	9217      	str	r2, [sp, #92]	; 0x5c
 800690a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800690e:	2a2b      	cmp	r2, #43	; 0x2b
 8006910:	d075      	beq.n	80069fe <_strtod_l+0x286>
 8006912:	2a2d      	cmp	r2, #45	; 0x2d
 8006914:	d07b      	beq.n	8006a0e <_strtod_l+0x296>
 8006916:	f04f 0c00 	mov.w	ip, #0
 800691a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800691e:	2909      	cmp	r1, #9
 8006920:	f240 8082 	bls.w	8006a28 <_strtod_l+0x2b0>
 8006924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006928:	2600      	movs	r6, #0
 800692a:	e09d      	b.n	8006a68 <_strtod_l+0x2f0>
 800692c:	2300      	movs	r3, #0
 800692e:	e7c4      	b.n	80068ba <_strtod_l+0x142>
 8006930:	2f08      	cmp	r7, #8
 8006932:	bfd8      	it	le
 8006934:	9907      	ldrle	r1, [sp, #28]
 8006936:	f100 0001 	add.w	r0, r0, #1
 800693a:	bfda      	itte	le
 800693c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006940:	9307      	strle	r3, [sp, #28]
 8006942:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006946:	3701      	adds	r7, #1
 8006948:	9017      	str	r0, [sp, #92]	; 0x5c
 800694a:	e7bf      	b.n	80068cc <_strtod_l+0x154>
 800694c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800694e:	195a      	adds	r2, r3, r5
 8006950:	9217      	str	r2, [sp, #92]	; 0x5c
 8006952:	5d5a      	ldrb	r2, [r3, r5]
 8006954:	2f00      	cmp	r7, #0
 8006956:	d037      	beq.n	80069c8 <_strtod_l+0x250>
 8006958:	9005      	str	r0, [sp, #20]
 800695a:	463d      	mov	r5, r7
 800695c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006960:	2b09      	cmp	r3, #9
 8006962:	d912      	bls.n	800698a <_strtod_l+0x212>
 8006964:	2301      	movs	r3, #1
 8006966:	e7c2      	b.n	80068ee <_strtod_l+0x176>
 8006968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	9217      	str	r2, [sp, #92]	; 0x5c
 800696e:	785a      	ldrb	r2, [r3, #1]
 8006970:	3001      	adds	r0, #1
 8006972:	2a30      	cmp	r2, #48	; 0x30
 8006974:	d0f8      	beq.n	8006968 <_strtod_l+0x1f0>
 8006976:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800697a:	2b08      	cmp	r3, #8
 800697c:	f200 84d9 	bhi.w	8007332 <_strtod_l+0xbba>
 8006980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006982:	9005      	str	r0, [sp, #20]
 8006984:	2000      	movs	r0, #0
 8006986:	9308      	str	r3, [sp, #32]
 8006988:	4605      	mov	r5, r0
 800698a:	3a30      	subs	r2, #48	; 0x30
 800698c:	f100 0301 	add.w	r3, r0, #1
 8006990:	d014      	beq.n	80069bc <_strtod_l+0x244>
 8006992:	9905      	ldr	r1, [sp, #20]
 8006994:	4419      	add	r1, r3
 8006996:	9105      	str	r1, [sp, #20]
 8006998:	462b      	mov	r3, r5
 800699a:	eb00 0e05 	add.w	lr, r0, r5
 800699e:	210a      	movs	r1, #10
 80069a0:	4573      	cmp	r3, lr
 80069a2:	d113      	bne.n	80069cc <_strtod_l+0x254>
 80069a4:	182b      	adds	r3, r5, r0
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	f105 0501 	add.w	r5, r5, #1
 80069ac:	4405      	add	r5, r0
 80069ae:	dc1c      	bgt.n	80069ea <_strtod_l+0x272>
 80069b0:	9907      	ldr	r1, [sp, #28]
 80069b2:	230a      	movs	r3, #10
 80069b4:	fb03 2301 	mla	r3, r3, r1, r2
 80069b8:	9307      	str	r3, [sp, #28]
 80069ba:	2300      	movs	r3, #0
 80069bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069be:	1c51      	adds	r1, r2, #1
 80069c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80069c2:	7852      	ldrb	r2, [r2, #1]
 80069c4:	4618      	mov	r0, r3
 80069c6:	e7c9      	b.n	800695c <_strtod_l+0x1e4>
 80069c8:	4638      	mov	r0, r7
 80069ca:	e7d2      	b.n	8006972 <_strtod_l+0x1fa>
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	dc04      	bgt.n	80069da <_strtod_l+0x262>
 80069d0:	9e07      	ldr	r6, [sp, #28]
 80069d2:	434e      	muls	r6, r1
 80069d4:	9607      	str	r6, [sp, #28]
 80069d6:	3301      	adds	r3, #1
 80069d8:	e7e2      	b.n	80069a0 <_strtod_l+0x228>
 80069da:	f103 0c01 	add.w	ip, r3, #1
 80069de:	f1bc 0f10 	cmp.w	ip, #16
 80069e2:	bfd8      	it	le
 80069e4:	fb01 f909 	mulle.w	r9, r1, r9
 80069e8:	e7f5      	b.n	80069d6 <_strtod_l+0x25e>
 80069ea:	2d10      	cmp	r5, #16
 80069ec:	bfdc      	itt	le
 80069ee:	230a      	movle	r3, #10
 80069f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80069f4:	e7e1      	b.n	80069ba <_strtod_l+0x242>
 80069f6:	2300      	movs	r3, #0
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	2301      	movs	r3, #1
 80069fc:	e77c      	b.n	80068f8 <_strtod_l+0x180>
 80069fe:	f04f 0c00 	mov.w	ip, #0
 8006a02:	f108 0202 	add.w	r2, r8, #2
 8006a06:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006a0c:	e785      	b.n	800691a <_strtod_l+0x1a2>
 8006a0e:	f04f 0c01 	mov.w	ip, #1
 8006a12:	e7f6      	b.n	8006a02 <_strtod_l+0x28a>
 8006a14:	08009ad0 	.word	0x08009ad0
 8006a18:	08009954 	.word	0x08009954
 8006a1c:	7ff00000 	.word	0x7ff00000
 8006a20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a22:	1c51      	adds	r1, r2, #1
 8006a24:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a26:	7852      	ldrb	r2, [r2, #1]
 8006a28:	2a30      	cmp	r2, #48	; 0x30
 8006a2a:	d0f9      	beq.n	8006a20 <_strtod_l+0x2a8>
 8006a2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a30:	2908      	cmp	r1, #8
 8006a32:	f63f af79 	bhi.w	8006928 <_strtod_l+0x1b0>
 8006a36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a3c:	9206      	str	r2, [sp, #24]
 8006a3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006a40:	1c51      	adds	r1, r2, #1
 8006a42:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a44:	7852      	ldrb	r2, [r2, #1]
 8006a46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006a4a:	2e09      	cmp	r6, #9
 8006a4c:	d937      	bls.n	8006abe <_strtod_l+0x346>
 8006a4e:	9e06      	ldr	r6, [sp, #24]
 8006a50:	1b89      	subs	r1, r1, r6
 8006a52:	2908      	cmp	r1, #8
 8006a54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006a58:	dc02      	bgt.n	8006a60 <_strtod_l+0x2e8>
 8006a5a:	4576      	cmp	r6, lr
 8006a5c:	bfa8      	it	ge
 8006a5e:	4676      	movge	r6, lr
 8006a60:	f1bc 0f00 	cmp.w	ip, #0
 8006a64:	d000      	beq.n	8006a68 <_strtod_l+0x2f0>
 8006a66:	4276      	negs	r6, r6
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d14d      	bne.n	8006b08 <_strtod_l+0x390>
 8006a6c:	9904      	ldr	r1, [sp, #16]
 8006a6e:	4301      	orrs	r1, r0
 8006a70:	f47f aec6 	bne.w	8006800 <_strtod_l+0x88>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f47f aee1 	bne.w	800683c <_strtod_l+0xc4>
 8006a7a:	2a69      	cmp	r2, #105	; 0x69
 8006a7c:	d027      	beq.n	8006ace <_strtod_l+0x356>
 8006a7e:	dc24      	bgt.n	8006aca <_strtod_l+0x352>
 8006a80:	2a49      	cmp	r2, #73	; 0x49
 8006a82:	d024      	beq.n	8006ace <_strtod_l+0x356>
 8006a84:	2a4e      	cmp	r2, #78	; 0x4e
 8006a86:	f47f aed9 	bne.w	800683c <_strtod_l+0xc4>
 8006a8a:	499f      	ldr	r1, [pc, #636]	; (8006d08 <_strtod_l+0x590>)
 8006a8c:	a817      	add	r0, sp, #92	; 0x5c
 8006a8e:	f000 ffd1 	bl	8007a34 <__match>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f43f aed2 	beq.w	800683c <_strtod_l+0xc4>
 8006a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b28      	cmp	r3, #40	; 0x28
 8006a9e:	d12d      	bne.n	8006afc <_strtod_l+0x384>
 8006aa0:	499a      	ldr	r1, [pc, #616]	; (8006d0c <_strtod_l+0x594>)
 8006aa2:	aa1a      	add	r2, sp, #104	; 0x68
 8006aa4:	a817      	add	r0, sp, #92	; 0x5c
 8006aa6:	f000 ffd9 	bl	8007a5c <__hexnan>
 8006aaa:	2805      	cmp	r0, #5
 8006aac:	d126      	bne.n	8006afc <_strtod_l+0x384>
 8006aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ab0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006ab4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006ab8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006abc:	e6a0      	b.n	8006800 <_strtod_l+0x88>
 8006abe:	210a      	movs	r1, #10
 8006ac0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006ac4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006ac8:	e7b9      	b.n	8006a3e <_strtod_l+0x2c6>
 8006aca:	2a6e      	cmp	r2, #110	; 0x6e
 8006acc:	e7db      	b.n	8006a86 <_strtod_l+0x30e>
 8006ace:	4990      	ldr	r1, [pc, #576]	; (8006d10 <_strtod_l+0x598>)
 8006ad0:	a817      	add	r0, sp, #92	; 0x5c
 8006ad2:	f000 ffaf 	bl	8007a34 <__match>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f43f aeb0 	beq.w	800683c <_strtod_l+0xc4>
 8006adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ade:	498d      	ldr	r1, [pc, #564]	; (8006d14 <_strtod_l+0x59c>)
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	a817      	add	r0, sp, #92	; 0x5c
 8006ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ae6:	f000 ffa5 	bl	8007a34 <__match>
 8006aea:	b910      	cbnz	r0, 8006af2 <_strtod_l+0x37a>
 8006aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aee:	3301      	adds	r3, #1
 8006af0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006af2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006d24 <_strtod_l+0x5ac>
 8006af6:	f04f 0a00 	mov.w	sl, #0
 8006afa:	e681      	b.n	8006800 <_strtod_l+0x88>
 8006afc:	4886      	ldr	r0, [pc, #536]	; (8006d18 <_strtod_l+0x5a0>)
 8006afe:	f002 fa73 	bl	8008fe8 <nan>
 8006b02:	ec5b ab10 	vmov	sl, fp, d0
 8006b06:	e67b      	b.n	8006800 <_strtod_l+0x88>
 8006b08:	9b05      	ldr	r3, [sp, #20]
 8006b0a:	9807      	ldr	r0, [sp, #28]
 8006b0c:	1af3      	subs	r3, r6, r3
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	bf08      	it	eq
 8006b12:	462f      	moveq	r7, r5
 8006b14:	2d10      	cmp	r5, #16
 8006b16:	9306      	str	r3, [sp, #24]
 8006b18:	46a8      	mov	r8, r5
 8006b1a:	bfa8      	it	ge
 8006b1c:	f04f 0810 	movge.w	r8, #16
 8006b20:	f7f9 fd00 	bl	8000524 <__aeabi_ui2d>
 8006b24:	2d09      	cmp	r5, #9
 8006b26:	4682      	mov	sl, r0
 8006b28:	468b      	mov	fp, r1
 8006b2a:	dd13      	ble.n	8006b54 <_strtod_l+0x3dc>
 8006b2c:	4b7b      	ldr	r3, [pc, #492]	; (8006d1c <_strtod_l+0x5a4>)
 8006b2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b36:	f7f9 fd6f 	bl	8000618 <__aeabi_dmul>
 8006b3a:	4682      	mov	sl, r0
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	468b      	mov	fp, r1
 8006b40:	f7f9 fcf0 	bl	8000524 <__aeabi_ui2d>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4650      	mov	r0, sl
 8006b4a:	4659      	mov	r1, fp
 8006b4c:	f7f9 fbae 	bl	80002ac <__adddf3>
 8006b50:	4682      	mov	sl, r0
 8006b52:	468b      	mov	fp, r1
 8006b54:	2d0f      	cmp	r5, #15
 8006b56:	dc38      	bgt.n	8006bca <_strtod_l+0x452>
 8006b58:	9b06      	ldr	r3, [sp, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f43f ae50 	beq.w	8006800 <_strtod_l+0x88>
 8006b60:	dd24      	ble.n	8006bac <_strtod_l+0x434>
 8006b62:	2b16      	cmp	r3, #22
 8006b64:	dc0b      	bgt.n	8006b7e <_strtod_l+0x406>
 8006b66:	496d      	ldr	r1, [pc, #436]	; (8006d1c <_strtod_l+0x5a4>)
 8006b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b70:	4652      	mov	r2, sl
 8006b72:	465b      	mov	r3, fp
 8006b74:	f7f9 fd50 	bl	8000618 <__aeabi_dmul>
 8006b78:	4682      	mov	sl, r0
 8006b7a:	468b      	mov	fp, r1
 8006b7c:	e640      	b.n	8006800 <_strtod_l+0x88>
 8006b7e:	9a06      	ldr	r2, [sp, #24]
 8006b80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006b84:	4293      	cmp	r3, r2
 8006b86:	db20      	blt.n	8006bca <_strtod_l+0x452>
 8006b88:	4c64      	ldr	r4, [pc, #400]	; (8006d1c <_strtod_l+0x5a4>)
 8006b8a:	f1c5 050f 	rsb	r5, r5, #15
 8006b8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b92:	4652      	mov	r2, sl
 8006b94:	465b      	mov	r3, fp
 8006b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9a:	f7f9 fd3d 	bl	8000618 <__aeabi_dmul>
 8006b9e:	9b06      	ldr	r3, [sp, #24]
 8006ba0:	1b5d      	subs	r5, r3, r5
 8006ba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006baa:	e7e3      	b.n	8006b74 <_strtod_l+0x3fc>
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	3316      	adds	r3, #22
 8006bb0:	db0b      	blt.n	8006bca <_strtod_l+0x452>
 8006bb2:	9b05      	ldr	r3, [sp, #20]
 8006bb4:	1b9e      	subs	r6, r3, r6
 8006bb6:	4b59      	ldr	r3, [pc, #356]	; (8006d1c <_strtod_l+0x5a4>)
 8006bb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 fe52 	bl	800086c <__aeabi_ddiv>
 8006bc8:	e7d6      	b.n	8006b78 <_strtod_l+0x400>
 8006bca:	9b06      	ldr	r3, [sp, #24]
 8006bcc:	eba5 0808 	sub.w	r8, r5, r8
 8006bd0:	4498      	add	r8, r3
 8006bd2:	f1b8 0f00 	cmp.w	r8, #0
 8006bd6:	dd74      	ble.n	8006cc2 <_strtod_l+0x54a>
 8006bd8:	f018 030f 	ands.w	r3, r8, #15
 8006bdc:	d00a      	beq.n	8006bf4 <_strtod_l+0x47c>
 8006bde:	494f      	ldr	r1, [pc, #316]	; (8006d1c <_strtod_l+0x5a4>)
 8006be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006be4:	4652      	mov	r2, sl
 8006be6:	465b      	mov	r3, fp
 8006be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bec:	f7f9 fd14 	bl	8000618 <__aeabi_dmul>
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	468b      	mov	fp, r1
 8006bf4:	f038 080f 	bics.w	r8, r8, #15
 8006bf8:	d04f      	beq.n	8006c9a <_strtod_l+0x522>
 8006bfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006bfe:	dd22      	ble.n	8006c46 <_strtod_l+0x4ce>
 8006c00:	2500      	movs	r5, #0
 8006c02:	462e      	mov	r6, r5
 8006c04:	9507      	str	r5, [sp, #28]
 8006c06:	9505      	str	r5, [sp, #20]
 8006c08:	2322      	movs	r3, #34	; 0x22
 8006c0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006d24 <_strtod_l+0x5ac>
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	f04f 0a00 	mov.w	sl, #0
 8006c14:	9b07      	ldr	r3, [sp, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f43f adf2 	beq.w	8006800 <_strtod_l+0x88>
 8006c1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f001 f820 	bl	8007c64 <_Bfree>
 8006c24:	9905      	ldr	r1, [sp, #20]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f001 f81c 	bl	8007c64 <_Bfree>
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f001 f818 	bl	8007c64 <_Bfree>
 8006c34:	9907      	ldr	r1, [sp, #28]
 8006c36:	4620      	mov	r0, r4
 8006c38:	f001 f814 	bl	8007c64 <_Bfree>
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f001 f810 	bl	8007c64 <_Bfree>
 8006c44:	e5dc      	b.n	8006800 <_strtod_l+0x88>
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <_strtod_l+0x5a8>)
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006c50:	4650      	mov	r0, sl
 8006c52:	4659      	mov	r1, fp
 8006c54:	4699      	mov	r9, r3
 8006c56:	f1b8 0f01 	cmp.w	r8, #1
 8006c5a:	dc21      	bgt.n	8006ca0 <_strtod_l+0x528>
 8006c5c:	b10b      	cbz	r3, 8006c62 <_strtod_l+0x4ea>
 8006c5e:	4682      	mov	sl, r0
 8006c60:	468b      	mov	fp, r1
 8006c62:	4b2f      	ldr	r3, [pc, #188]	; (8006d20 <_strtod_l+0x5a8>)
 8006c64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006c68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	465b      	mov	r3, fp
 8006c70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006c74:	f7f9 fcd0 	bl	8000618 <__aeabi_dmul>
 8006c78:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <_strtod_l+0x5ac>)
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	492a      	ldr	r1, [pc, #168]	; (8006d28 <_strtod_l+0x5b0>)
 8006c80:	428b      	cmp	r3, r1
 8006c82:	4682      	mov	sl, r0
 8006c84:	d8bc      	bhi.n	8006c00 <_strtod_l+0x488>
 8006c86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c8a:	428b      	cmp	r3, r1
 8006c8c:	bf86      	itte	hi
 8006c8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006d2c <_strtod_l+0x5b4>
 8006c92:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	e084      	b.n	8006daa <_strtod_l+0x632>
 8006ca0:	f018 0f01 	tst.w	r8, #1
 8006ca4:	d005      	beq.n	8006cb2 <_strtod_l+0x53a>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fcb4 	bl	8000618 <__aeabi_dmul>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	9a04      	ldr	r2, [sp, #16]
 8006cb4:	3208      	adds	r2, #8
 8006cb6:	f109 0901 	add.w	r9, r9, #1
 8006cba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cbe:	9204      	str	r2, [sp, #16]
 8006cc0:	e7c9      	b.n	8006c56 <_strtod_l+0x4de>
 8006cc2:	d0ea      	beq.n	8006c9a <_strtod_l+0x522>
 8006cc4:	f1c8 0800 	rsb	r8, r8, #0
 8006cc8:	f018 020f 	ands.w	r2, r8, #15
 8006ccc:	d00a      	beq.n	8006ce4 <_strtod_l+0x56c>
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <_strtod_l+0x5a4>)
 8006cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	4659      	mov	r1, fp
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 fdc6 	bl	800086c <__aeabi_ddiv>
 8006ce0:	4682      	mov	sl, r0
 8006ce2:	468b      	mov	fp, r1
 8006ce4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ce8:	d0d7      	beq.n	8006c9a <_strtod_l+0x522>
 8006cea:	f1b8 0f1f 	cmp.w	r8, #31
 8006cee:	dd1f      	ble.n	8006d30 <_strtod_l+0x5b8>
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	462e      	mov	r6, r5
 8006cf4:	9507      	str	r5, [sp, #28]
 8006cf6:	9505      	str	r5, [sp, #20]
 8006cf8:	2322      	movs	r3, #34	; 0x22
 8006cfa:	f04f 0a00 	mov.w	sl, #0
 8006cfe:	f04f 0b00 	mov.w	fp, #0
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	e786      	b.n	8006c14 <_strtod_l+0x49c>
 8006d06:	bf00      	nop
 8006d08:	08009951 	.word	0x08009951
 8006d0c:	08009968 	.word	0x08009968
 8006d10:	08009948 	.word	0x08009948
 8006d14:	0800994b 	.word	0x0800994b
 8006d18:	08009a57 	.word	0x08009a57
 8006d1c:	08009b68 	.word	0x08009b68
 8006d20:	08009b40 	.word	0x08009b40
 8006d24:	7ff00000 	.word	0x7ff00000
 8006d28:	7ca00000 	.word	0x7ca00000
 8006d2c:	7fefffff 	.word	0x7fefffff
 8006d30:	f018 0310 	ands.w	r3, r8, #16
 8006d34:	bf18      	it	ne
 8006d36:	236a      	movne	r3, #106	; 0x6a
 8006d38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80070e8 <_strtod_l+0x970>
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	4650      	mov	r0, sl
 8006d40:	4659      	mov	r1, fp
 8006d42:	2300      	movs	r3, #0
 8006d44:	f018 0f01 	tst.w	r8, #1
 8006d48:	d004      	beq.n	8006d54 <_strtod_l+0x5dc>
 8006d4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d4e:	f7f9 fc63 	bl	8000618 <__aeabi_dmul>
 8006d52:	2301      	movs	r3, #1
 8006d54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006d58:	f109 0908 	add.w	r9, r9, #8
 8006d5c:	d1f2      	bne.n	8006d44 <_strtod_l+0x5cc>
 8006d5e:	b10b      	cbz	r3, 8006d64 <_strtod_l+0x5ec>
 8006d60:	4682      	mov	sl, r0
 8006d62:	468b      	mov	fp, r1
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	b1c3      	cbz	r3, 8006d9a <_strtod_l+0x622>
 8006d68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	4659      	mov	r1, fp
 8006d74:	dd11      	ble.n	8006d9a <_strtod_l+0x622>
 8006d76:	2b1f      	cmp	r3, #31
 8006d78:	f340 8124 	ble.w	8006fc4 <_strtod_l+0x84c>
 8006d7c:	2b34      	cmp	r3, #52	; 0x34
 8006d7e:	bfde      	ittt	le
 8006d80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d84:	f04f 33ff 	movle.w	r3, #4294967295
 8006d88:	fa03 f202 	lslle.w	r2, r3, r2
 8006d8c:	f04f 0a00 	mov.w	sl, #0
 8006d90:	bfcc      	ite	gt
 8006d92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006d96:	ea02 0b01 	andle.w	fp, r2, r1
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4650      	mov	r0, sl
 8006da0:	4659      	mov	r1, fp
 8006da2:	f7f9 fea1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d1a2      	bne.n	8006cf0 <_strtod_l+0x578>
 8006daa:	9b07      	ldr	r3, [sp, #28]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	9908      	ldr	r1, [sp, #32]
 8006db0:	462b      	mov	r3, r5
 8006db2:	463a      	mov	r2, r7
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 ffbd 	bl	8007d34 <__s2b>
 8006dba:	9007      	str	r0, [sp, #28]
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f43f af1f 	beq.w	8006c00 <_strtod_l+0x488>
 8006dc2:	9b05      	ldr	r3, [sp, #20]
 8006dc4:	1b9e      	subs	r6, r3, r6
 8006dc6:	9b06      	ldr	r3, [sp, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bfb4      	ite	lt
 8006dcc:	4633      	movlt	r3, r6
 8006dce:	2300      	movge	r3, #0
 8006dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8006dd2:	9b06      	ldr	r3, [sp, #24]
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006dda:	9312      	str	r3, [sp, #72]	; 0x48
 8006ddc:	462e      	mov	r6, r5
 8006dde:	9b07      	ldr	r3, [sp, #28]
 8006de0:	4620      	mov	r0, r4
 8006de2:	6859      	ldr	r1, [r3, #4]
 8006de4:	f000 fefe 	bl	8007be4 <_Balloc>
 8006de8:	9005      	str	r0, [sp, #20]
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f43f af0c 	beq.w	8006c08 <_strtod_l+0x490>
 8006df0:	9b07      	ldr	r3, [sp, #28]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	3202      	adds	r2, #2
 8006df6:	f103 010c 	add.w	r1, r3, #12
 8006dfa:	0092      	lsls	r2, r2, #2
 8006dfc:	300c      	adds	r0, #12
 8006dfe:	f000 fee3 	bl	8007bc8 <memcpy>
 8006e02:	ec4b ab10 	vmov	d0, sl, fp
 8006e06:	aa1a      	add	r2, sp, #104	; 0x68
 8006e08:	a919      	add	r1, sp, #100	; 0x64
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f001 fad8 	bl	80083c0 <__d2b>
 8006e10:	ec4b ab18 	vmov	d8, sl, fp
 8006e14:	9018      	str	r0, [sp, #96]	; 0x60
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f43f aef6 	beq.w	8006c08 <_strtod_l+0x490>
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 f822 	bl	8007e68 <__i2b>
 8006e24:	4606      	mov	r6, r0
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f43f aeee 	beq.w	8006c08 <_strtod_l+0x490>
 8006e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e2e:	9904      	ldr	r1, [sp, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfab      	itete	ge
 8006e34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006e36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006e38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006e3e:	bfac      	ite	ge
 8006e40:	eb03 0902 	addge.w	r9, r3, r2
 8006e44:	1ad7      	sublt	r7, r2, r3
 8006e46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e48:	eba3 0801 	sub.w	r8, r3, r1
 8006e4c:	4490      	add	r8, r2
 8006e4e:	4ba1      	ldr	r3, [pc, #644]	; (80070d4 <_strtod_l+0x95c>)
 8006e50:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e54:	4598      	cmp	r8, r3
 8006e56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e5a:	f280 80c7 	bge.w	8006fec <_strtod_l+0x874>
 8006e5e:	eba3 0308 	sub.w	r3, r3, r8
 8006e62:	2b1f      	cmp	r3, #31
 8006e64:	eba2 0203 	sub.w	r2, r2, r3
 8006e68:	f04f 0101 	mov.w	r1, #1
 8006e6c:	f300 80b1 	bgt.w	8006fd2 <_strtod_l+0x85a>
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	930d      	str	r3, [sp, #52]	; 0x34
 8006e76:	2300      	movs	r3, #0
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	eb09 0802 	add.w	r8, r9, r2
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	45c1      	cmp	r9, r8
 8006e82:	4417      	add	r7, r2
 8006e84:	441f      	add	r7, r3
 8006e86:	464b      	mov	r3, r9
 8006e88:	bfa8      	it	ge
 8006e8a:	4643      	movge	r3, r8
 8006e8c:	42bb      	cmp	r3, r7
 8006e8e:	bfa8      	it	ge
 8006e90:	463b      	movge	r3, r7
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfc2      	ittt	gt
 8006e96:	eba8 0803 	subgt.w	r8, r8, r3
 8006e9a:	1aff      	subgt	r7, r7, r3
 8006e9c:	eba9 0903 	subgt.w	r9, r9, r3
 8006ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dd17      	ble.n	8006ed6 <_strtod_l+0x75e>
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f001 f89c 	bl	8007fe8 <__pow5mult>
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f43f aea8 	beq.w	8006c08 <_strtod_l+0x490>
 8006eb8:	4601      	mov	r1, r0
 8006eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 ffe9 	bl	8007e94 <__multiply>
 8006ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f43f ae9f 	beq.w	8006c08 <_strtod_l+0x490>
 8006eca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fec9 	bl	8007c64 <_Bfree>
 8006ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed4:	9318      	str	r3, [sp, #96]	; 0x60
 8006ed6:	f1b8 0f00 	cmp.w	r8, #0
 8006eda:	f300 808c 	bgt.w	8006ff6 <_strtod_l+0x87e>
 8006ede:	9b06      	ldr	r3, [sp, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dd08      	ble.n	8006ef6 <_strtod_l+0x77e>
 8006ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ee6:	9905      	ldr	r1, [sp, #20]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f001 f87d 	bl	8007fe8 <__pow5mult>
 8006eee:	9005      	str	r0, [sp, #20]
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f43f ae89 	beq.w	8006c08 <_strtod_l+0x490>
 8006ef6:	2f00      	cmp	r7, #0
 8006ef8:	dd08      	ble.n	8006f0c <_strtod_l+0x794>
 8006efa:	9905      	ldr	r1, [sp, #20]
 8006efc:	463a      	mov	r2, r7
 8006efe:	4620      	mov	r0, r4
 8006f00:	f001 f8cc 	bl	800809c <__lshift>
 8006f04:	9005      	str	r0, [sp, #20]
 8006f06:	2800      	cmp	r0, #0
 8006f08:	f43f ae7e 	beq.w	8006c08 <_strtod_l+0x490>
 8006f0c:	f1b9 0f00 	cmp.w	r9, #0
 8006f10:	dd08      	ble.n	8006f24 <_strtod_l+0x7ac>
 8006f12:	4631      	mov	r1, r6
 8006f14:	464a      	mov	r2, r9
 8006f16:	4620      	mov	r0, r4
 8006f18:	f001 f8c0 	bl	800809c <__lshift>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f ae72 	beq.w	8006c08 <_strtod_l+0x490>
 8006f24:	9a05      	ldr	r2, [sp, #20]
 8006f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f001 f943 	bl	80081b4 <__mdiff>
 8006f2e:	4605      	mov	r5, r0
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f43f ae69 	beq.w	8006c08 <_strtod_l+0x490>
 8006f36:	68c3      	ldr	r3, [r0, #12]
 8006f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60c3      	str	r3, [r0, #12]
 8006f3e:	4631      	mov	r1, r6
 8006f40:	f001 f91c 	bl	800817c <__mcmp>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	da60      	bge.n	800700a <_strtod_l+0x892>
 8006f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f4e:	f040 8082 	bne.w	8007056 <_strtod_l+0x8de>
 8006f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d17d      	bne.n	8007056 <_strtod_l+0x8de>
 8006f5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f5e:	0d1b      	lsrs	r3, r3, #20
 8006f60:	051b      	lsls	r3, r3, #20
 8006f62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f66:	d976      	bls.n	8007056 <_strtod_l+0x8de>
 8006f68:	696b      	ldr	r3, [r5, #20]
 8006f6a:	b913      	cbnz	r3, 8006f72 <_strtod_l+0x7fa>
 8006f6c:	692b      	ldr	r3, [r5, #16]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	dd71      	ble.n	8007056 <_strtod_l+0x8de>
 8006f72:	4629      	mov	r1, r5
 8006f74:	2201      	movs	r2, #1
 8006f76:	4620      	mov	r0, r4
 8006f78:	f001 f890 	bl	800809c <__lshift>
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4605      	mov	r5, r0
 8006f80:	f001 f8fc 	bl	800817c <__mcmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	dd66      	ble.n	8007056 <_strtod_l+0x8de>
 8006f88:	9904      	ldr	r1, [sp, #16]
 8006f8a:	4a53      	ldr	r2, [pc, #332]	; (80070d8 <_strtod_l+0x960>)
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	f000 8081 	beq.w	8007096 <_strtod_l+0x91e>
 8006f94:	ea02 010b 	and.w	r1, r2, fp
 8006f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f9c:	dc7b      	bgt.n	8007096 <_strtod_l+0x91e>
 8006f9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006fa2:	f77f aea9 	ble.w	8006cf8 <_strtod_l+0x580>
 8006fa6:	4b4d      	ldr	r3, [pc, #308]	; (80070dc <_strtod_l+0x964>)
 8006fa8:	4650      	mov	r0, sl
 8006faa:	4659      	mov	r1, fp
 8006fac:	2200      	movs	r2, #0
 8006fae:	f7f9 fb33 	bl	8000618 <__aeabi_dmul>
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4303      	orrs	r3, r0
 8006fb6:	bf08      	it	eq
 8006fb8:	2322      	moveq	r3, #34	; 0x22
 8006fba:	4682      	mov	sl, r0
 8006fbc:	468b      	mov	fp, r1
 8006fbe:	bf08      	it	eq
 8006fc0:	6023      	streq	r3, [r4, #0]
 8006fc2:	e62b      	b.n	8006c1c <_strtod_l+0x4a4>
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	ea03 0a0a 	and.w	sl, r3, sl
 8006fd0:	e6e3      	b.n	8006d9a <_strtod_l+0x622>
 8006fd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006fd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006fda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006fde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006fe2:	fa01 f308 	lsl.w	r3, r1, r8
 8006fe6:	9308      	str	r3, [sp, #32]
 8006fe8:	910d      	str	r1, [sp, #52]	; 0x34
 8006fea:	e746      	b.n	8006e7a <_strtod_l+0x702>
 8006fec:	2300      	movs	r3, #0
 8006fee:	9308      	str	r3, [sp, #32]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ff4:	e741      	b.n	8006e7a <_strtod_l+0x702>
 8006ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f001 f84e 	bl	800809c <__lshift>
 8007000:	9018      	str	r0, [sp, #96]	; 0x60
 8007002:	2800      	cmp	r0, #0
 8007004:	f47f af6b 	bne.w	8006ede <_strtod_l+0x766>
 8007008:	e5fe      	b.n	8006c08 <_strtod_l+0x490>
 800700a:	465f      	mov	r7, fp
 800700c:	d16e      	bne.n	80070ec <_strtod_l+0x974>
 800700e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007014:	b342      	cbz	r2, 8007068 <_strtod_l+0x8f0>
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <_strtod_l+0x968>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d128      	bne.n	800706e <_strtod_l+0x8f6>
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	4651      	mov	r1, sl
 8007020:	b1eb      	cbz	r3, 800705e <_strtod_l+0x8e6>
 8007022:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <_strtod_l+0x960>)
 8007024:	403b      	ands	r3, r7
 8007026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800702a:	f04f 32ff 	mov.w	r2, #4294967295
 800702e:	d819      	bhi.n	8007064 <_strtod_l+0x8ec>
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	4299      	cmp	r1, r3
 800703c:	d117      	bne.n	800706e <_strtod_l+0x8f6>
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <_strtod_l+0x96c>)
 8007040:	429f      	cmp	r7, r3
 8007042:	d102      	bne.n	800704a <_strtod_l+0x8d2>
 8007044:	3101      	adds	r1, #1
 8007046:	f43f addf 	beq.w	8006c08 <_strtod_l+0x490>
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <_strtod_l+0x960>)
 800704c:	403b      	ands	r3, r7
 800704e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007052:	f04f 0a00 	mov.w	sl, #0
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1a4      	bne.n	8006fa6 <_strtod_l+0x82e>
 800705c:	e5de      	b.n	8006c1c <_strtod_l+0x4a4>
 800705e:	f04f 33ff 	mov.w	r3, #4294967295
 8007062:	e7ea      	b.n	800703a <_strtod_l+0x8c2>
 8007064:	4613      	mov	r3, r2
 8007066:	e7e8      	b.n	800703a <_strtod_l+0x8c2>
 8007068:	ea53 030a 	orrs.w	r3, r3, sl
 800706c:	d08c      	beq.n	8006f88 <_strtod_l+0x810>
 800706e:	9b08      	ldr	r3, [sp, #32]
 8007070:	b1db      	cbz	r3, 80070aa <_strtod_l+0x932>
 8007072:	423b      	tst	r3, r7
 8007074:	d0ef      	beq.n	8007056 <_strtod_l+0x8de>
 8007076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	4650      	mov	r0, sl
 800707c:	4659      	mov	r1, fp
 800707e:	b1c3      	cbz	r3, 80070b2 <_strtod_l+0x93a>
 8007080:	f7ff fb5c 	bl	800673c <sulp>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	ec51 0b18 	vmov	r0, r1, d8
 800708c:	f7f9 f90e 	bl	80002ac <__adddf3>
 8007090:	4682      	mov	sl, r0
 8007092:	468b      	mov	fp, r1
 8007094:	e7df      	b.n	8007056 <_strtod_l+0x8de>
 8007096:	4013      	ands	r3, r2
 8007098:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800709c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070a4:	f04f 3aff 	mov.w	sl, #4294967295
 80070a8:	e7d5      	b.n	8007056 <_strtod_l+0x8de>
 80070aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ac:	ea13 0f0a 	tst.w	r3, sl
 80070b0:	e7e0      	b.n	8007074 <_strtod_l+0x8fc>
 80070b2:	f7ff fb43 	bl	800673c <sulp>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	ec51 0b18 	vmov	r0, r1, d8
 80070be:	f7f9 f8f3 	bl	80002a8 <__aeabi_dsub>
 80070c2:	2200      	movs	r2, #0
 80070c4:	2300      	movs	r3, #0
 80070c6:	4682      	mov	sl, r0
 80070c8:	468b      	mov	fp, r1
 80070ca:	f7f9 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0c1      	beq.n	8007056 <_strtod_l+0x8de>
 80070d2:	e611      	b.n	8006cf8 <_strtod_l+0x580>
 80070d4:	fffffc02 	.word	0xfffffc02
 80070d8:	7ff00000 	.word	0x7ff00000
 80070dc:	39500000 	.word	0x39500000
 80070e0:	000fffff 	.word	0x000fffff
 80070e4:	7fefffff 	.word	0x7fefffff
 80070e8:	08009980 	.word	0x08009980
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	f001 f9c2 	bl	8008478 <__ratio>
 80070f4:	ec59 8b10 	vmov	r8, r9, d0
 80070f8:	ee10 0a10 	vmov	r0, s0
 80070fc:	2200      	movs	r2, #0
 80070fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007102:	4649      	mov	r1, r9
 8007104:	f7f9 fd04 	bl	8000b10 <__aeabi_dcmple>
 8007108:	2800      	cmp	r0, #0
 800710a:	d07a      	beq.n	8007202 <_strtod_l+0xa8a>
 800710c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d04a      	beq.n	80071a8 <_strtod_l+0xa30>
 8007112:	4b95      	ldr	r3, [pc, #596]	; (8007368 <_strtod_l+0xbf0>)
 8007114:	2200      	movs	r2, #0
 8007116:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800711a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007368 <_strtod_l+0xbf0>
 800711e:	f04f 0800 	mov.w	r8, #0
 8007122:	4b92      	ldr	r3, [pc, #584]	; (800736c <_strtod_l+0xbf4>)
 8007124:	403b      	ands	r3, r7
 8007126:	930d      	str	r3, [sp, #52]	; 0x34
 8007128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800712a:	4b91      	ldr	r3, [pc, #580]	; (8007370 <_strtod_l+0xbf8>)
 800712c:	429a      	cmp	r2, r3
 800712e:	f040 80b0 	bne.w	8007292 <_strtod_l+0xb1a>
 8007132:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007136:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800713a:	ec4b ab10 	vmov	d0, sl, fp
 800713e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007142:	f001 f8c1 	bl	80082c8 <__ulp>
 8007146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800714a:	ec53 2b10 	vmov	r2, r3, d0
 800714e:	f7f9 fa63 	bl	8000618 <__aeabi_dmul>
 8007152:	4652      	mov	r2, sl
 8007154:	465b      	mov	r3, fp
 8007156:	f7f9 f8a9 	bl	80002ac <__adddf3>
 800715a:	460b      	mov	r3, r1
 800715c:	4983      	ldr	r1, [pc, #524]	; (800736c <_strtod_l+0xbf4>)
 800715e:	4a85      	ldr	r2, [pc, #532]	; (8007374 <_strtod_l+0xbfc>)
 8007160:	4019      	ands	r1, r3
 8007162:	4291      	cmp	r1, r2
 8007164:	4682      	mov	sl, r0
 8007166:	d960      	bls.n	800722a <_strtod_l+0xab2>
 8007168:	ee18 3a90 	vmov	r3, s17
 800716c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007170:	4293      	cmp	r3, r2
 8007172:	d104      	bne.n	800717e <_strtod_l+0xa06>
 8007174:	ee18 3a10 	vmov	r3, s16
 8007178:	3301      	adds	r3, #1
 800717a:	f43f ad45 	beq.w	8006c08 <_strtod_l+0x490>
 800717e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007380 <_strtod_l+0xc08>
 8007182:	f04f 3aff 	mov.w	sl, #4294967295
 8007186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fd6b 	bl	8007c64 <_Bfree>
 800718e:	9905      	ldr	r1, [sp, #20]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fd67 	bl	8007c64 <_Bfree>
 8007196:	4631      	mov	r1, r6
 8007198:	4620      	mov	r0, r4
 800719a:	f000 fd63 	bl	8007c64 <_Bfree>
 800719e:	4629      	mov	r1, r5
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fd5f 	bl	8007c64 <_Bfree>
 80071a6:	e61a      	b.n	8006dde <_strtod_l+0x666>
 80071a8:	f1ba 0f00 	cmp.w	sl, #0
 80071ac:	d11b      	bne.n	80071e6 <_strtod_l+0xa6e>
 80071ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071b2:	b9f3      	cbnz	r3, 80071f2 <_strtod_l+0xa7a>
 80071b4:	4b6c      	ldr	r3, [pc, #432]	; (8007368 <_strtod_l+0xbf0>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	f7f9 fc9e 	bl	8000afc <__aeabi_dcmplt>
 80071c0:	b9d0      	cbnz	r0, 80071f8 <_strtod_l+0xa80>
 80071c2:	4640      	mov	r0, r8
 80071c4:	4649      	mov	r1, r9
 80071c6:	4b6c      	ldr	r3, [pc, #432]	; (8007378 <_strtod_l+0xc00>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f9 fa25 	bl	8000618 <__aeabi_dmul>
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80071da:	9315      	str	r3, [sp, #84]	; 0x54
 80071dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80071e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80071e4:	e79d      	b.n	8007122 <_strtod_l+0x9aa>
 80071e6:	f1ba 0f01 	cmp.w	sl, #1
 80071ea:	d102      	bne.n	80071f2 <_strtod_l+0xa7a>
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	f43f ad83 	beq.w	8006cf8 <_strtod_l+0x580>
 80071f2:	4b62      	ldr	r3, [pc, #392]	; (800737c <_strtod_l+0xc04>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	e78e      	b.n	8007116 <_strtod_l+0x99e>
 80071f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007378 <_strtod_l+0xc00>
 80071fc:	f04f 0800 	mov.w	r8, #0
 8007200:	e7e7      	b.n	80071d2 <_strtod_l+0xa5a>
 8007202:	4b5d      	ldr	r3, [pc, #372]	; (8007378 <_strtod_l+0xc00>)
 8007204:	4640      	mov	r0, r8
 8007206:	4649      	mov	r1, r9
 8007208:	2200      	movs	r2, #0
 800720a:	f7f9 fa05 	bl	8000618 <__aeabi_dmul>
 800720e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007210:	4680      	mov	r8, r0
 8007212:	4689      	mov	r9, r1
 8007214:	b933      	cbnz	r3, 8007224 <_strtod_l+0xaac>
 8007216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800721a:	900e      	str	r0, [sp, #56]	; 0x38
 800721c:	930f      	str	r3, [sp, #60]	; 0x3c
 800721e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007222:	e7dd      	b.n	80071e0 <_strtod_l+0xa68>
 8007224:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007228:	e7f9      	b.n	800721e <_strtod_l+0xaa6>
 800722a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1a8      	bne.n	8007186 <_strtod_l+0xa0e>
 8007234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800723a:	0d1b      	lsrs	r3, r3, #20
 800723c:	051b      	lsls	r3, r3, #20
 800723e:	429a      	cmp	r2, r3
 8007240:	d1a1      	bne.n	8007186 <_strtod_l+0xa0e>
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f7f9 fd09 	bl	8000c5c <__aeabi_d2lz>
 800724a:	f7f9 f9b7 	bl	80005bc <__aeabi_l2d>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f9 f827 	bl	80002a8 <__aeabi_dsub>
 800725a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800725c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007260:	ea43 030a 	orr.w	r3, r3, sl
 8007264:	4313      	orrs	r3, r2
 8007266:	4680      	mov	r8, r0
 8007268:	4689      	mov	r9, r1
 800726a:	d055      	beq.n	8007318 <_strtod_l+0xba0>
 800726c:	a336      	add	r3, pc, #216	; (adr r3, 8007348 <_strtod_l+0xbd0>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f7f9 fc43 	bl	8000afc <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f47f acd0 	bne.w	8006c1c <_strtod_l+0x4a4>
 800727c:	a334      	add	r3, pc, #208	; (adr r3, 8007350 <_strtod_l+0xbd8>)
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	4640      	mov	r0, r8
 8007284:	4649      	mov	r1, r9
 8007286:	f7f9 fc57 	bl	8000b38 <__aeabi_dcmpgt>
 800728a:	2800      	cmp	r0, #0
 800728c:	f43f af7b 	beq.w	8007186 <_strtod_l+0xa0e>
 8007290:	e4c4      	b.n	8006c1c <_strtod_l+0x4a4>
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	b333      	cbz	r3, 80072e4 <_strtod_l+0xb6c>
 8007296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007298:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800729c:	d822      	bhi.n	80072e4 <_strtod_l+0xb6c>
 800729e:	a32e      	add	r3, pc, #184	; (adr r3, 8007358 <_strtod_l+0xbe0>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 fc32 	bl	8000b10 <__aeabi_dcmple>
 80072ac:	b1a0      	cbz	r0, 80072d8 <_strtod_l+0xb60>
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	f7f9 fc4b 	bl	8000b4c <__aeabi_d2uiz>
 80072b6:	2801      	cmp	r0, #1
 80072b8:	bf38      	it	cc
 80072ba:	2001      	movcc	r0, #1
 80072bc:	f7f9 f932 	bl	8000524 <__aeabi_ui2d>
 80072c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c2:	4680      	mov	r8, r0
 80072c4:	4689      	mov	r9, r1
 80072c6:	bb23      	cbnz	r3, 8007312 <_strtod_l+0xb9a>
 80072c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072cc:	9010      	str	r0, [sp, #64]	; 0x40
 80072ce:	9311      	str	r3, [sp, #68]	; 0x44
 80072d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	9309      	str	r3, [sp, #36]	; 0x24
 80072e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072e8:	eeb0 0a48 	vmov.f32	s0, s16
 80072ec:	eef0 0a68 	vmov.f32	s1, s17
 80072f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072f4:	f000 ffe8 	bl	80082c8 <__ulp>
 80072f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072fc:	ec53 2b10 	vmov	r2, r3, d0
 8007300:	f7f9 f98a 	bl	8000618 <__aeabi_dmul>
 8007304:	ec53 2b18 	vmov	r2, r3, d8
 8007308:	f7f8 ffd0 	bl	80002ac <__adddf3>
 800730c:	4682      	mov	sl, r0
 800730e:	468b      	mov	fp, r1
 8007310:	e78d      	b.n	800722e <_strtod_l+0xab6>
 8007312:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007316:	e7db      	b.n	80072d0 <_strtod_l+0xb58>
 8007318:	a311      	add	r3, pc, #68	; (adr r3, 8007360 <_strtod_l+0xbe8>)
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f7f9 fbed 	bl	8000afc <__aeabi_dcmplt>
 8007322:	e7b2      	b.n	800728a <_strtod_l+0xb12>
 8007324:	2300      	movs	r3, #0
 8007326:	930a      	str	r3, [sp, #40]	; 0x28
 8007328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800732a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	f7ff ba6b 	b.w	8006808 <_strtod_l+0x90>
 8007332:	2a65      	cmp	r2, #101	; 0x65
 8007334:	f43f ab5f 	beq.w	80069f6 <_strtod_l+0x27e>
 8007338:	2a45      	cmp	r2, #69	; 0x45
 800733a:	f43f ab5c 	beq.w	80069f6 <_strtod_l+0x27e>
 800733e:	2301      	movs	r3, #1
 8007340:	f7ff bb94 	b.w	8006a6c <_strtod_l+0x2f4>
 8007344:	f3af 8000 	nop.w
 8007348:	94a03595 	.word	0x94a03595
 800734c:	3fdfffff 	.word	0x3fdfffff
 8007350:	35afe535 	.word	0x35afe535
 8007354:	3fe00000 	.word	0x3fe00000
 8007358:	ffc00000 	.word	0xffc00000
 800735c:	41dfffff 	.word	0x41dfffff
 8007360:	94a03595 	.word	0x94a03595
 8007364:	3fcfffff 	.word	0x3fcfffff
 8007368:	3ff00000 	.word	0x3ff00000
 800736c:	7ff00000 	.word	0x7ff00000
 8007370:	7fe00000 	.word	0x7fe00000
 8007374:	7c9fffff 	.word	0x7c9fffff
 8007378:	3fe00000 	.word	0x3fe00000
 800737c:	bff00000 	.word	0xbff00000
 8007380:	7fefffff 	.word	0x7fefffff

08007384 <strtod>:
 8007384:	460a      	mov	r2, r1
 8007386:	4601      	mov	r1, r0
 8007388:	4802      	ldr	r0, [pc, #8]	; (8007394 <strtod+0x10>)
 800738a:	4b03      	ldr	r3, [pc, #12]	; (8007398 <strtod+0x14>)
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f7ff b9f3 	b.w	8006778 <_strtod_l>
 8007392:	bf00      	nop
 8007394:	20000020 	.word	0x20000020
 8007398:	20000088 	.word	0x20000088

0800739c <strtok>:
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <strtok+0x5c>)
 800739e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073a0:	681e      	ldr	r6, [r3, #0]
 80073a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80073a4:	4605      	mov	r5, r0
 80073a6:	b9fc      	cbnz	r4, 80073e8 <strtok+0x4c>
 80073a8:	2050      	movs	r0, #80	; 0x50
 80073aa:	9101      	str	r1, [sp, #4]
 80073ac:	f000 fbf2 	bl	8007b94 <malloc>
 80073b0:	9901      	ldr	r1, [sp, #4]
 80073b2:	65b0      	str	r0, [r6, #88]	; 0x58
 80073b4:	4602      	mov	r2, r0
 80073b6:	b920      	cbnz	r0, 80073c2 <strtok+0x26>
 80073b8:	4b10      	ldr	r3, [pc, #64]	; (80073fc <strtok+0x60>)
 80073ba:	4811      	ldr	r0, [pc, #68]	; (8007400 <strtok+0x64>)
 80073bc:	2157      	movs	r1, #87	; 0x57
 80073be:	f000 f849 	bl	8007454 <__assert_func>
 80073c2:	e9c0 4400 	strd	r4, r4, [r0]
 80073c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80073ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80073ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80073d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80073d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80073da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80073de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80073e2:	6184      	str	r4, [r0, #24]
 80073e4:	7704      	strb	r4, [r0, #28]
 80073e6:	6244      	str	r4, [r0, #36]	; 0x24
 80073e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80073ea:	2301      	movs	r3, #1
 80073ec:	4628      	mov	r0, r5
 80073ee:	b002      	add	sp, #8
 80073f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073f4:	f000 b806 	b.w	8007404 <__strtok_r>
 80073f8:	20000020 	.word	0x20000020
 80073fc:	080099a8 	.word	0x080099a8
 8007400:	080099bf 	.word	0x080099bf

08007404 <__strtok_r>:
 8007404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007406:	b908      	cbnz	r0, 800740c <__strtok_r+0x8>
 8007408:	6810      	ldr	r0, [r2, #0]
 800740a:	b188      	cbz	r0, 8007430 <__strtok_r+0x2c>
 800740c:	4604      	mov	r4, r0
 800740e:	4620      	mov	r0, r4
 8007410:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007414:	460f      	mov	r7, r1
 8007416:	f817 6b01 	ldrb.w	r6, [r7], #1
 800741a:	b91e      	cbnz	r6, 8007424 <__strtok_r+0x20>
 800741c:	b965      	cbnz	r5, 8007438 <__strtok_r+0x34>
 800741e:	6015      	str	r5, [r2, #0]
 8007420:	4628      	mov	r0, r5
 8007422:	e005      	b.n	8007430 <__strtok_r+0x2c>
 8007424:	42b5      	cmp	r5, r6
 8007426:	d1f6      	bne.n	8007416 <__strtok_r+0x12>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f0      	bne.n	800740e <__strtok_r+0xa>
 800742c:	6014      	str	r4, [r2, #0]
 800742e:	7003      	strb	r3, [r0, #0]
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	461c      	mov	r4, r3
 8007434:	e00c      	b.n	8007450 <__strtok_r+0x4c>
 8007436:	b915      	cbnz	r5, 800743e <__strtok_r+0x3a>
 8007438:	f814 3b01 	ldrb.w	r3, [r4], #1
 800743c:	460e      	mov	r6, r1
 800743e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007442:	42ab      	cmp	r3, r5
 8007444:	d1f7      	bne.n	8007436 <__strtok_r+0x32>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f3      	beq.n	8007432 <__strtok_r+0x2e>
 800744a:	2300      	movs	r3, #0
 800744c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007450:	6014      	str	r4, [r2, #0]
 8007452:	e7ed      	b.n	8007430 <__strtok_r+0x2c>

08007454 <__assert_func>:
 8007454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007456:	4614      	mov	r4, r2
 8007458:	461a      	mov	r2, r3
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <__assert_func+0x2c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4605      	mov	r5, r0
 8007460:	68d8      	ldr	r0, [r3, #12]
 8007462:	b14c      	cbz	r4, 8007478 <__assert_func+0x24>
 8007464:	4b07      	ldr	r3, [pc, #28]	; (8007484 <__assert_func+0x30>)
 8007466:	9100      	str	r1, [sp, #0]
 8007468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800746c:	4906      	ldr	r1, [pc, #24]	; (8007488 <__assert_func+0x34>)
 800746e:	462b      	mov	r3, r5
 8007470:	f000 f80e 	bl	8007490 <fiprintf>
 8007474:	f001 feb2 	bl	80091dc <abort>
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <__assert_func+0x38>)
 800747a:	461c      	mov	r4, r3
 800747c:	e7f3      	b.n	8007466 <__assert_func+0x12>
 800747e:	bf00      	nop
 8007480:	20000020 	.word	0x20000020
 8007484:	08009a1c 	.word	0x08009a1c
 8007488:	08009a29 	.word	0x08009a29
 800748c:	08009a57 	.word	0x08009a57

08007490 <fiprintf>:
 8007490:	b40e      	push	{r1, r2, r3}
 8007492:	b503      	push	{r0, r1, lr}
 8007494:	4601      	mov	r1, r0
 8007496:	ab03      	add	r3, sp, #12
 8007498:	4805      	ldr	r0, [pc, #20]	; (80074b0 <fiprintf+0x20>)
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	f001 fadd 	bl	8008a60 <_vfiprintf_r>
 80074a6:	b002      	add	sp, #8
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000020 	.word	0x20000020

080074b4 <rshift>:
 80074b4:	6903      	ldr	r3, [r0, #16]
 80074b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074c2:	f100 0414 	add.w	r4, r0, #20
 80074c6:	dd45      	ble.n	8007554 <rshift+0xa0>
 80074c8:	f011 011f 	ands.w	r1, r1, #31
 80074cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074d4:	d10c      	bne.n	80074f0 <rshift+0x3c>
 80074d6:	f100 0710 	add.w	r7, r0, #16
 80074da:	4629      	mov	r1, r5
 80074dc:	42b1      	cmp	r1, r6
 80074de:	d334      	bcc.n	800754a <rshift+0x96>
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	1eea      	subs	r2, r5, #3
 80074e6:	4296      	cmp	r6, r2
 80074e8:	bf38      	it	cc
 80074ea:	2300      	movcc	r3, #0
 80074ec:	4423      	add	r3, r4
 80074ee:	e015      	b.n	800751c <rshift+0x68>
 80074f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074f4:	f1c1 0820 	rsb	r8, r1, #32
 80074f8:	40cf      	lsrs	r7, r1
 80074fa:	f105 0e04 	add.w	lr, r5, #4
 80074fe:	46a1      	mov	r9, r4
 8007500:	4576      	cmp	r6, lr
 8007502:	46f4      	mov	ip, lr
 8007504:	d815      	bhi.n	8007532 <rshift+0x7e>
 8007506:	1a9a      	subs	r2, r3, r2
 8007508:	0092      	lsls	r2, r2, #2
 800750a:	3a04      	subs	r2, #4
 800750c:	3501      	adds	r5, #1
 800750e:	42ae      	cmp	r6, r5
 8007510:	bf38      	it	cc
 8007512:	2200      	movcc	r2, #0
 8007514:	18a3      	adds	r3, r4, r2
 8007516:	50a7      	str	r7, [r4, r2]
 8007518:	b107      	cbz	r7, 800751c <rshift+0x68>
 800751a:	3304      	adds	r3, #4
 800751c:	1b1a      	subs	r2, r3, r4
 800751e:	42a3      	cmp	r3, r4
 8007520:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007524:	bf08      	it	eq
 8007526:	2300      	moveq	r3, #0
 8007528:	6102      	str	r2, [r0, #16]
 800752a:	bf08      	it	eq
 800752c:	6143      	streq	r3, [r0, #20]
 800752e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007532:	f8dc c000 	ldr.w	ip, [ip]
 8007536:	fa0c fc08 	lsl.w	ip, ip, r8
 800753a:	ea4c 0707 	orr.w	r7, ip, r7
 800753e:	f849 7b04 	str.w	r7, [r9], #4
 8007542:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007546:	40cf      	lsrs	r7, r1
 8007548:	e7da      	b.n	8007500 <rshift+0x4c>
 800754a:	f851 cb04 	ldr.w	ip, [r1], #4
 800754e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007552:	e7c3      	b.n	80074dc <rshift+0x28>
 8007554:	4623      	mov	r3, r4
 8007556:	e7e1      	b.n	800751c <rshift+0x68>

08007558 <__hexdig_fun>:
 8007558:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800755c:	2b09      	cmp	r3, #9
 800755e:	d802      	bhi.n	8007566 <__hexdig_fun+0xe>
 8007560:	3820      	subs	r0, #32
 8007562:	b2c0      	uxtb	r0, r0
 8007564:	4770      	bx	lr
 8007566:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800756a:	2b05      	cmp	r3, #5
 800756c:	d801      	bhi.n	8007572 <__hexdig_fun+0x1a>
 800756e:	3847      	subs	r0, #71	; 0x47
 8007570:	e7f7      	b.n	8007562 <__hexdig_fun+0xa>
 8007572:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007576:	2b05      	cmp	r3, #5
 8007578:	d801      	bhi.n	800757e <__hexdig_fun+0x26>
 800757a:	3827      	subs	r0, #39	; 0x27
 800757c:	e7f1      	b.n	8007562 <__hexdig_fun+0xa>
 800757e:	2000      	movs	r0, #0
 8007580:	4770      	bx	lr
	...

08007584 <__gethex>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	ed2d 8b02 	vpush	{d8}
 800758c:	b089      	sub	sp, #36	; 0x24
 800758e:	ee08 0a10 	vmov	s16, r0
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	4bb4      	ldr	r3, [pc, #720]	; (8007868 <__gethex+0x2e4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	4618      	mov	r0, r3
 800759c:	468b      	mov	fp, r1
 800759e:	4690      	mov	r8, r2
 80075a0:	f7f8 fe20 	bl	80001e4 <strlen>
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	f8db 2000 	ldr.w	r2, [fp]
 80075aa:	4403      	add	r3, r0
 80075ac:	4682      	mov	sl, r0
 80075ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	1c93      	adds	r3, r2, #2
 80075b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075be:	32fe      	adds	r2, #254	; 0xfe
 80075c0:	18d1      	adds	r1, r2, r3
 80075c2:	461f      	mov	r7, r3
 80075c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075c8:	9100      	str	r1, [sp, #0]
 80075ca:	2830      	cmp	r0, #48	; 0x30
 80075cc:	d0f8      	beq.n	80075c0 <__gethex+0x3c>
 80075ce:	f7ff ffc3 	bl	8007558 <__hexdig_fun>
 80075d2:	4604      	mov	r4, r0
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d13a      	bne.n	800764e <__gethex+0xca>
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	4652      	mov	r2, sl
 80075dc:	4638      	mov	r0, r7
 80075de:	f001 fd1b 	bl	8009018 <strncmp>
 80075e2:	4605      	mov	r5, r0
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d168      	bne.n	80076ba <__gethex+0x136>
 80075e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80075ec:	eb07 060a 	add.w	r6, r7, sl
 80075f0:	f7ff ffb2 	bl	8007558 <__hexdig_fun>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d062      	beq.n	80076be <__gethex+0x13a>
 80075f8:	4633      	mov	r3, r6
 80075fa:	7818      	ldrb	r0, [r3, #0]
 80075fc:	2830      	cmp	r0, #48	; 0x30
 80075fe:	461f      	mov	r7, r3
 8007600:	f103 0301 	add.w	r3, r3, #1
 8007604:	d0f9      	beq.n	80075fa <__gethex+0x76>
 8007606:	f7ff ffa7 	bl	8007558 <__hexdig_fun>
 800760a:	2301      	movs	r3, #1
 800760c:	fab0 f480 	clz	r4, r0
 8007610:	0964      	lsrs	r4, r4, #5
 8007612:	4635      	mov	r5, r6
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	463a      	mov	r2, r7
 8007618:	4616      	mov	r6, r2
 800761a:	3201      	adds	r2, #1
 800761c:	7830      	ldrb	r0, [r6, #0]
 800761e:	f7ff ff9b 	bl	8007558 <__hexdig_fun>
 8007622:	2800      	cmp	r0, #0
 8007624:	d1f8      	bne.n	8007618 <__gethex+0x94>
 8007626:	9901      	ldr	r1, [sp, #4]
 8007628:	4652      	mov	r2, sl
 800762a:	4630      	mov	r0, r6
 800762c:	f001 fcf4 	bl	8009018 <strncmp>
 8007630:	b980      	cbnz	r0, 8007654 <__gethex+0xd0>
 8007632:	b94d      	cbnz	r5, 8007648 <__gethex+0xc4>
 8007634:	eb06 050a 	add.w	r5, r6, sl
 8007638:	462a      	mov	r2, r5
 800763a:	4616      	mov	r6, r2
 800763c:	3201      	adds	r2, #1
 800763e:	7830      	ldrb	r0, [r6, #0]
 8007640:	f7ff ff8a 	bl	8007558 <__hexdig_fun>
 8007644:	2800      	cmp	r0, #0
 8007646:	d1f8      	bne.n	800763a <__gethex+0xb6>
 8007648:	1bad      	subs	r5, r5, r6
 800764a:	00ad      	lsls	r5, r5, #2
 800764c:	e004      	b.n	8007658 <__gethex+0xd4>
 800764e:	2400      	movs	r4, #0
 8007650:	4625      	mov	r5, r4
 8007652:	e7e0      	b.n	8007616 <__gethex+0x92>
 8007654:	2d00      	cmp	r5, #0
 8007656:	d1f7      	bne.n	8007648 <__gethex+0xc4>
 8007658:	7833      	ldrb	r3, [r6, #0]
 800765a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800765e:	2b50      	cmp	r3, #80	; 0x50
 8007660:	d13b      	bne.n	80076da <__gethex+0x156>
 8007662:	7873      	ldrb	r3, [r6, #1]
 8007664:	2b2b      	cmp	r3, #43	; 0x2b
 8007666:	d02c      	beq.n	80076c2 <__gethex+0x13e>
 8007668:	2b2d      	cmp	r3, #45	; 0x2d
 800766a:	d02e      	beq.n	80076ca <__gethex+0x146>
 800766c:	1c71      	adds	r1, r6, #1
 800766e:	f04f 0900 	mov.w	r9, #0
 8007672:	7808      	ldrb	r0, [r1, #0]
 8007674:	f7ff ff70 	bl	8007558 <__hexdig_fun>
 8007678:	1e43      	subs	r3, r0, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b18      	cmp	r3, #24
 800767e:	d82c      	bhi.n	80076da <__gethex+0x156>
 8007680:	f1a0 0210 	sub.w	r2, r0, #16
 8007684:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007688:	f7ff ff66 	bl	8007558 <__hexdig_fun>
 800768c:	1e43      	subs	r3, r0, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b18      	cmp	r3, #24
 8007692:	d91d      	bls.n	80076d0 <__gethex+0x14c>
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	d000      	beq.n	800769c <__gethex+0x118>
 800769a:	4252      	negs	r2, r2
 800769c:	4415      	add	r5, r2
 800769e:	f8cb 1000 	str.w	r1, [fp]
 80076a2:	b1e4      	cbz	r4, 80076de <__gethex+0x15a>
 80076a4:	9b00      	ldr	r3, [sp, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf14      	ite	ne
 80076aa:	2700      	movne	r7, #0
 80076ac:	2706      	moveq	r7, #6
 80076ae:	4638      	mov	r0, r7
 80076b0:	b009      	add	sp, #36	; 0x24
 80076b2:	ecbd 8b02 	vpop	{d8}
 80076b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ba:	463e      	mov	r6, r7
 80076bc:	4625      	mov	r5, r4
 80076be:	2401      	movs	r4, #1
 80076c0:	e7ca      	b.n	8007658 <__gethex+0xd4>
 80076c2:	f04f 0900 	mov.w	r9, #0
 80076c6:	1cb1      	adds	r1, r6, #2
 80076c8:	e7d3      	b.n	8007672 <__gethex+0xee>
 80076ca:	f04f 0901 	mov.w	r9, #1
 80076ce:	e7fa      	b.n	80076c6 <__gethex+0x142>
 80076d0:	230a      	movs	r3, #10
 80076d2:	fb03 0202 	mla	r2, r3, r2, r0
 80076d6:	3a10      	subs	r2, #16
 80076d8:	e7d4      	b.n	8007684 <__gethex+0x100>
 80076da:	4631      	mov	r1, r6
 80076dc:	e7df      	b.n	800769e <__gethex+0x11a>
 80076de:	1bf3      	subs	r3, r6, r7
 80076e0:	3b01      	subs	r3, #1
 80076e2:	4621      	mov	r1, r4
 80076e4:	2b07      	cmp	r3, #7
 80076e6:	dc0b      	bgt.n	8007700 <__gethex+0x17c>
 80076e8:	ee18 0a10 	vmov	r0, s16
 80076ec:	f000 fa7a 	bl	8007be4 <_Balloc>
 80076f0:	4604      	mov	r4, r0
 80076f2:	b940      	cbnz	r0, 8007706 <__gethex+0x182>
 80076f4:	4b5d      	ldr	r3, [pc, #372]	; (800786c <__gethex+0x2e8>)
 80076f6:	4602      	mov	r2, r0
 80076f8:	21de      	movs	r1, #222	; 0xde
 80076fa:	485d      	ldr	r0, [pc, #372]	; (8007870 <__gethex+0x2ec>)
 80076fc:	f7ff feaa 	bl	8007454 <__assert_func>
 8007700:	3101      	adds	r1, #1
 8007702:	105b      	asrs	r3, r3, #1
 8007704:	e7ee      	b.n	80076e4 <__gethex+0x160>
 8007706:	f100 0914 	add.w	r9, r0, #20
 800770a:	f04f 0b00 	mov.w	fp, #0
 800770e:	f1ca 0301 	rsb	r3, sl, #1
 8007712:	f8cd 9008 	str.w	r9, [sp, #8]
 8007716:	f8cd b000 	str.w	fp, [sp]
 800771a:	9306      	str	r3, [sp, #24]
 800771c:	42b7      	cmp	r7, r6
 800771e:	d340      	bcc.n	80077a2 <__gethex+0x21e>
 8007720:	9802      	ldr	r0, [sp, #8]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	f840 3b04 	str.w	r3, [r0], #4
 8007728:	eba0 0009 	sub.w	r0, r0, r9
 800772c:	1080      	asrs	r0, r0, #2
 800772e:	0146      	lsls	r6, r0, #5
 8007730:	6120      	str	r0, [r4, #16]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fb48 	bl	8007dc8 <__hi0bits>
 8007738:	1a30      	subs	r0, r6, r0
 800773a:	f8d8 6000 	ldr.w	r6, [r8]
 800773e:	42b0      	cmp	r0, r6
 8007740:	dd63      	ble.n	800780a <__gethex+0x286>
 8007742:	1b87      	subs	r7, r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	4620      	mov	r0, r4
 8007748:	f000 feec 	bl	8008524 <__any_on>
 800774c:	4682      	mov	sl, r0
 800774e:	b1a8      	cbz	r0, 800777c <__gethex+0x1f8>
 8007750:	1e7b      	subs	r3, r7, #1
 8007752:	1159      	asrs	r1, r3, #5
 8007754:	f003 021f 	and.w	r2, r3, #31
 8007758:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800775c:	f04f 0a01 	mov.w	sl, #1
 8007760:	fa0a f202 	lsl.w	r2, sl, r2
 8007764:	420a      	tst	r2, r1
 8007766:	d009      	beq.n	800777c <__gethex+0x1f8>
 8007768:	4553      	cmp	r3, sl
 800776a:	dd05      	ble.n	8007778 <__gethex+0x1f4>
 800776c:	1eb9      	subs	r1, r7, #2
 800776e:	4620      	mov	r0, r4
 8007770:	f000 fed8 	bl	8008524 <__any_on>
 8007774:	2800      	cmp	r0, #0
 8007776:	d145      	bne.n	8007804 <__gethex+0x280>
 8007778:	f04f 0a02 	mov.w	sl, #2
 800777c:	4639      	mov	r1, r7
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff fe98 	bl	80074b4 <rshift>
 8007784:	443d      	add	r5, r7
 8007786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800778a:	42ab      	cmp	r3, r5
 800778c:	da4c      	bge.n	8007828 <__gethex+0x2a4>
 800778e:	ee18 0a10 	vmov	r0, s16
 8007792:	4621      	mov	r1, r4
 8007794:	f000 fa66 	bl	8007c64 <_Bfree>
 8007798:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800779a:	2300      	movs	r3, #0
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	27a3      	movs	r7, #163	; 0xa3
 80077a0:	e785      	b.n	80076ae <__gethex+0x12a>
 80077a2:	1e73      	subs	r3, r6, #1
 80077a4:	9a05      	ldr	r2, [sp, #20]
 80077a6:	9303      	str	r3, [sp, #12]
 80077a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d019      	beq.n	80077e4 <__gethex+0x260>
 80077b0:	f1bb 0f20 	cmp.w	fp, #32
 80077b4:	d107      	bne.n	80077c6 <__gethex+0x242>
 80077b6:	9b02      	ldr	r3, [sp, #8]
 80077b8:	9a00      	ldr	r2, [sp, #0]
 80077ba:	f843 2b04 	str.w	r2, [r3], #4
 80077be:	9302      	str	r3, [sp, #8]
 80077c0:	2300      	movs	r3, #0
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	469b      	mov	fp, r3
 80077c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077ca:	f7ff fec5 	bl	8007558 <__hexdig_fun>
 80077ce:	9b00      	ldr	r3, [sp, #0]
 80077d0:	f000 000f 	and.w	r0, r0, #15
 80077d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80077d8:	4303      	orrs	r3, r0
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	f10b 0b04 	add.w	fp, fp, #4
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	e00d      	b.n	8007800 <__gethex+0x27c>
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	9a06      	ldr	r2, [sp, #24]
 80077e8:	4413      	add	r3, r2
 80077ea:	42bb      	cmp	r3, r7
 80077ec:	d3e0      	bcc.n	80077b0 <__gethex+0x22c>
 80077ee:	4618      	mov	r0, r3
 80077f0:	9901      	ldr	r1, [sp, #4]
 80077f2:	9307      	str	r3, [sp, #28]
 80077f4:	4652      	mov	r2, sl
 80077f6:	f001 fc0f 	bl	8009018 <strncmp>
 80077fa:	9b07      	ldr	r3, [sp, #28]
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1d7      	bne.n	80077b0 <__gethex+0x22c>
 8007800:	461e      	mov	r6, r3
 8007802:	e78b      	b.n	800771c <__gethex+0x198>
 8007804:	f04f 0a03 	mov.w	sl, #3
 8007808:	e7b8      	b.n	800777c <__gethex+0x1f8>
 800780a:	da0a      	bge.n	8007822 <__gethex+0x29e>
 800780c:	1a37      	subs	r7, r6, r0
 800780e:	4621      	mov	r1, r4
 8007810:	ee18 0a10 	vmov	r0, s16
 8007814:	463a      	mov	r2, r7
 8007816:	f000 fc41 	bl	800809c <__lshift>
 800781a:	1bed      	subs	r5, r5, r7
 800781c:	4604      	mov	r4, r0
 800781e:	f100 0914 	add.w	r9, r0, #20
 8007822:	f04f 0a00 	mov.w	sl, #0
 8007826:	e7ae      	b.n	8007786 <__gethex+0x202>
 8007828:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800782c:	42a8      	cmp	r0, r5
 800782e:	dd72      	ble.n	8007916 <__gethex+0x392>
 8007830:	1b45      	subs	r5, r0, r5
 8007832:	42ae      	cmp	r6, r5
 8007834:	dc36      	bgt.n	80078a4 <__gethex+0x320>
 8007836:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d02a      	beq.n	8007894 <__gethex+0x310>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d02c      	beq.n	800789c <__gethex+0x318>
 8007842:	2b01      	cmp	r3, #1
 8007844:	d11c      	bne.n	8007880 <__gethex+0x2fc>
 8007846:	42ae      	cmp	r6, r5
 8007848:	d11a      	bne.n	8007880 <__gethex+0x2fc>
 800784a:	2e01      	cmp	r6, #1
 800784c:	d112      	bne.n	8007874 <__gethex+0x2f0>
 800784e:	9a04      	ldr	r2, [sp, #16]
 8007850:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	2301      	movs	r3, #1
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	f8c9 3000 	str.w	r3, [r9]
 800785e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007860:	2762      	movs	r7, #98	; 0x62
 8007862:	601c      	str	r4, [r3, #0]
 8007864:	e723      	b.n	80076ae <__gethex+0x12a>
 8007866:	bf00      	nop
 8007868:	08009ad0 	.word	0x08009ad0
 800786c:	08009a58 	.word	0x08009a58
 8007870:	08009a69 	.word	0x08009a69
 8007874:	1e71      	subs	r1, r6, #1
 8007876:	4620      	mov	r0, r4
 8007878:	f000 fe54 	bl	8008524 <__any_on>
 800787c:	2800      	cmp	r0, #0
 800787e:	d1e6      	bne.n	800784e <__gethex+0x2ca>
 8007880:	ee18 0a10 	vmov	r0, s16
 8007884:	4621      	mov	r1, r4
 8007886:	f000 f9ed 	bl	8007c64 <_Bfree>
 800788a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800788c:	2300      	movs	r3, #0
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	2750      	movs	r7, #80	; 0x50
 8007892:	e70c      	b.n	80076ae <__gethex+0x12a>
 8007894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1f2      	bne.n	8007880 <__gethex+0x2fc>
 800789a:	e7d8      	b.n	800784e <__gethex+0x2ca>
 800789c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1d5      	bne.n	800784e <__gethex+0x2ca>
 80078a2:	e7ed      	b.n	8007880 <__gethex+0x2fc>
 80078a4:	1e6f      	subs	r7, r5, #1
 80078a6:	f1ba 0f00 	cmp.w	sl, #0
 80078aa:	d131      	bne.n	8007910 <__gethex+0x38c>
 80078ac:	b127      	cbz	r7, 80078b8 <__gethex+0x334>
 80078ae:	4639      	mov	r1, r7
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fe37 	bl	8008524 <__any_on>
 80078b6:	4682      	mov	sl, r0
 80078b8:	117b      	asrs	r3, r7, #5
 80078ba:	2101      	movs	r1, #1
 80078bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80078c0:	f007 071f 	and.w	r7, r7, #31
 80078c4:	fa01 f707 	lsl.w	r7, r1, r7
 80078c8:	421f      	tst	r7, r3
 80078ca:	4629      	mov	r1, r5
 80078cc:	4620      	mov	r0, r4
 80078ce:	bf18      	it	ne
 80078d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80078d4:	1b76      	subs	r6, r6, r5
 80078d6:	f7ff fded 	bl	80074b4 <rshift>
 80078da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80078de:	2702      	movs	r7, #2
 80078e0:	f1ba 0f00 	cmp.w	sl, #0
 80078e4:	d048      	beq.n	8007978 <__gethex+0x3f4>
 80078e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d015      	beq.n	800791a <__gethex+0x396>
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d017      	beq.n	8007922 <__gethex+0x39e>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d109      	bne.n	800790a <__gethex+0x386>
 80078f6:	f01a 0f02 	tst.w	sl, #2
 80078fa:	d006      	beq.n	800790a <__gethex+0x386>
 80078fc:	f8d9 0000 	ldr.w	r0, [r9]
 8007900:	ea4a 0a00 	orr.w	sl, sl, r0
 8007904:	f01a 0f01 	tst.w	sl, #1
 8007908:	d10e      	bne.n	8007928 <__gethex+0x3a4>
 800790a:	f047 0710 	orr.w	r7, r7, #16
 800790e:	e033      	b.n	8007978 <__gethex+0x3f4>
 8007910:	f04f 0a01 	mov.w	sl, #1
 8007914:	e7d0      	b.n	80078b8 <__gethex+0x334>
 8007916:	2701      	movs	r7, #1
 8007918:	e7e2      	b.n	80078e0 <__gethex+0x35c>
 800791a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800791c:	f1c3 0301 	rsb	r3, r3, #1
 8007920:	9315      	str	r3, [sp, #84]	; 0x54
 8007922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0f0      	beq.n	800790a <__gethex+0x386>
 8007928:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800792c:	f104 0314 	add.w	r3, r4, #20
 8007930:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007934:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007938:	f04f 0c00 	mov.w	ip, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007942:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007946:	d01c      	beq.n	8007982 <__gethex+0x3fe>
 8007948:	3201      	adds	r2, #1
 800794a:	6002      	str	r2, [r0, #0]
 800794c:	2f02      	cmp	r7, #2
 800794e:	f104 0314 	add.w	r3, r4, #20
 8007952:	d13f      	bne.n	80079d4 <__gethex+0x450>
 8007954:	f8d8 2000 	ldr.w	r2, [r8]
 8007958:	3a01      	subs	r2, #1
 800795a:	42b2      	cmp	r2, r6
 800795c:	d10a      	bne.n	8007974 <__gethex+0x3f0>
 800795e:	1171      	asrs	r1, r6, #5
 8007960:	2201      	movs	r2, #1
 8007962:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007966:	f006 061f 	and.w	r6, r6, #31
 800796a:	fa02 f606 	lsl.w	r6, r2, r6
 800796e:	421e      	tst	r6, r3
 8007970:	bf18      	it	ne
 8007972:	4617      	movne	r7, r2
 8007974:	f047 0720 	orr.w	r7, r7, #32
 8007978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800797a:	601c      	str	r4, [r3, #0]
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	601d      	str	r5, [r3, #0]
 8007980:	e695      	b.n	80076ae <__gethex+0x12a>
 8007982:	4299      	cmp	r1, r3
 8007984:	f843 cc04 	str.w	ip, [r3, #-4]
 8007988:	d8d8      	bhi.n	800793c <__gethex+0x3b8>
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	459b      	cmp	fp, r3
 800798e:	db19      	blt.n	80079c4 <__gethex+0x440>
 8007990:	6861      	ldr	r1, [r4, #4]
 8007992:	ee18 0a10 	vmov	r0, s16
 8007996:	3101      	adds	r1, #1
 8007998:	f000 f924 	bl	8007be4 <_Balloc>
 800799c:	4681      	mov	r9, r0
 800799e:	b918      	cbnz	r0, 80079a8 <__gethex+0x424>
 80079a0:	4b1a      	ldr	r3, [pc, #104]	; (8007a0c <__gethex+0x488>)
 80079a2:	4602      	mov	r2, r0
 80079a4:	2184      	movs	r1, #132	; 0x84
 80079a6:	e6a8      	b.n	80076fa <__gethex+0x176>
 80079a8:	6922      	ldr	r2, [r4, #16]
 80079aa:	3202      	adds	r2, #2
 80079ac:	f104 010c 	add.w	r1, r4, #12
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	300c      	adds	r0, #12
 80079b4:	f000 f908 	bl	8007bc8 <memcpy>
 80079b8:	4621      	mov	r1, r4
 80079ba:	ee18 0a10 	vmov	r0, s16
 80079be:	f000 f951 	bl	8007c64 <_Bfree>
 80079c2:	464c      	mov	r4, r9
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079cc:	6122      	str	r2, [r4, #16]
 80079ce:	2201      	movs	r2, #1
 80079d0:	615a      	str	r2, [r3, #20]
 80079d2:	e7bb      	b.n	800794c <__gethex+0x3c8>
 80079d4:	6922      	ldr	r2, [r4, #16]
 80079d6:	455a      	cmp	r2, fp
 80079d8:	dd0b      	ble.n	80079f2 <__gethex+0x46e>
 80079da:	2101      	movs	r1, #1
 80079dc:	4620      	mov	r0, r4
 80079de:	f7ff fd69 	bl	80074b4 <rshift>
 80079e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079e6:	3501      	adds	r5, #1
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	f6ff aed0 	blt.w	800778e <__gethex+0x20a>
 80079ee:	2701      	movs	r7, #1
 80079f0:	e7c0      	b.n	8007974 <__gethex+0x3f0>
 80079f2:	f016 061f 	ands.w	r6, r6, #31
 80079f6:	d0fa      	beq.n	80079ee <__gethex+0x46a>
 80079f8:	4453      	add	r3, sl
 80079fa:	f1c6 0620 	rsb	r6, r6, #32
 80079fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a02:	f000 f9e1 	bl	8007dc8 <__hi0bits>
 8007a06:	42b0      	cmp	r0, r6
 8007a08:	dbe7      	blt.n	80079da <__gethex+0x456>
 8007a0a:	e7f0      	b.n	80079ee <__gethex+0x46a>
 8007a0c:	08009a58 	.word	0x08009a58

08007a10 <L_shift>:
 8007a10:	f1c2 0208 	rsb	r2, r2, #8
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	b570      	push	{r4, r5, r6, lr}
 8007a18:	f1c2 0620 	rsb	r6, r2, #32
 8007a1c:	6843      	ldr	r3, [r0, #4]
 8007a1e:	6804      	ldr	r4, [r0, #0]
 8007a20:	fa03 f506 	lsl.w	r5, r3, r6
 8007a24:	432c      	orrs	r4, r5
 8007a26:	40d3      	lsrs	r3, r2
 8007a28:	6004      	str	r4, [r0, #0]
 8007a2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a2e:	4288      	cmp	r0, r1
 8007a30:	d3f4      	bcc.n	8007a1c <L_shift+0xc>
 8007a32:	bd70      	pop	{r4, r5, r6, pc}

08007a34 <__match>:
 8007a34:	b530      	push	{r4, r5, lr}
 8007a36:	6803      	ldr	r3, [r0, #0]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3e:	b914      	cbnz	r4, 8007a46 <__match+0x12>
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	2001      	movs	r0, #1
 8007a44:	bd30      	pop	{r4, r5, pc}
 8007a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a4e:	2d19      	cmp	r5, #25
 8007a50:	bf98      	it	ls
 8007a52:	3220      	addls	r2, #32
 8007a54:	42a2      	cmp	r2, r4
 8007a56:	d0f0      	beq.n	8007a3a <__match+0x6>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e7f3      	b.n	8007a44 <__match+0x10>

08007a5c <__hexnan>:
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	680b      	ldr	r3, [r1, #0]
 8007a62:	115e      	asrs	r6, r3, #5
 8007a64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a68:	f013 031f 	ands.w	r3, r3, #31
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	bf18      	it	ne
 8007a70:	3604      	addne	r6, #4
 8007a72:	2500      	movs	r5, #0
 8007a74:	1f37      	subs	r7, r6, #4
 8007a76:	4690      	mov	r8, r2
 8007a78:	6802      	ldr	r2, [r0, #0]
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a82:	46b9      	mov	r9, r7
 8007a84:	463c      	mov	r4, r7
 8007a86:	9502      	str	r5, [sp, #8]
 8007a88:	46ab      	mov	fp, r5
 8007a8a:	7851      	ldrb	r1, [r2, #1]
 8007a8c:	1c53      	adds	r3, r2, #1
 8007a8e:	9303      	str	r3, [sp, #12]
 8007a90:	b341      	cbz	r1, 8007ae4 <__hexnan+0x88>
 8007a92:	4608      	mov	r0, r1
 8007a94:	9205      	str	r2, [sp, #20]
 8007a96:	9104      	str	r1, [sp, #16]
 8007a98:	f7ff fd5e 	bl	8007558 <__hexdig_fun>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d14f      	bne.n	8007b40 <__hexnan+0xe4>
 8007aa0:	9904      	ldr	r1, [sp, #16]
 8007aa2:	9a05      	ldr	r2, [sp, #20]
 8007aa4:	2920      	cmp	r1, #32
 8007aa6:	d818      	bhi.n	8007ada <__hexnan+0x7e>
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	459b      	cmp	fp, r3
 8007aac:	dd13      	ble.n	8007ad6 <__hexnan+0x7a>
 8007aae:	454c      	cmp	r4, r9
 8007ab0:	d206      	bcs.n	8007ac0 <__hexnan+0x64>
 8007ab2:	2d07      	cmp	r5, #7
 8007ab4:	dc04      	bgt.n	8007ac0 <__hexnan+0x64>
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7ff ffa8 	bl	8007a10 <L_shift>
 8007ac0:	4544      	cmp	r4, r8
 8007ac2:	d950      	bls.n	8007b66 <__hexnan+0x10a>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f1a4 0904 	sub.w	r9, r4, #4
 8007aca:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ace:	f8cd b008 	str.w	fp, [sp, #8]
 8007ad2:	464c      	mov	r4, r9
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	9a03      	ldr	r2, [sp, #12]
 8007ad8:	e7d7      	b.n	8007a8a <__hexnan+0x2e>
 8007ada:	2929      	cmp	r1, #41	; 0x29
 8007adc:	d156      	bne.n	8007b8c <__hexnan+0x130>
 8007ade:	3202      	adds	r2, #2
 8007ae0:	f8ca 2000 	str.w	r2, [sl]
 8007ae4:	f1bb 0f00 	cmp.w	fp, #0
 8007ae8:	d050      	beq.n	8007b8c <__hexnan+0x130>
 8007aea:	454c      	cmp	r4, r9
 8007aec:	d206      	bcs.n	8007afc <__hexnan+0xa0>
 8007aee:	2d07      	cmp	r5, #7
 8007af0:	dc04      	bgt.n	8007afc <__hexnan+0xa0>
 8007af2:	462a      	mov	r2, r5
 8007af4:	4649      	mov	r1, r9
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7ff ff8a 	bl	8007a10 <L_shift>
 8007afc:	4544      	cmp	r4, r8
 8007afe:	d934      	bls.n	8007b6a <__hexnan+0x10e>
 8007b00:	f1a8 0204 	sub.w	r2, r8, #4
 8007b04:	4623      	mov	r3, r4
 8007b06:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b0a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b0e:	429f      	cmp	r7, r3
 8007b10:	d2f9      	bcs.n	8007b06 <__hexnan+0xaa>
 8007b12:	1b3b      	subs	r3, r7, r4
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	3304      	adds	r3, #4
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	3e03      	subs	r6, #3
 8007b1e:	42b4      	cmp	r4, r6
 8007b20:	bf88      	it	hi
 8007b22:	2304      	movhi	r3, #4
 8007b24:	4443      	add	r3, r8
 8007b26:	2200      	movs	r2, #0
 8007b28:	f843 2b04 	str.w	r2, [r3], #4
 8007b2c:	429f      	cmp	r7, r3
 8007b2e:	d2fb      	bcs.n	8007b28 <__hexnan+0xcc>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	b91b      	cbnz	r3, 8007b3c <__hexnan+0xe0>
 8007b34:	4547      	cmp	r7, r8
 8007b36:	d127      	bne.n	8007b88 <__hexnan+0x12c>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	2005      	movs	r0, #5
 8007b3e:	e026      	b.n	8007b8e <__hexnan+0x132>
 8007b40:	3501      	adds	r5, #1
 8007b42:	2d08      	cmp	r5, #8
 8007b44:	f10b 0b01 	add.w	fp, fp, #1
 8007b48:	dd06      	ble.n	8007b58 <__hexnan+0xfc>
 8007b4a:	4544      	cmp	r4, r8
 8007b4c:	d9c3      	bls.n	8007ad6 <__hexnan+0x7a>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b54:	2501      	movs	r5, #1
 8007b56:	3c04      	subs	r4, #4
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	f000 000f 	and.w	r0, r0, #15
 8007b5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	e7b7      	b.n	8007ad6 <__hexnan+0x7a>
 8007b66:	2508      	movs	r5, #8
 8007b68:	e7b5      	b.n	8007ad6 <__hexnan+0x7a>
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0df      	beq.n	8007b30 <__hexnan+0xd4>
 8007b70:	f04f 32ff 	mov.w	r2, #4294967295
 8007b74:	f1c3 0320 	rsb	r3, r3, #32
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b80:	401a      	ands	r2, r3
 8007b82:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b86:	e7d3      	b.n	8007b30 <__hexnan+0xd4>
 8007b88:	3f04      	subs	r7, #4
 8007b8a:	e7d1      	b.n	8007b30 <__hexnan+0xd4>
 8007b8c:	2004      	movs	r0, #4
 8007b8e:	b007      	add	sp, #28
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b94 <malloc>:
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <malloc+0xc>)
 8007b96:	4601      	mov	r1, r0
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	f000 bd67 	b.w	800866c <_malloc_r>
 8007b9e:	bf00      	nop
 8007ba0:	20000020 	.word	0x20000020

08007ba4 <__ascii_mbtowc>:
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	b901      	cbnz	r1, 8007baa <__ascii_mbtowc+0x6>
 8007ba8:	a901      	add	r1, sp, #4
 8007baa:	b142      	cbz	r2, 8007bbe <__ascii_mbtowc+0x1a>
 8007bac:	b14b      	cbz	r3, 8007bc2 <__ascii_mbtowc+0x1e>
 8007bae:	7813      	ldrb	r3, [r2, #0]
 8007bb0:	600b      	str	r3, [r1, #0]
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	1e10      	subs	r0, r2, #0
 8007bb6:	bf18      	it	ne
 8007bb8:	2001      	movne	r0, #1
 8007bba:	b002      	add	sp, #8
 8007bbc:	4770      	bx	lr
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	e7fb      	b.n	8007bba <__ascii_mbtowc+0x16>
 8007bc2:	f06f 0001 	mvn.w	r0, #1
 8007bc6:	e7f8      	b.n	8007bba <__ascii_mbtowc+0x16>

08007bc8 <memcpy>:
 8007bc8:	440a      	add	r2, r1
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd0:	d100      	bne.n	8007bd4 <memcpy+0xc>
 8007bd2:	4770      	bx	lr
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bde:	4291      	cmp	r1, r2
 8007be0:	d1f9      	bne.n	8007bd6 <memcpy+0xe>
 8007be2:	bd10      	pop	{r4, pc}

08007be4 <_Balloc>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	b976      	cbnz	r6, 8007c0c <_Balloc+0x28>
 8007bee:	2010      	movs	r0, #16
 8007bf0:	f7ff ffd0 	bl	8007b94 <malloc>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8007bf8:	b920      	cbnz	r0, 8007c04 <_Balloc+0x20>
 8007bfa:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <_Balloc+0x78>)
 8007bfc:	4818      	ldr	r0, [pc, #96]	; (8007c60 <_Balloc+0x7c>)
 8007bfe:	2166      	movs	r1, #102	; 0x66
 8007c00:	f7ff fc28 	bl	8007454 <__assert_func>
 8007c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c08:	6006      	str	r6, [r0, #0]
 8007c0a:	60c6      	str	r6, [r0, #12]
 8007c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c0e:	68f3      	ldr	r3, [r6, #12]
 8007c10:	b183      	cbz	r3, 8007c34 <_Balloc+0x50>
 8007c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c1a:	b9b8      	cbnz	r0, 8007c4c <_Balloc+0x68>
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c22:	1d72      	adds	r2, r6, #5
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 fc9d 	bl	8008566 <_calloc_r>
 8007c2c:	b160      	cbz	r0, 8007c48 <_Balloc+0x64>
 8007c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c32:	e00e      	b.n	8007c52 <_Balloc+0x6e>
 8007c34:	2221      	movs	r2, #33	; 0x21
 8007c36:	2104      	movs	r1, #4
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fc94 	bl	8008566 <_calloc_r>
 8007c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c40:	60f0      	str	r0, [r6, #12]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e4      	bne.n	8007c12 <_Balloc+0x2e>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	6802      	ldr	r2, [r0, #0]
 8007c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c52:	2300      	movs	r3, #0
 8007c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c58:	e7f7      	b.n	8007c4a <_Balloc+0x66>
 8007c5a:	bf00      	nop
 8007c5c:	080099a8 	.word	0x080099a8
 8007c60:	08009ae4 	.word	0x08009ae4

08007c64 <_Bfree>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	b976      	cbnz	r6, 8007c8c <_Bfree+0x28>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	f7ff ff90 	bl	8007b94 <malloc>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6268      	str	r0, [r5, #36]	; 0x24
 8007c78:	b920      	cbnz	r0, 8007c84 <_Bfree+0x20>
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <_Bfree+0x3c>)
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <_Bfree+0x40>)
 8007c7e:	218a      	movs	r1, #138	; 0x8a
 8007c80:	f7ff fbe8 	bl	8007454 <__assert_func>
 8007c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c88:	6006      	str	r6, [r0, #0]
 8007c8a:	60c6      	str	r6, [r0, #12]
 8007c8c:	b13c      	cbz	r4, 8007c9e <_Bfree+0x3a>
 8007c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c90:	6862      	ldr	r2, [r4, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c98:	6021      	str	r1, [r4, #0]
 8007c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	080099a8 	.word	0x080099a8
 8007ca4:	08009ae4 	.word	0x08009ae4

08007ca8 <__multadd>:
 8007ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	690d      	ldr	r5, [r1, #16]
 8007cae:	4607      	mov	r7, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	461e      	mov	r6, r3
 8007cb4:	f101 0c14 	add.w	ip, r1, #20
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f8dc 3000 	ldr.w	r3, [ip]
 8007cbe:	b299      	uxth	r1, r3
 8007cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007cc4:	0c1e      	lsrs	r6, r3, #16
 8007cc6:	0c0b      	lsrs	r3, r1, #16
 8007cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007ccc:	b289      	uxth	r1, r1
 8007cce:	3001      	adds	r0, #1
 8007cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cd4:	4285      	cmp	r5, r0
 8007cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cde:	dcec      	bgt.n	8007cba <__multadd+0x12>
 8007ce0:	b30e      	cbz	r6, 8007d26 <__multadd+0x7e>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dc19      	bgt.n	8007d1c <__multadd+0x74>
 8007ce8:	6861      	ldr	r1, [r4, #4]
 8007cea:	4638      	mov	r0, r7
 8007cec:	3101      	adds	r1, #1
 8007cee:	f7ff ff79 	bl	8007be4 <_Balloc>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	b928      	cbnz	r0, 8007d02 <__multadd+0x5a>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <__multadd+0x84>)
 8007cfa:	480d      	ldr	r0, [pc, #52]	; (8007d30 <__multadd+0x88>)
 8007cfc:	21b5      	movs	r1, #181	; 0xb5
 8007cfe:	f7ff fba9 	bl	8007454 <__assert_func>
 8007d02:	6922      	ldr	r2, [r4, #16]
 8007d04:	3202      	adds	r2, #2
 8007d06:	f104 010c 	add.w	r1, r4, #12
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	300c      	adds	r0, #12
 8007d0e:	f7ff ff5b 	bl	8007bc8 <memcpy>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff ffa5 	bl	8007c64 <_Bfree>
 8007d1a:	4644      	mov	r4, r8
 8007d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d20:	3501      	adds	r5, #1
 8007d22:	615e      	str	r6, [r3, #20]
 8007d24:	6125      	str	r5, [r4, #16]
 8007d26:	4620      	mov	r0, r4
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	08009a58 	.word	0x08009a58
 8007d30:	08009ae4 	.word	0x08009ae4

08007d34 <__s2b>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4615      	mov	r5, r2
 8007d3c:	461f      	mov	r7, r3
 8007d3e:	2209      	movs	r2, #9
 8007d40:	3308      	adds	r3, #8
 8007d42:	4606      	mov	r6, r0
 8007d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d48:	2100      	movs	r1, #0
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	db09      	blt.n	8007d64 <__s2b+0x30>
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ff47 	bl	8007be4 <_Balloc>
 8007d56:	b940      	cbnz	r0, 8007d6a <__s2b+0x36>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <__s2b+0x8c>)
 8007d5c:	4819      	ldr	r0, [pc, #100]	; (8007dc4 <__s2b+0x90>)
 8007d5e:	21ce      	movs	r1, #206	; 0xce
 8007d60:	f7ff fb78 	bl	8007454 <__assert_func>
 8007d64:	0052      	lsls	r2, r2, #1
 8007d66:	3101      	adds	r1, #1
 8007d68:	e7f0      	b.n	8007d4c <__s2b+0x18>
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	6143      	str	r3, [r0, #20]
 8007d6e:	2d09      	cmp	r5, #9
 8007d70:	f04f 0301 	mov.w	r3, #1
 8007d74:	6103      	str	r3, [r0, #16]
 8007d76:	dd16      	ble.n	8007da6 <__s2b+0x72>
 8007d78:	f104 0909 	add.w	r9, r4, #9
 8007d7c:	46c8      	mov	r8, r9
 8007d7e:	442c      	add	r4, r5
 8007d80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d84:	4601      	mov	r1, r0
 8007d86:	3b30      	subs	r3, #48	; 0x30
 8007d88:	220a      	movs	r2, #10
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff ff8c 	bl	8007ca8 <__multadd>
 8007d90:	45a0      	cmp	r8, r4
 8007d92:	d1f5      	bne.n	8007d80 <__s2b+0x4c>
 8007d94:	f1a5 0408 	sub.w	r4, r5, #8
 8007d98:	444c      	add	r4, r9
 8007d9a:	1b2d      	subs	r5, r5, r4
 8007d9c:	1963      	adds	r3, r4, r5
 8007d9e:	42bb      	cmp	r3, r7
 8007da0:	db04      	blt.n	8007dac <__s2b+0x78>
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	340a      	adds	r4, #10
 8007da8:	2509      	movs	r5, #9
 8007daa:	e7f6      	b.n	8007d9a <__s2b+0x66>
 8007dac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007db0:	4601      	mov	r1, r0
 8007db2:	3b30      	subs	r3, #48	; 0x30
 8007db4:	220a      	movs	r2, #10
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ff76 	bl	8007ca8 <__multadd>
 8007dbc:	e7ee      	b.n	8007d9c <__s2b+0x68>
 8007dbe:	bf00      	nop
 8007dc0:	08009a58 	.word	0x08009a58
 8007dc4:	08009ae4 	.word	0x08009ae4

08007dc8 <__hi0bits>:
 8007dc8:	0c03      	lsrs	r3, r0, #16
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	b9d3      	cbnz	r3, 8007e04 <__hi0bits+0x3c>
 8007dce:	0400      	lsls	r0, r0, #16
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dd6:	bf04      	itt	eq
 8007dd8:	0200      	lsleq	r0, r0, #8
 8007dda:	3308      	addeq	r3, #8
 8007ddc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007de0:	bf04      	itt	eq
 8007de2:	0100      	lsleq	r0, r0, #4
 8007de4:	3304      	addeq	r3, #4
 8007de6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007dea:	bf04      	itt	eq
 8007dec:	0080      	lsleq	r0, r0, #2
 8007dee:	3302      	addeq	r3, #2
 8007df0:	2800      	cmp	r0, #0
 8007df2:	db05      	blt.n	8007e00 <__hi0bits+0x38>
 8007df4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007df8:	f103 0301 	add.w	r3, r3, #1
 8007dfc:	bf08      	it	eq
 8007dfe:	2320      	moveq	r3, #32
 8007e00:	4618      	mov	r0, r3
 8007e02:	4770      	bx	lr
 8007e04:	2300      	movs	r3, #0
 8007e06:	e7e4      	b.n	8007dd2 <__hi0bits+0xa>

08007e08 <__lo0bits>:
 8007e08:	6803      	ldr	r3, [r0, #0]
 8007e0a:	f013 0207 	ands.w	r2, r3, #7
 8007e0e:	4601      	mov	r1, r0
 8007e10:	d00b      	beq.n	8007e2a <__lo0bits+0x22>
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d423      	bmi.n	8007e5e <__lo0bits+0x56>
 8007e16:	0798      	lsls	r0, r3, #30
 8007e18:	bf49      	itett	mi
 8007e1a:	085b      	lsrmi	r3, r3, #1
 8007e1c:	089b      	lsrpl	r3, r3, #2
 8007e1e:	2001      	movmi	r0, #1
 8007e20:	600b      	strmi	r3, [r1, #0]
 8007e22:	bf5c      	itt	pl
 8007e24:	600b      	strpl	r3, [r1, #0]
 8007e26:	2002      	movpl	r0, #2
 8007e28:	4770      	bx	lr
 8007e2a:	b298      	uxth	r0, r3
 8007e2c:	b9a8      	cbnz	r0, 8007e5a <__lo0bits+0x52>
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	2010      	movs	r0, #16
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	b90a      	cbnz	r2, 8007e3a <__lo0bits+0x32>
 8007e36:	3008      	adds	r0, #8
 8007e38:	0a1b      	lsrs	r3, r3, #8
 8007e3a:	071a      	lsls	r2, r3, #28
 8007e3c:	bf04      	itt	eq
 8007e3e:	091b      	lsreq	r3, r3, #4
 8007e40:	3004      	addeq	r0, #4
 8007e42:	079a      	lsls	r2, r3, #30
 8007e44:	bf04      	itt	eq
 8007e46:	089b      	lsreq	r3, r3, #2
 8007e48:	3002      	addeq	r0, #2
 8007e4a:	07da      	lsls	r2, r3, #31
 8007e4c:	d403      	bmi.n	8007e56 <__lo0bits+0x4e>
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	f100 0001 	add.w	r0, r0, #1
 8007e54:	d005      	beq.n	8007e62 <__lo0bits+0x5a>
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	4770      	bx	lr
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	e7e9      	b.n	8007e32 <__lo0bits+0x2a>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	4770      	bx	lr
 8007e62:	2020      	movs	r0, #32
 8007e64:	4770      	bx	lr
	...

08007e68 <__i2b>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	f7ff feb9 	bl	8007be4 <_Balloc>
 8007e72:	4602      	mov	r2, r0
 8007e74:	b928      	cbnz	r0, 8007e82 <__i2b+0x1a>
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <__i2b+0x24>)
 8007e78:	4805      	ldr	r0, [pc, #20]	; (8007e90 <__i2b+0x28>)
 8007e7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e7e:	f7ff fae9 	bl	8007454 <__assert_func>
 8007e82:	2301      	movs	r3, #1
 8007e84:	6144      	str	r4, [r0, #20]
 8007e86:	6103      	str	r3, [r0, #16]
 8007e88:	bd10      	pop	{r4, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08009a58 	.word	0x08009a58
 8007e90:	08009ae4 	.word	0x08009ae4

08007e94 <__multiply>:
 8007e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	4691      	mov	r9, r2
 8007e9a:	690a      	ldr	r2, [r1, #16]
 8007e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	bfb8      	it	lt
 8007ea4:	460b      	movlt	r3, r1
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	bfbc      	itt	lt
 8007eaa:	464c      	movlt	r4, r9
 8007eac:	4699      	movlt	r9, r3
 8007eae:	6927      	ldr	r7, [r4, #16]
 8007eb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007eb4:	68a3      	ldr	r3, [r4, #8]
 8007eb6:	6861      	ldr	r1, [r4, #4]
 8007eb8:	eb07 060a 	add.w	r6, r7, sl
 8007ebc:	42b3      	cmp	r3, r6
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	bfb8      	it	lt
 8007ec2:	3101      	addlt	r1, #1
 8007ec4:	f7ff fe8e 	bl	8007be4 <_Balloc>
 8007ec8:	b930      	cbnz	r0, 8007ed8 <__multiply+0x44>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4b44      	ldr	r3, [pc, #272]	; (8007fe0 <__multiply+0x14c>)
 8007ece:	4845      	ldr	r0, [pc, #276]	; (8007fe4 <__multiply+0x150>)
 8007ed0:	f240 115d 	movw	r1, #349	; 0x15d
 8007ed4:	f7ff fabe 	bl	8007454 <__assert_func>
 8007ed8:	f100 0514 	add.w	r5, r0, #20
 8007edc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ee0:	462b      	mov	r3, r5
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4543      	cmp	r3, r8
 8007ee6:	d321      	bcc.n	8007f2c <__multiply+0x98>
 8007ee8:	f104 0314 	add.w	r3, r4, #20
 8007eec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ef0:	f109 0314 	add.w	r3, r9, #20
 8007ef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ef8:	9202      	str	r2, [sp, #8]
 8007efa:	1b3a      	subs	r2, r7, r4
 8007efc:	3a15      	subs	r2, #21
 8007efe:	f022 0203 	bic.w	r2, r2, #3
 8007f02:	3204      	adds	r2, #4
 8007f04:	f104 0115 	add.w	r1, r4, #21
 8007f08:	428f      	cmp	r7, r1
 8007f0a:	bf38      	it	cc
 8007f0c:	2204      	movcc	r2, #4
 8007f0e:	9201      	str	r2, [sp, #4]
 8007f10:	9a02      	ldr	r2, [sp, #8]
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d80c      	bhi.n	8007f32 <__multiply+0x9e>
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	dd03      	ble.n	8007f24 <__multiply+0x90>
 8007f1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d05a      	beq.n	8007fda <__multiply+0x146>
 8007f24:	6106      	str	r6, [r0, #16]
 8007f26:	b005      	add	sp, #20
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	f843 2b04 	str.w	r2, [r3], #4
 8007f30:	e7d8      	b.n	8007ee4 <__multiply+0x50>
 8007f32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f36:	f1ba 0f00 	cmp.w	sl, #0
 8007f3a:	d024      	beq.n	8007f86 <__multiply+0xf2>
 8007f3c:	f104 0e14 	add.w	lr, r4, #20
 8007f40:	46a9      	mov	r9, r5
 8007f42:	f04f 0c00 	mov.w	ip, #0
 8007f46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f4a:	f8d9 1000 	ldr.w	r1, [r9]
 8007f4e:	fa1f fb82 	uxth.w	fp, r2
 8007f52:	b289      	uxth	r1, r1
 8007f54:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f60:	4461      	add	r1, ip
 8007f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f66:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f6e:	b289      	uxth	r1, r1
 8007f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f74:	4577      	cmp	r7, lr
 8007f76:	f849 1b04 	str.w	r1, [r9], #4
 8007f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f7e:	d8e2      	bhi.n	8007f46 <__multiply+0xb2>
 8007f80:	9a01      	ldr	r2, [sp, #4]
 8007f82:	f845 c002 	str.w	ip, [r5, r2]
 8007f86:	9a03      	ldr	r2, [sp, #12]
 8007f88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	f1b9 0f00 	cmp.w	r9, #0
 8007f92:	d020      	beq.n	8007fd6 <__multiply+0x142>
 8007f94:	6829      	ldr	r1, [r5, #0]
 8007f96:	f104 0c14 	add.w	ip, r4, #20
 8007f9a:	46ae      	mov	lr, r5
 8007f9c:	f04f 0a00 	mov.w	sl, #0
 8007fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8007fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fa8:	fb09 220b 	mla	r2, r9, fp, r2
 8007fac:	4492      	add	sl, r2
 8007fae:	b289      	uxth	r1, r1
 8007fb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8007fb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fbc:	f8be 1000 	ldrh.w	r1, [lr]
 8007fc0:	0c12      	lsrs	r2, r2, #16
 8007fc2:	fb09 1102 	mla	r1, r9, r2, r1
 8007fc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fca:	4567      	cmp	r7, ip
 8007fcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fd0:	d8e6      	bhi.n	8007fa0 <__multiply+0x10c>
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	50a9      	str	r1, [r5, r2]
 8007fd6:	3504      	adds	r5, #4
 8007fd8:	e79a      	b.n	8007f10 <__multiply+0x7c>
 8007fda:	3e01      	subs	r6, #1
 8007fdc:	e79c      	b.n	8007f18 <__multiply+0x84>
 8007fde:	bf00      	nop
 8007fe0:	08009a58 	.word	0x08009a58
 8007fe4:	08009ae4 	.word	0x08009ae4

08007fe8 <__pow5mult>:
 8007fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	4615      	mov	r5, r2
 8007fee:	f012 0203 	ands.w	r2, r2, #3
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	d007      	beq.n	8008008 <__pow5mult+0x20>
 8007ff8:	4c25      	ldr	r4, [pc, #148]	; (8008090 <__pow5mult+0xa8>)
 8007ffa:	3a01      	subs	r2, #1
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008002:	f7ff fe51 	bl	8007ca8 <__multadd>
 8008006:	4607      	mov	r7, r0
 8008008:	10ad      	asrs	r5, r5, #2
 800800a:	d03d      	beq.n	8008088 <__pow5mult+0xa0>
 800800c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800800e:	b97c      	cbnz	r4, 8008030 <__pow5mult+0x48>
 8008010:	2010      	movs	r0, #16
 8008012:	f7ff fdbf 	bl	8007b94 <malloc>
 8008016:	4602      	mov	r2, r0
 8008018:	6270      	str	r0, [r6, #36]	; 0x24
 800801a:	b928      	cbnz	r0, 8008028 <__pow5mult+0x40>
 800801c:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <__pow5mult+0xac>)
 800801e:	481e      	ldr	r0, [pc, #120]	; (8008098 <__pow5mult+0xb0>)
 8008020:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008024:	f7ff fa16 	bl	8007454 <__assert_func>
 8008028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800802c:	6004      	str	r4, [r0, #0]
 800802e:	60c4      	str	r4, [r0, #12]
 8008030:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008038:	b94c      	cbnz	r4, 800804e <__pow5mult+0x66>
 800803a:	f240 2171 	movw	r1, #625	; 0x271
 800803e:	4630      	mov	r0, r6
 8008040:	f7ff ff12 	bl	8007e68 <__i2b>
 8008044:	2300      	movs	r3, #0
 8008046:	f8c8 0008 	str.w	r0, [r8, #8]
 800804a:	4604      	mov	r4, r0
 800804c:	6003      	str	r3, [r0, #0]
 800804e:	f04f 0900 	mov.w	r9, #0
 8008052:	07eb      	lsls	r3, r5, #31
 8008054:	d50a      	bpl.n	800806c <__pow5mult+0x84>
 8008056:	4639      	mov	r1, r7
 8008058:	4622      	mov	r2, r4
 800805a:	4630      	mov	r0, r6
 800805c:	f7ff ff1a 	bl	8007e94 <__multiply>
 8008060:	4639      	mov	r1, r7
 8008062:	4680      	mov	r8, r0
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff fdfd 	bl	8007c64 <_Bfree>
 800806a:	4647      	mov	r7, r8
 800806c:	106d      	asrs	r5, r5, #1
 800806e:	d00b      	beq.n	8008088 <__pow5mult+0xa0>
 8008070:	6820      	ldr	r0, [r4, #0]
 8008072:	b938      	cbnz	r0, 8008084 <__pow5mult+0x9c>
 8008074:	4622      	mov	r2, r4
 8008076:	4621      	mov	r1, r4
 8008078:	4630      	mov	r0, r6
 800807a:	f7ff ff0b 	bl	8007e94 <__multiply>
 800807e:	6020      	str	r0, [r4, #0]
 8008080:	f8c0 9000 	str.w	r9, [r0]
 8008084:	4604      	mov	r4, r0
 8008086:	e7e4      	b.n	8008052 <__pow5mult+0x6a>
 8008088:	4638      	mov	r0, r7
 800808a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808e:	bf00      	nop
 8008090:	08009c30 	.word	0x08009c30
 8008094:	080099a8 	.word	0x080099a8
 8008098:	08009ae4 	.word	0x08009ae4

0800809c <__lshift>:
 800809c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a0:	460c      	mov	r4, r1
 80080a2:	6849      	ldr	r1, [r1, #4]
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	4607      	mov	r7, r0
 80080ae:	4691      	mov	r9, r2
 80080b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080b4:	f108 0601 	add.w	r6, r8, #1
 80080b8:	42b3      	cmp	r3, r6
 80080ba:	db0b      	blt.n	80080d4 <__lshift+0x38>
 80080bc:	4638      	mov	r0, r7
 80080be:	f7ff fd91 	bl	8007be4 <_Balloc>
 80080c2:	4605      	mov	r5, r0
 80080c4:	b948      	cbnz	r0, 80080da <__lshift+0x3e>
 80080c6:	4602      	mov	r2, r0
 80080c8:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <__lshift+0xd8>)
 80080ca:	482b      	ldr	r0, [pc, #172]	; (8008178 <__lshift+0xdc>)
 80080cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080d0:	f7ff f9c0 	bl	8007454 <__assert_func>
 80080d4:	3101      	adds	r1, #1
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	e7ee      	b.n	80080b8 <__lshift+0x1c>
 80080da:	2300      	movs	r3, #0
 80080dc:	f100 0114 	add.w	r1, r0, #20
 80080e0:	f100 0210 	add.w	r2, r0, #16
 80080e4:	4618      	mov	r0, r3
 80080e6:	4553      	cmp	r3, sl
 80080e8:	db37      	blt.n	800815a <__lshift+0xbe>
 80080ea:	6920      	ldr	r0, [r4, #16]
 80080ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080f0:	f104 0314 	add.w	r3, r4, #20
 80080f4:	f019 091f 	ands.w	r9, r9, #31
 80080f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008100:	d02f      	beq.n	8008162 <__lshift+0xc6>
 8008102:	f1c9 0e20 	rsb	lr, r9, #32
 8008106:	468a      	mov	sl, r1
 8008108:	f04f 0c00 	mov.w	ip, #0
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	fa02 f209 	lsl.w	r2, r2, r9
 8008112:	ea42 020c 	orr.w	r2, r2, ip
 8008116:	f84a 2b04 	str.w	r2, [sl], #4
 800811a:	f853 2b04 	ldr.w	r2, [r3], #4
 800811e:	4298      	cmp	r0, r3
 8008120:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008124:	d8f2      	bhi.n	800810c <__lshift+0x70>
 8008126:	1b03      	subs	r3, r0, r4
 8008128:	3b15      	subs	r3, #21
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	3304      	adds	r3, #4
 8008130:	f104 0215 	add.w	r2, r4, #21
 8008134:	4290      	cmp	r0, r2
 8008136:	bf38      	it	cc
 8008138:	2304      	movcc	r3, #4
 800813a:	f841 c003 	str.w	ip, [r1, r3]
 800813e:	f1bc 0f00 	cmp.w	ip, #0
 8008142:	d001      	beq.n	8008148 <__lshift+0xac>
 8008144:	f108 0602 	add.w	r6, r8, #2
 8008148:	3e01      	subs	r6, #1
 800814a:	4638      	mov	r0, r7
 800814c:	612e      	str	r6, [r5, #16]
 800814e:	4621      	mov	r1, r4
 8008150:	f7ff fd88 	bl	8007c64 <_Bfree>
 8008154:	4628      	mov	r0, r5
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	f842 0f04 	str.w	r0, [r2, #4]!
 800815e:	3301      	adds	r3, #1
 8008160:	e7c1      	b.n	80080e6 <__lshift+0x4a>
 8008162:	3904      	subs	r1, #4
 8008164:	f853 2b04 	ldr.w	r2, [r3], #4
 8008168:	f841 2f04 	str.w	r2, [r1, #4]!
 800816c:	4298      	cmp	r0, r3
 800816e:	d8f9      	bhi.n	8008164 <__lshift+0xc8>
 8008170:	e7ea      	b.n	8008148 <__lshift+0xac>
 8008172:	bf00      	nop
 8008174:	08009a58 	.word	0x08009a58
 8008178:	08009ae4 	.word	0x08009ae4

0800817c <__mcmp>:
 800817c:	b530      	push	{r4, r5, lr}
 800817e:	6902      	ldr	r2, [r0, #16]
 8008180:	690c      	ldr	r4, [r1, #16]
 8008182:	1b12      	subs	r2, r2, r4
 8008184:	d10e      	bne.n	80081a4 <__mcmp+0x28>
 8008186:	f100 0314 	add.w	r3, r0, #20
 800818a:	3114      	adds	r1, #20
 800818c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008190:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008194:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008198:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800819c:	42a5      	cmp	r5, r4
 800819e:	d003      	beq.n	80081a8 <__mcmp+0x2c>
 80081a0:	d305      	bcc.n	80081ae <__mcmp+0x32>
 80081a2:	2201      	movs	r2, #1
 80081a4:	4610      	mov	r0, r2
 80081a6:	bd30      	pop	{r4, r5, pc}
 80081a8:	4283      	cmp	r3, r0
 80081aa:	d3f3      	bcc.n	8008194 <__mcmp+0x18>
 80081ac:	e7fa      	b.n	80081a4 <__mcmp+0x28>
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	e7f7      	b.n	80081a4 <__mcmp+0x28>

080081b4 <__mdiff>:
 80081b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	460c      	mov	r4, r1
 80081ba:	4606      	mov	r6, r0
 80081bc:	4611      	mov	r1, r2
 80081be:	4620      	mov	r0, r4
 80081c0:	4690      	mov	r8, r2
 80081c2:	f7ff ffdb 	bl	800817c <__mcmp>
 80081c6:	1e05      	subs	r5, r0, #0
 80081c8:	d110      	bne.n	80081ec <__mdiff+0x38>
 80081ca:	4629      	mov	r1, r5
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fd09 	bl	8007be4 <_Balloc>
 80081d2:	b930      	cbnz	r0, 80081e2 <__mdiff+0x2e>
 80081d4:	4b3a      	ldr	r3, [pc, #232]	; (80082c0 <__mdiff+0x10c>)
 80081d6:	4602      	mov	r2, r0
 80081d8:	f240 2132 	movw	r1, #562	; 0x232
 80081dc:	4839      	ldr	r0, [pc, #228]	; (80082c4 <__mdiff+0x110>)
 80081de:	f7ff f939 	bl	8007454 <__assert_func>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	bfa4      	itt	ge
 80081ee:	4643      	movge	r3, r8
 80081f0:	46a0      	movge	r8, r4
 80081f2:	4630      	mov	r0, r6
 80081f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081f8:	bfa6      	itte	ge
 80081fa:	461c      	movge	r4, r3
 80081fc:	2500      	movge	r5, #0
 80081fe:	2501      	movlt	r5, #1
 8008200:	f7ff fcf0 	bl	8007be4 <_Balloc>
 8008204:	b920      	cbnz	r0, 8008210 <__mdiff+0x5c>
 8008206:	4b2e      	ldr	r3, [pc, #184]	; (80082c0 <__mdiff+0x10c>)
 8008208:	4602      	mov	r2, r0
 800820a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800820e:	e7e5      	b.n	80081dc <__mdiff+0x28>
 8008210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008214:	6926      	ldr	r6, [r4, #16]
 8008216:	60c5      	str	r5, [r0, #12]
 8008218:	f104 0914 	add.w	r9, r4, #20
 800821c:	f108 0514 	add.w	r5, r8, #20
 8008220:	f100 0e14 	add.w	lr, r0, #20
 8008224:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800822c:	f108 0210 	add.w	r2, r8, #16
 8008230:	46f2      	mov	sl, lr
 8008232:	2100      	movs	r1, #0
 8008234:	f859 3b04 	ldr.w	r3, [r9], #4
 8008238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800823c:	fa1f f883 	uxth.w	r8, r3
 8008240:	fa11 f18b 	uxtah	r1, r1, fp
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	eba1 0808 	sub.w	r8, r1, r8
 800824a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800824e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008252:	fa1f f888 	uxth.w	r8, r8
 8008256:	1419      	asrs	r1, r3, #16
 8008258:	454e      	cmp	r6, r9
 800825a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800825e:	f84a 3b04 	str.w	r3, [sl], #4
 8008262:	d8e7      	bhi.n	8008234 <__mdiff+0x80>
 8008264:	1b33      	subs	r3, r6, r4
 8008266:	3b15      	subs	r3, #21
 8008268:	f023 0303 	bic.w	r3, r3, #3
 800826c:	3304      	adds	r3, #4
 800826e:	3415      	adds	r4, #21
 8008270:	42a6      	cmp	r6, r4
 8008272:	bf38      	it	cc
 8008274:	2304      	movcc	r3, #4
 8008276:	441d      	add	r5, r3
 8008278:	4473      	add	r3, lr
 800827a:	469e      	mov	lr, r3
 800827c:	462e      	mov	r6, r5
 800827e:	4566      	cmp	r6, ip
 8008280:	d30e      	bcc.n	80082a0 <__mdiff+0xec>
 8008282:	f10c 0203 	add.w	r2, ip, #3
 8008286:	1b52      	subs	r2, r2, r5
 8008288:	f022 0203 	bic.w	r2, r2, #3
 800828c:	3d03      	subs	r5, #3
 800828e:	45ac      	cmp	ip, r5
 8008290:	bf38      	it	cc
 8008292:	2200      	movcc	r2, #0
 8008294:	441a      	add	r2, r3
 8008296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800829a:	b17b      	cbz	r3, 80082bc <__mdiff+0x108>
 800829c:	6107      	str	r7, [r0, #16]
 800829e:	e7a3      	b.n	80081e8 <__mdiff+0x34>
 80082a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80082a4:	fa11 f288 	uxtah	r2, r1, r8
 80082a8:	1414      	asrs	r4, r2, #16
 80082aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082ae:	b292      	uxth	r2, r2
 80082b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082b4:	f84e 2b04 	str.w	r2, [lr], #4
 80082b8:	1421      	asrs	r1, r4, #16
 80082ba:	e7e0      	b.n	800827e <__mdiff+0xca>
 80082bc:	3f01      	subs	r7, #1
 80082be:	e7ea      	b.n	8008296 <__mdiff+0xe2>
 80082c0:	08009a58 	.word	0x08009a58
 80082c4:	08009ae4 	.word	0x08009ae4

080082c8 <__ulp>:
 80082c8:	b082      	sub	sp, #8
 80082ca:	ed8d 0b00 	vstr	d0, [sp]
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	4912      	ldr	r1, [pc, #72]	; (800831c <__ulp+0x54>)
 80082d2:	4019      	ands	r1, r3
 80082d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80082d8:	2900      	cmp	r1, #0
 80082da:	dd05      	ble.n	80082e8 <__ulp+0x20>
 80082dc:	2200      	movs	r2, #0
 80082de:	460b      	mov	r3, r1
 80082e0:	ec43 2b10 	vmov	d0, r2, r3
 80082e4:	b002      	add	sp, #8
 80082e6:	4770      	bx	lr
 80082e8:	4249      	negs	r1, r1
 80082ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80082ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	da04      	bge.n	8008306 <__ulp+0x3e>
 80082fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008300:	fa41 f300 	asr.w	r3, r1, r0
 8008304:	e7ec      	b.n	80082e0 <__ulp+0x18>
 8008306:	f1a0 0114 	sub.w	r1, r0, #20
 800830a:	291e      	cmp	r1, #30
 800830c:	bfda      	itte	le
 800830e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008312:	fa20 f101 	lsrle.w	r1, r0, r1
 8008316:	2101      	movgt	r1, #1
 8008318:	460a      	mov	r2, r1
 800831a:	e7e1      	b.n	80082e0 <__ulp+0x18>
 800831c:	7ff00000 	.word	0x7ff00000

08008320 <__b2d>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	6905      	ldr	r5, [r0, #16]
 8008324:	f100 0714 	add.w	r7, r0, #20
 8008328:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800832c:	1f2e      	subs	r6, r5, #4
 800832e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008332:	4620      	mov	r0, r4
 8008334:	f7ff fd48 	bl	8007dc8 <__hi0bits>
 8008338:	f1c0 0320 	rsb	r3, r0, #32
 800833c:	280a      	cmp	r0, #10
 800833e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80083bc <__b2d+0x9c>
 8008342:	600b      	str	r3, [r1, #0]
 8008344:	dc14      	bgt.n	8008370 <__b2d+0x50>
 8008346:	f1c0 0e0b 	rsb	lr, r0, #11
 800834a:	fa24 f10e 	lsr.w	r1, r4, lr
 800834e:	42b7      	cmp	r7, r6
 8008350:	ea41 030c 	orr.w	r3, r1, ip
 8008354:	bf34      	ite	cc
 8008356:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800835a:	2100      	movcs	r1, #0
 800835c:	3015      	adds	r0, #21
 800835e:	fa04 f000 	lsl.w	r0, r4, r0
 8008362:	fa21 f10e 	lsr.w	r1, r1, lr
 8008366:	ea40 0201 	orr.w	r2, r0, r1
 800836a:	ec43 2b10 	vmov	d0, r2, r3
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008370:	42b7      	cmp	r7, r6
 8008372:	bf3a      	itte	cc
 8008374:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008378:	f1a5 0608 	subcc.w	r6, r5, #8
 800837c:	2100      	movcs	r1, #0
 800837e:	380b      	subs	r0, #11
 8008380:	d017      	beq.n	80083b2 <__b2d+0x92>
 8008382:	f1c0 0c20 	rsb	ip, r0, #32
 8008386:	fa04 f500 	lsl.w	r5, r4, r0
 800838a:	42be      	cmp	r6, r7
 800838c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008390:	ea45 0504 	orr.w	r5, r5, r4
 8008394:	bf8c      	ite	hi
 8008396:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800839a:	2400      	movls	r4, #0
 800839c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083a0:	fa01 f000 	lsl.w	r0, r1, r0
 80083a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80083a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083ac:	ea40 0204 	orr.w	r2, r0, r4
 80083b0:	e7db      	b.n	800836a <__b2d+0x4a>
 80083b2:	ea44 030c 	orr.w	r3, r4, ip
 80083b6:	460a      	mov	r2, r1
 80083b8:	e7d7      	b.n	800836a <__b2d+0x4a>
 80083ba:	bf00      	nop
 80083bc:	3ff00000 	.word	0x3ff00000

080083c0 <__d2b>:
 80083c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	4689      	mov	r9, r1
 80083c6:	2101      	movs	r1, #1
 80083c8:	ec57 6b10 	vmov	r6, r7, d0
 80083cc:	4690      	mov	r8, r2
 80083ce:	f7ff fc09 	bl	8007be4 <_Balloc>
 80083d2:	4604      	mov	r4, r0
 80083d4:	b930      	cbnz	r0, 80083e4 <__d2b+0x24>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b25      	ldr	r3, [pc, #148]	; (8008470 <__d2b+0xb0>)
 80083da:	4826      	ldr	r0, [pc, #152]	; (8008474 <__d2b+0xb4>)
 80083dc:	f240 310a 	movw	r1, #778	; 0x30a
 80083e0:	f7ff f838 	bl	8007454 <__assert_func>
 80083e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083ec:	bb35      	cbnz	r5, 800843c <__d2b+0x7c>
 80083ee:	2e00      	cmp	r6, #0
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	d028      	beq.n	8008446 <__d2b+0x86>
 80083f4:	4668      	mov	r0, sp
 80083f6:	9600      	str	r6, [sp, #0]
 80083f8:	f7ff fd06 	bl	8007e08 <__lo0bits>
 80083fc:	9900      	ldr	r1, [sp, #0]
 80083fe:	b300      	cbz	r0, 8008442 <__d2b+0x82>
 8008400:	9a01      	ldr	r2, [sp, #4]
 8008402:	f1c0 0320 	rsb	r3, r0, #32
 8008406:	fa02 f303 	lsl.w	r3, r2, r3
 800840a:	430b      	orrs	r3, r1
 800840c:	40c2      	lsrs	r2, r0
 800840e:	6163      	str	r3, [r4, #20]
 8008410:	9201      	str	r2, [sp, #4]
 8008412:	9b01      	ldr	r3, [sp, #4]
 8008414:	61a3      	str	r3, [r4, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	bf14      	ite	ne
 800841a:	2202      	movne	r2, #2
 800841c:	2201      	moveq	r2, #1
 800841e:	6122      	str	r2, [r4, #16]
 8008420:	b1d5      	cbz	r5, 8008458 <__d2b+0x98>
 8008422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008426:	4405      	add	r5, r0
 8008428:	f8c9 5000 	str.w	r5, [r9]
 800842c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008430:	f8c8 0000 	str.w	r0, [r8]
 8008434:	4620      	mov	r0, r4
 8008436:	b003      	add	sp, #12
 8008438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800843c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008440:	e7d5      	b.n	80083ee <__d2b+0x2e>
 8008442:	6161      	str	r1, [r4, #20]
 8008444:	e7e5      	b.n	8008412 <__d2b+0x52>
 8008446:	a801      	add	r0, sp, #4
 8008448:	f7ff fcde 	bl	8007e08 <__lo0bits>
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	6163      	str	r3, [r4, #20]
 8008450:	2201      	movs	r2, #1
 8008452:	6122      	str	r2, [r4, #16]
 8008454:	3020      	adds	r0, #32
 8008456:	e7e3      	b.n	8008420 <__d2b+0x60>
 8008458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800845c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008460:	f8c9 0000 	str.w	r0, [r9]
 8008464:	6918      	ldr	r0, [r3, #16]
 8008466:	f7ff fcaf 	bl	8007dc8 <__hi0bits>
 800846a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800846e:	e7df      	b.n	8008430 <__d2b+0x70>
 8008470:	08009a58 	.word	0x08009a58
 8008474:	08009ae4 	.word	0x08009ae4

08008478 <__ratio>:
 8008478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	4688      	mov	r8, r1
 800847e:	4669      	mov	r1, sp
 8008480:	4681      	mov	r9, r0
 8008482:	f7ff ff4d 	bl	8008320 <__b2d>
 8008486:	a901      	add	r1, sp, #4
 8008488:	4640      	mov	r0, r8
 800848a:	ec55 4b10 	vmov	r4, r5, d0
 800848e:	f7ff ff47 	bl	8008320 <__b2d>
 8008492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008496:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800849a:	eba3 0c02 	sub.w	ip, r3, r2
 800849e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084a8:	ec51 0b10 	vmov	r0, r1, d0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	bfd6      	itet	le
 80084b0:	460a      	movle	r2, r1
 80084b2:	462a      	movgt	r2, r5
 80084b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084b8:	468b      	mov	fp, r1
 80084ba:	462f      	mov	r7, r5
 80084bc:	bfd4      	ite	le
 80084be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80084c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084c6:	4620      	mov	r0, r4
 80084c8:	ee10 2a10 	vmov	r2, s0
 80084cc:	465b      	mov	r3, fp
 80084ce:	4639      	mov	r1, r7
 80084d0:	f7f8 f9cc 	bl	800086c <__aeabi_ddiv>
 80084d4:	ec41 0b10 	vmov	d0, r0, r1
 80084d8:	b003      	add	sp, #12
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084de <__copybits>:
 80084de:	3901      	subs	r1, #1
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	1149      	asrs	r1, r1, #5
 80084e4:	6914      	ldr	r4, [r2, #16]
 80084e6:	3101      	adds	r1, #1
 80084e8:	f102 0314 	add.w	r3, r2, #20
 80084ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084f4:	1f05      	subs	r5, r0, #4
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	d30c      	bcc.n	8008514 <__copybits+0x36>
 80084fa:	1aa3      	subs	r3, r4, r2
 80084fc:	3b11      	subs	r3, #17
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	3211      	adds	r2, #17
 8008504:	42a2      	cmp	r2, r4
 8008506:	bf88      	it	hi
 8008508:	2300      	movhi	r3, #0
 800850a:	4418      	add	r0, r3
 800850c:	2300      	movs	r3, #0
 800850e:	4288      	cmp	r0, r1
 8008510:	d305      	bcc.n	800851e <__copybits+0x40>
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	f853 6b04 	ldr.w	r6, [r3], #4
 8008518:	f845 6f04 	str.w	r6, [r5, #4]!
 800851c:	e7eb      	b.n	80084f6 <__copybits+0x18>
 800851e:	f840 3b04 	str.w	r3, [r0], #4
 8008522:	e7f4      	b.n	800850e <__copybits+0x30>

08008524 <__any_on>:
 8008524:	f100 0214 	add.w	r2, r0, #20
 8008528:	6900      	ldr	r0, [r0, #16]
 800852a:	114b      	asrs	r3, r1, #5
 800852c:	4298      	cmp	r0, r3
 800852e:	b510      	push	{r4, lr}
 8008530:	db11      	blt.n	8008556 <__any_on+0x32>
 8008532:	dd0a      	ble.n	800854a <__any_on+0x26>
 8008534:	f011 011f 	ands.w	r1, r1, #31
 8008538:	d007      	beq.n	800854a <__any_on+0x26>
 800853a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800853e:	fa24 f001 	lsr.w	r0, r4, r1
 8008542:	fa00 f101 	lsl.w	r1, r0, r1
 8008546:	428c      	cmp	r4, r1
 8008548:	d10b      	bne.n	8008562 <__any_on+0x3e>
 800854a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800854e:	4293      	cmp	r3, r2
 8008550:	d803      	bhi.n	800855a <__any_on+0x36>
 8008552:	2000      	movs	r0, #0
 8008554:	bd10      	pop	{r4, pc}
 8008556:	4603      	mov	r3, r0
 8008558:	e7f7      	b.n	800854a <__any_on+0x26>
 800855a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800855e:	2900      	cmp	r1, #0
 8008560:	d0f5      	beq.n	800854e <__any_on+0x2a>
 8008562:	2001      	movs	r0, #1
 8008564:	e7f6      	b.n	8008554 <__any_on+0x30>

08008566 <_calloc_r>:
 8008566:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008568:	fba1 2402 	umull	r2, r4, r1, r2
 800856c:	b94c      	cbnz	r4, 8008582 <_calloc_r+0x1c>
 800856e:	4611      	mov	r1, r2
 8008570:	9201      	str	r2, [sp, #4]
 8008572:	f000 f87b 	bl	800866c <_malloc_r>
 8008576:	9a01      	ldr	r2, [sp, #4]
 8008578:	4605      	mov	r5, r0
 800857a:	b930      	cbnz	r0, 800858a <_calloc_r+0x24>
 800857c:	4628      	mov	r0, r5
 800857e:	b003      	add	sp, #12
 8008580:	bd30      	pop	{r4, r5, pc}
 8008582:	220c      	movs	r2, #12
 8008584:	6002      	str	r2, [r0, #0]
 8008586:	2500      	movs	r5, #0
 8008588:	e7f8      	b.n	800857c <_calloc_r+0x16>
 800858a:	4621      	mov	r1, r4
 800858c:	f7fe f8ae 	bl	80066ec <memset>
 8008590:	e7f4      	b.n	800857c <_calloc_r+0x16>
	...

08008594 <_free_r>:
 8008594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008596:	2900      	cmp	r1, #0
 8008598:	d044      	beq.n	8008624 <_free_r+0x90>
 800859a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859e:	9001      	str	r0, [sp, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f1a1 0404 	sub.w	r4, r1, #4
 80085a6:	bfb8      	it	lt
 80085a8:	18e4      	addlt	r4, r4, r3
 80085aa:	f001 f859 	bl	8009660 <__malloc_lock>
 80085ae:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <_free_r+0x94>)
 80085b0:	9801      	ldr	r0, [sp, #4]
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	b933      	cbnz	r3, 80085c4 <_free_r+0x30>
 80085b6:	6063      	str	r3, [r4, #4]
 80085b8:	6014      	str	r4, [r2, #0]
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c0:	f001 b854 	b.w	800966c <__malloc_unlock>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d908      	bls.n	80085da <_free_r+0x46>
 80085c8:	6825      	ldr	r5, [r4, #0]
 80085ca:	1961      	adds	r1, r4, r5
 80085cc:	428b      	cmp	r3, r1
 80085ce:	bf01      	itttt	eq
 80085d0:	6819      	ldreq	r1, [r3, #0]
 80085d2:	685b      	ldreq	r3, [r3, #4]
 80085d4:	1949      	addeq	r1, r1, r5
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	e7ed      	b.n	80085b6 <_free_r+0x22>
 80085da:	461a      	mov	r2, r3
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b10b      	cbz	r3, 80085e4 <_free_r+0x50>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d9fa      	bls.n	80085da <_free_r+0x46>
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	1855      	adds	r5, r2, r1
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	d10b      	bne.n	8008604 <_free_r+0x70>
 80085ec:	6824      	ldr	r4, [r4, #0]
 80085ee:	4421      	add	r1, r4
 80085f0:	1854      	adds	r4, r2, r1
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	d1e0      	bne.n	80085ba <_free_r+0x26>
 80085f8:	681c      	ldr	r4, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	6053      	str	r3, [r2, #4]
 80085fe:	4421      	add	r1, r4
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	e7da      	b.n	80085ba <_free_r+0x26>
 8008604:	d902      	bls.n	800860c <_free_r+0x78>
 8008606:	230c      	movs	r3, #12
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	e7d6      	b.n	80085ba <_free_r+0x26>
 800860c:	6825      	ldr	r5, [r4, #0]
 800860e:	1961      	adds	r1, r4, r5
 8008610:	428b      	cmp	r3, r1
 8008612:	bf04      	itt	eq
 8008614:	6819      	ldreq	r1, [r3, #0]
 8008616:	685b      	ldreq	r3, [r3, #4]
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	bf04      	itt	eq
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	6054      	str	r4, [r2, #4]
 8008622:	e7ca      	b.n	80085ba <_free_r+0x26>
 8008624:	b003      	add	sp, #12
 8008626:	bd30      	pop	{r4, r5, pc}
 8008628:	20000438 	.word	0x20000438

0800862c <sbrk_aligned>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	4e0e      	ldr	r6, [pc, #56]	; (8008668 <sbrk_aligned+0x3c>)
 8008630:	460c      	mov	r4, r1
 8008632:	6831      	ldr	r1, [r6, #0]
 8008634:	4605      	mov	r5, r0
 8008636:	b911      	cbnz	r1, 800863e <sbrk_aligned+0x12>
 8008638:	f000 fcde 	bl	8008ff8 <_sbrk_r>
 800863c:	6030      	str	r0, [r6, #0]
 800863e:	4621      	mov	r1, r4
 8008640:	4628      	mov	r0, r5
 8008642:	f000 fcd9 	bl	8008ff8 <_sbrk_r>
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	d00a      	beq.n	8008660 <sbrk_aligned+0x34>
 800864a:	1cc4      	adds	r4, r0, #3
 800864c:	f024 0403 	bic.w	r4, r4, #3
 8008650:	42a0      	cmp	r0, r4
 8008652:	d007      	beq.n	8008664 <sbrk_aligned+0x38>
 8008654:	1a21      	subs	r1, r4, r0
 8008656:	4628      	mov	r0, r5
 8008658:	f000 fcce 	bl	8008ff8 <_sbrk_r>
 800865c:	3001      	adds	r0, #1
 800865e:	d101      	bne.n	8008664 <sbrk_aligned+0x38>
 8008660:	f04f 34ff 	mov.w	r4, #4294967295
 8008664:	4620      	mov	r0, r4
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	2000043c 	.word	0x2000043c

0800866c <_malloc_r>:
 800866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008670:	1ccd      	adds	r5, r1, #3
 8008672:	f025 0503 	bic.w	r5, r5, #3
 8008676:	3508      	adds	r5, #8
 8008678:	2d0c      	cmp	r5, #12
 800867a:	bf38      	it	cc
 800867c:	250c      	movcc	r5, #12
 800867e:	2d00      	cmp	r5, #0
 8008680:	4607      	mov	r7, r0
 8008682:	db01      	blt.n	8008688 <_malloc_r+0x1c>
 8008684:	42a9      	cmp	r1, r5
 8008686:	d905      	bls.n	8008694 <_malloc_r+0x28>
 8008688:	230c      	movs	r3, #12
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	2600      	movs	r6, #0
 800868e:	4630      	mov	r0, r6
 8008690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008694:	4e2e      	ldr	r6, [pc, #184]	; (8008750 <_malloc_r+0xe4>)
 8008696:	f000 ffe3 	bl	8009660 <__malloc_lock>
 800869a:	6833      	ldr	r3, [r6, #0]
 800869c:	461c      	mov	r4, r3
 800869e:	bb34      	cbnz	r4, 80086ee <_malloc_r+0x82>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4638      	mov	r0, r7
 80086a4:	f7ff ffc2 	bl	800862c <sbrk_aligned>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	4604      	mov	r4, r0
 80086ac:	d14d      	bne.n	800874a <_malloc_r+0xde>
 80086ae:	6834      	ldr	r4, [r6, #0]
 80086b0:	4626      	mov	r6, r4
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	d140      	bne.n	8008738 <_malloc_r+0xcc>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	4631      	mov	r1, r6
 80086ba:	4638      	mov	r0, r7
 80086bc:	eb04 0803 	add.w	r8, r4, r3
 80086c0:	f000 fc9a 	bl	8008ff8 <_sbrk_r>
 80086c4:	4580      	cmp	r8, r0
 80086c6:	d13a      	bne.n	800873e <_malloc_r+0xd2>
 80086c8:	6821      	ldr	r1, [r4, #0]
 80086ca:	3503      	adds	r5, #3
 80086cc:	1a6d      	subs	r5, r5, r1
 80086ce:	f025 0503 	bic.w	r5, r5, #3
 80086d2:	3508      	adds	r5, #8
 80086d4:	2d0c      	cmp	r5, #12
 80086d6:	bf38      	it	cc
 80086d8:	250c      	movcc	r5, #12
 80086da:	4629      	mov	r1, r5
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff ffa5 	bl	800862c <sbrk_aligned>
 80086e2:	3001      	adds	r0, #1
 80086e4:	d02b      	beq.n	800873e <_malloc_r+0xd2>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	442b      	add	r3, r5
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	e00e      	b.n	800870c <_malloc_r+0xa0>
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	1b52      	subs	r2, r2, r5
 80086f2:	d41e      	bmi.n	8008732 <_malloc_r+0xc6>
 80086f4:	2a0b      	cmp	r2, #11
 80086f6:	d916      	bls.n	8008726 <_malloc_r+0xba>
 80086f8:	1961      	adds	r1, r4, r5
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	6025      	str	r5, [r4, #0]
 80086fe:	bf18      	it	ne
 8008700:	6059      	strne	r1, [r3, #4]
 8008702:	6863      	ldr	r3, [r4, #4]
 8008704:	bf08      	it	eq
 8008706:	6031      	streq	r1, [r6, #0]
 8008708:	5162      	str	r2, [r4, r5]
 800870a:	604b      	str	r3, [r1, #4]
 800870c:	4638      	mov	r0, r7
 800870e:	f104 060b 	add.w	r6, r4, #11
 8008712:	f000 ffab 	bl	800966c <__malloc_unlock>
 8008716:	f026 0607 	bic.w	r6, r6, #7
 800871a:	1d23      	adds	r3, r4, #4
 800871c:	1af2      	subs	r2, r6, r3
 800871e:	d0b6      	beq.n	800868e <_malloc_r+0x22>
 8008720:	1b9b      	subs	r3, r3, r6
 8008722:	50a3      	str	r3, [r4, r2]
 8008724:	e7b3      	b.n	800868e <_malloc_r+0x22>
 8008726:	6862      	ldr	r2, [r4, #4]
 8008728:	42a3      	cmp	r3, r4
 800872a:	bf0c      	ite	eq
 800872c:	6032      	streq	r2, [r6, #0]
 800872e:	605a      	strne	r2, [r3, #4]
 8008730:	e7ec      	b.n	800870c <_malloc_r+0xa0>
 8008732:	4623      	mov	r3, r4
 8008734:	6864      	ldr	r4, [r4, #4]
 8008736:	e7b2      	b.n	800869e <_malloc_r+0x32>
 8008738:	4634      	mov	r4, r6
 800873a:	6876      	ldr	r6, [r6, #4]
 800873c:	e7b9      	b.n	80086b2 <_malloc_r+0x46>
 800873e:	230c      	movs	r3, #12
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4638      	mov	r0, r7
 8008744:	f000 ff92 	bl	800966c <__malloc_unlock>
 8008748:	e7a1      	b.n	800868e <_malloc_r+0x22>
 800874a:	6025      	str	r5, [r4, #0]
 800874c:	e7de      	b.n	800870c <_malloc_r+0xa0>
 800874e:	bf00      	nop
 8008750:	20000438 	.word	0x20000438

08008754 <__ssputs_r>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	688e      	ldr	r6, [r1, #8]
 800875a:	429e      	cmp	r6, r3
 800875c:	4682      	mov	sl, r0
 800875e:	460c      	mov	r4, r1
 8008760:	4690      	mov	r8, r2
 8008762:	461f      	mov	r7, r3
 8008764:	d838      	bhi.n	80087d8 <__ssputs_r+0x84>
 8008766:	898a      	ldrh	r2, [r1, #12]
 8008768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800876c:	d032      	beq.n	80087d4 <__ssputs_r+0x80>
 800876e:	6825      	ldr	r5, [r4, #0]
 8008770:	6909      	ldr	r1, [r1, #16]
 8008772:	eba5 0901 	sub.w	r9, r5, r1
 8008776:	6965      	ldr	r5, [r4, #20]
 8008778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008780:	3301      	adds	r3, #1
 8008782:	444b      	add	r3, r9
 8008784:	106d      	asrs	r5, r5, #1
 8008786:	429d      	cmp	r5, r3
 8008788:	bf38      	it	cc
 800878a:	461d      	movcc	r5, r3
 800878c:	0553      	lsls	r3, r2, #21
 800878e:	d531      	bpl.n	80087f4 <__ssputs_r+0xa0>
 8008790:	4629      	mov	r1, r5
 8008792:	f7ff ff6b 	bl	800866c <_malloc_r>
 8008796:	4606      	mov	r6, r0
 8008798:	b950      	cbnz	r0, 80087b0 <__ssputs_r+0x5c>
 800879a:	230c      	movs	r3, #12
 800879c:	f8ca 3000 	str.w	r3, [sl]
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	6921      	ldr	r1, [r4, #16]
 80087b2:	464a      	mov	r2, r9
 80087b4:	f7ff fa08 	bl	8007bc8 <memcpy>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	6126      	str	r6, [r4, #16]
 80087c6:	6165      	str	r5, [r4, #20]
 80087c8:	444e      	add	r6, r9
 80087ca:	eba5 0509 	sub.w	r5, r5, r9
 80087ce:	6026      	str	r6, [r4, #0]
 80087d0:	60a5      	str	r5, [r4, #8]
 80087d2:	463e      	mov	r6, r7
 80087d4:	42be      	cmp	r6, r7
 80087d6:	d900      	bls.n	80087da <__ssputs_r+0x86>
 80087d8:	463e      	mov	r6, r7
 80087da:	6820      	ldr	r0, [r4, #0]
 80087dc:	4632      	mov	r2, r6
 80087de:	4641      	mov	r1, r8
 80087e0:	f000 ff24 	bl	800962c <memmove>
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	1b9b      	subs	r3, r3, r6
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	4433      	add	r3, r6
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	2000      	movs	r0, #0
 80087f2:	e7db      	b.n	80087ac <__ssputs_r+0x58>
 80087f4:	462a      	mov	r2, r5
 80087f6:	f000 ff3f 	bl	8009678 <_realloc_r>
 80087fa:	4606      	mov	r6, r0
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d1e1      	bne.n	80087c4 <__ssputs_r+0x70>
 8008800:	6921      	ldr	r1, [r4, #16]
 8008802:	4650      	mov	r0, sl
 8008804:	f7ff fec6 	bl	8008594 <_free_r>
 8008808:	e7c7      	b.n	800879a <__ssputs_r+0x46>
	...

0800880c <_svfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	4698      	mov	r8, r3
 8008812:	898b      	ldrh	r3, [r1, #12]
 8008814:	061b      	lsls	r3, r3, #24
 8008816:	b09d      	sub	sp, #116	; 0x74
 8008818:	4607      	mov	r7, r0
 800881a:	460d      	mov	r5, r1
 800881c:	4614      	mov	r4, r2
 800881e:	d50e      	bpl.n	800883e <_svfiprintf_r+0x32>
 8008820:	690b      	ldr	r3, [r1, #16]
 8008822:	b963      	cbnz	r3, 800883e <_svfiprintf_r+0x32>
 8008824:	2140      	movs	r1, #64	; 0x40
 8008826:	f7ff ff21 	bl	800866c <_malloc_r>
 800882a:	6028      	str	r0, [r5, #0]
 800882c:	6128      	str	r0, [r5, #16]
 800882e:	b920      	cbnz	r0, 800883a <_svfiprintf_r+0x2e>
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	e0d1      	b.n	80089de <_svfiprintf_r+0x1d2>
 800883a:	2340      	movs	r3, #64	; 0x40
 800883c:	616b      	str	r3, [r5, #20]
 800883e:	2300      	movs	r3, #0
 8008840:	9309      	str	r3, [sp, #36]	; 0x24
 8008842:	2320      	movs	r3, #32
 8008844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008848:	f8cd 800c 	str.w	r8, [sp, #12]
 800884c:	2330      	movs	r3, #48	; 0x30
 800884e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089f8 <_svfiprintf_r+0x1ec>
 8008852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008856:	f04f 0901 	mov.w	r9, #1
 800885a:	4623      	mov	r3, r4
 800885c:	469a      	mov	sl, r3
 800885e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008862:	b10a      	cbz	r2, 8008868 <_svfiprintf_r+0x5c>
 8008864:	2a25      	cmp	r2, #37	; 0x25
 8008866:	d1f9      	bne.n	800885c <_svfiprintf_r+0x50>
 8008868:	ebba 0b04 	subs.w	fp, sl, r4
 800886c:	d00b      	beq.n	8008886 <_svfiprintf_r+0x7a>
 800886e:	465b      	mov	r3, fp
 8008870:	4622      	mov	r2, r4
 8008872:	4629      	mov	r1, r5
 8008874:	4638      	mov	r0, r7
 8008876:	f7ff ff6d 	bl	8008754 <__ssputs_r>
 800887a:	3001      	adds	r0, #1
 800887c:	f000 80aa 	beq.w	80089d4 <_svfiprintf_r+0x1c8>
 8008880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008882:	445a      	add	r2, fp
 8008884:	9209      	str	r2, [sp, #36]	; 0x24
 8008886:	f89a 3000 	ldrb.w	r3, [sl]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80a2 	beq.w	80089d4 <_svfiprintf_r+0x1c8>
 8008890:	2300      	movs	r3, #0
 8008892:	f04f 32ff 	mov.w	r2, #4294967295
 8008896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889a:	f10a 0a01 	add.w	sl, sl, #1
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	9307      	str	r3, [sp, #28]
 80088a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088a6:	931a      	str	r3, [sp, #104]	; 0x68
 80088a8:	4654      	mov	r4, sl
 80088aa:	2205      	movs	r2, #5
 80088ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b0:	4851      	ldr	r0, [pc, #324]	; (80089f8 <_svfiprintf_r+0x1ec>)
 80088b2:	f7f7 fca5 	bl	8000200 <memchr>
 80088b6:	9a04      	ldr	r2, [sp, #16]
 80088b8:	b9d8      	cbnz	r0, 80088f2 <_svfiprintf_r+0xe6>
 80088ba:	06d0      	lsls	r0, r2, #27
 80088bc:	bf44      	itt	mi
 80088be:	2320      	movmi	r3, #32
 80088c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c4:	0711      	lsls	r1, r2, #28
 80088c6:	bf44      	itt	mi
 80088c8:	232b      	movmi	r3, #43	; 0x2b
 80088ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ce:	f89a 3000 	ldrb.w	r3, [sl]
 80088d2:	2b2a      	cmp	r3, #42	; 0x2a
 80088d4:	d015      	beq.n	8008902 <_svfiprintf_r+0xf6>
 80088d6:	9a07      	ldr	r2, [sp, #28]
 80088d8:	4654      	mov	r4, sl
 80088da:	2000      	movs	r0, #0
 80088dc:	f04f 0c0a 	mov.w	ip, #10
 80088e0:	4621      	mov	r1, r4
 80088e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e6:	3b30      	subs	r3, #48	; 0x30
 80088e8:	2b09      	cmp	r3, #9
 80088ea:	d94e      	bls.n	800898a <_svfiprintf_r+0x17e>
 80088ec:	b1b0      	cbz	r0, 800891c <_svfiprintf_r+0x110>
 80088ee:	9207      	str	r2, [sp, #28]
 80088f0:	e014      	b.n	800891c <_svfiprintf_r+0x110>
 80088f2:	eba0 0308 	sub.w	r3, r0, r8
 80088f6:	fa09 f303 	lsl.w	r3, r9, r3
 80088fa:	4313      	orrs	r3, r2
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	46a2      	mov	sl, r4
 8008900:	e7d2      	b.n	80088a8 <_svfiprintf_r+0x9c>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	1d19      	adds	r1, r3, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	9103      	str	r1, [sp, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	bfbb      	ittet	lt
 800890e:	425b      	neglt	r3, r3
 8008910:	f042 0202 	orrlt.w	r2, r2, #2
 8008914:	9307      	strge	r3, [sp, #28]
 8008916:	9307      	strlt	r3, [sp, #28]
 8008918:	bfb8      	it	lt
 800891a:	9204      	strlt	r2, [sp, #16]
 800891c:	7823      	ldrb	r3, [r4, #0]
 800891e:	2b2e      	cmp	r3, #46	; 0x2e
 8008920:	d10c      	bne.n	800893c <_svfiprintf_r+0x130>
 8008922:	7863      	ldrb	r3, [r4, #1]
 8008924:	2b2a      	cmp	r3, #42	; 0x2a
 8008926:	d135      	bne.n	8008994 <_svfiprintf_r+0x188>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	1d1a      	adds	r2, r3, #4
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	9203      	str	r2, [sp, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	bfb8      	it	lt
 8008934:	f04f 33ff 	movlt.w	r3, #4294967295
 8008938:	3402      	adds	r4, #2
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a08 <_svfiprintf_r+0x1fc>
 8008940:	7821      	ldrb	r1, [r4, #0]
 8008942:	2203      	movs	r2, #3
 8008944:	4650      	mov	r0, sl
 8008946:	f7f7 fc5b 	bl	8000200 <memchr>
 800894a:	b140      	cbz	r0, 800895e <_svfiprintf_r+0x152>
 800894c:	2340      	movs	r3, #64	; 0x40
 800894e:	eba0 000a 	sub.w	r0, r0, sl
 8008952:	fa03 f000 	lsl.w	r0, r3, r0
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	4303      	orrs	r3, r0
 800895a:	3401      	adds	r4, #1
 800895c:	9304      	str	r3, [sp, #16]
 800895e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008962:	4826      	ldr	r0, [pc, #152]	; (80089fc <_svfiprintf_r+0x1f0>)
 8008964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008968:	2206      	movs	r2, #6
 800896a:	f7f7 fc49 	bl	8000200 <memchr>
 800896e:	2800      	cmp	r0, #0
 8008970:	d038      	beq.n	80089e4 <_svfiprintf_r+0x1d8>
 8008972:	4b23      	ldr	r3, [pc, #140]	; (8008a00 <_svfiprintf_r+0x1f4>)
 8008974:	bb1b      	cbnz	r3, 80089be <_svfiprintf_r+0x1b2>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	3307      	adds	r3, #7
 800897a:	f023 0307 	bic.w	r3, r3, #7
 800897e:	3308      	adds	r3, #8
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	4433      	add	r3, r6
 8008986:	9309      	str	r3, [sp, #36]	; 0x24
 8008988:	e767      	b.n	800885a <_svfiprintf_r+0x4e>
 800898a:	fb0c 3202 	mla	r2, ip, r2, r3
 800898e:	460c      	mov	r4, r1
 8008990:	2001      	movs	r0, #1
 8008992:	e7a5      	b.n	80088e0 <_svfiprintf_r+0xd4>
 8008994:	2300      	movs	r3, #0
 8008996:	3401      	adds	r4, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	4619      	mov	r1, r3
 800899c:	f04f 0c0a 	mov.w	ip, #10
 80089a0:	4620      	mov	r0, r4
 80089a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a6:	3a30      	subs	r2, #48	; 0x30
 80089a8:	2a09      	cmp	r2, #9
 80089aa:	d903      	bls.n	80089b4 <_svfiprintf_r+0x1a8>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0c5      	beq.n	800893c <_svfiprintf_r+0x130>
 80089b0:	9105      	str	r1, [sp, #20]
 80089b2:	e7c3      	b.n	800893c <_svfiprintf_r+0x130>
 80089b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b8:	4604      	mov	r4, r0
 80089ba:	2301      	movs	r3, #1
 80089bc:	e7f0      	b.n	80089a0 <_svfiprintf_r+0x194>
 80089be:	ab03      	add	r3, sp, #12
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	462a      	mov	r2, r5
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <_svfiprintf_r+0x1f8>)
 80089c6:	a904      	add	r1, sp, #16
 80089c8:	4638      	mov	r0, r7
 80089ca:	f3af 8000 	nop.w
 80089ce:	1c42      	adds	r2, r0, #1
 80089d0:	4606      	mov	r6, r0
 80089d2:	d1d6      	bne.n	8008982 <_svfiprintf_r+0x176>
 80089d4:	89ab      	ldrh	r3, [r5, #12]
 80089d6:	065b      	lsls	r3, r3, #25
 80089d8:	f53f af2c 	bmi.w	8008834 <_svfiprintf_r+0x28>
 80089dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089de:	b01d      	add	sp, #116	; 0x74
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	ab03      	add	r3, sp, #12
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	462a      	mov	r2, r5
 80089ea:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <_svfiprintf_r+0x1f8>)
 80089ec:	a904      	add	r1, sp, #16
 80089ee:	4638      	mov	r0, r7
 80089f0:	f000 f9d4 	bl	8008d9c <_printf_i>
 80089f4:	e7eb      	b.n	80089ce <_svfiprintf_r+0x1c2>
 80089f6:	bf00      	nop
 80089f8:	08009c3c 	.word	0x08009c3c
 80089fc:	08009c46 	.word	0x08009c46
 8008a00:	00000000 	.word	0x00000000
 8008a04:	08008755 	.word	0x08008755
 8008a08:	08009c42 	.word	0x08009c42

08008a0c <__sfputc_r>:
 8008a0c:	6893      	ldr	r3, [r2, #8]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	b410      	push	{r4}
 8008a14:	6093      	str	r3, [r2, #8]
 8008a16:	da08      	bge.n	8008a2a <__sfputc_r+0x1e>
 8008a18:	6994      	ldr	r4, [r2, #24]
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	db01      	blt.n	8008a22 <__sfputc_r+0x16>
 8008a1e:	290a      	cmp	r1, #10
 8008a20:	d103      	bne.n	8008a2a <__sfputc_r+0x1e>
 8008a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a26:	f000 bb0b 	b.w	8009040 <__swbuf_r>
 8008a2a:	6813      	ldr	r3, [r2, #0]
 8008a2c:	1c58      	adds	r0, r3, #1
 8008a2e:	6010      	str	r0, [r2, #0]
 8008a30:	7019      	strb	r1, [r3, #0]
 8008a32:	4608      	mov	r0, r1
 8008a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <__sfputs_r>:
 8008a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	460f      	mov	r7, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	18d5      	adds	r5, r2, r3
 8008a44:	42ac      	cmp	r4, r5
 8008a46:	d101      	bne.n	8008a4c <__sfputs_r+0x12>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	e007      	b.n	8008a5c <__sfputs_r+0x22>
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	463a      	mov	r2, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff ffda 	bl	8008a0c <__sfputc_r>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d1f3      	bne.n	8008a44 <__sfputs_r+0xa>
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a60 <_vfiprintf_r>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	460d      	mov	r5, r1
 8008a66:	b09d      	sub	sp, #116	; 0x74
 8008a68:	4614      	mov	r4, r2
 8008a6a:	4698      	mov	r8, r3
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	b118      	cbz	r0, 8008a78 <_vfiprintf_r+0x18>
 8008a70:	6983      	ldr	r3, [r0, #24]
 8008a72:	b90b      	cbnz	r3, 8008a78 <_vfiprintf_r+0x18>
 8008a74:	f000 fcd4 	bl	8009420 <__sinit>
 8008a78:	4b89      	ldr	r3, [pc, #548]	; (8008ca0 <_vfiprintf_r+0x240>)
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	d11b      	bne.n	8008ab6 <_vfiprintf_r+0x56>
 8008a7e:	6875      	ldr	r5, [r6, #4]
 8008a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	d405      	bmi.n	8008a92 <_vfiprintf_r+0x32>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	059a      	lsls	r2, r3, #22
 8008a8a:	d402      	bmi.n	8008a92 <_vfiprintf_r+0x32>
 8008a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8e:	f000 fd65 	bl	800955c <__retarget_lock_acquire_recursive>
 8008a92:	89ab      	ldrh	r3, [r5, #12]
 8008a94:	071b      	lsls	r3, r3, #28
 8008a96:	d501      	bpl.n	8008a9c <_vfiprintf_r+0x3c>
 8008a98:	692b      	ldr	r3, [r5, #16]
 8008a9a:	b9eb      	cbnz	r3, 8008ad8 <_vfiprintf_r+0x78>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 fb2e 	bl	8009100 <__swsetup_r>
 8008aa4:	b1c0      	cbz	r0, 8008ad8 <_vfiprintf_r+0x78>
 8008aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa8:	07dc      	lsls	r4, r3, #31
 8008aaa:	d50e      	bpl.n	8008aca <_vfiprintf_r+0x6a>
 8008aac:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab0:	b01d      	add	sp, #116	; 0x74
 8008ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab6:	4b7b      	ldr	r3, [pc, #492]	; (8008ca4 <_vfiprintf_r+0x244>)
 8008ab8:	429d      	cmp	r5, r3
 8008aba:	d101      	bne.n	8008ac0 <_vfiprintf_r+0x60>
 8008abc:	68b5      	ldr	r5, [r6, #8]
 8008abe:	e7df      	b.n	8008a80 <_vfiprintf_r+0x20>
 8008ac0:	4b79      	ldr	r3, [pc, #484]	; (8008ca8 <_vfiprintf_r+0x248>)
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	bf08      	it	eq
 8008ac6:	68f5      	ldreq	r5, [r6, #12]
 8008ac8:	e7da      	b.n	8008a80 <_vfiprintf_r+0x20>
 8008aca:	89ab      	ldrh	r3, [r5, #12]
 8008acc:	0598      	lsls	r0, r3, #22
 8008ace:	d4ed      	bmi.n	8008aac <_vfiprintf_r+0x4c>
 8008ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad2:	f000 fd44 	bl	800955e <__retarget_lock_release_recursive>
 8008ad6:	e7e9      	b.n	8008aac <_vfiprintf_r+0x4c>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9309      	str	r3, [sp, #36]	; 0x24
 8008adc:	2320      	movs	r3, #32
 8008ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae6:	2330      	movs	r3, #48	; 0x30
 8008ae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cac <_vfiprintf_r+0x24c>
 8008aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008af0:	f04f 0901 	mov.w	r9, #1
 8008af4:	4623      	mov	r3, r4
 8008af6:	469a      	mov	sl, r3
 8008af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008afc:	b10a      	cbz	r2, 8008b02 <_vfiprintf_r+0xa2>
 8008afe:	2a25      	cmp	r2, #37	; 0x25
 8008b00:	d1f9      	bne.n	8008af6 <_vfiprintf_r+0x96>
 8008b02:	ebba 0b04 	subs.w	fp, sl, r4
 8008b06:	d00b      	beq.n	8008b20 <_vfiprintf_r+0xc0>
 8008b08:	465b      	mov	r3, fp
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f7ff ff93 	bl	8008a3a <__sfputs_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	f000 80aa 	beq.w	8008c6e <_vfiprintf_r+0x20e>
 8008b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b1c:	445a      	add	r2, fp
 8008b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b20:	f89a 3000 	ldrb.w	r3, [sl]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80a2 	beq.w	8008c6e <_vfiprintf_r+0x20e>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b34:	f10a 0a01 	add.w	sl, sl, #1
 8008b38:	9304      	str	r3, [sp, #16]
 8008b3a:	9307      	str	r3, [sp, #28]
 8008b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b40:	931a      	str	r3, [sp, #104]	; 0x68
 8008b42:	4654      	mov	r4, sl
 8008b44:	2205      	movs	r2, #5
 8008b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4a:	4858      	ldr	r0, [pc, #352]	; (8008cac <_vfiprintf_r+0x24c>)
 8008b4c:	f7f7 fb58 	bl	8000200 <memchr>
 8008b50:	9a04      	ldr	r2, [sp, #16]
 8008b52:	b9d8      	cbnz	r0, 8008b8c <_vfiprintf_r+0x12c>
 8008b54:	06d1      	lsls	r1, r2, #27
 8008b56:	bf44      	itt	mi
 8008b58:	2320      	movmi	r3, #32
 8008b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b5e:	0713      	lsls	r3, r2, #28
 8008b60:	bf44      	itt	mi
 8008b62:	232b      	movmi	r3, #43	; 0x2b
 8008b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b68:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6e:	d015      	beq.n	8008b9c <_vfiprintf_r+0x13c>
 8008b70:	9a07      	ldr	r2, [sp, #28]
 8008b72:	4654      	mov	r4, sl
 8008b74:	2000      	movs	r0, #0
 8008b76:	f04f 0c0a 	mov.w	ip, #10
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b80:	3b30      	subs	r3, #48	; 0x30
 8008b82:	2b09      	cmp	r3, #9
 8008b84:	d94e      	bls.n	8008c24 <_vfiprintf_r+0x1c4>
 8008b86:	b1b0      	cbz	r0, 8008bb6 <_vfiprintf_r+0x156>
 8008b88:	9207      	str	r2, [sp, #28]
 8008b8a:	e014      	b.n	8008bb6 <_vfiprintf_r+0x156>
 8008b8c:	eba0 0308 	sub.w	r3, r0, r8
 8008b90:	fa09 f303 	lsl.w	r3, r9, r3
 8008b94:	4313      	orrs	r3, r2
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	46a2      	mov	sl, r4
 8008b9a:	e7d2      	b.n	8008b42 <_vfiprintf_r+0xe2>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	1d19      	adds	r1, r3, #4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	9103      	str	r1, [sp, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bfbb      	ittet	lt
 8008ba8:	425b      	neglt	r3, r3
 8008baa:	f042 0202 	orrlt.w	r2, r2, #2
 8008bae:	9307      	strge	r3, [sp, #28]
 8008bb0:	9307      	strlt	r3, [sp, #28]
 8008bb2:	bfb8      	it	lt
 8008bb4:	9204      	strlt	r2, [sp, #16]
 8008bb6:	7823      	ldrb	r3, [r4, #0]
 8008bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bba:	d10c      	bne.n	8008bd6 <_vfiprintf_r+0x176>
 8008bbc:	7863      	ldrb	r3, [r4, #1]
 8008bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc0:	d135      	bne.n	8008c2e <_vfiprintf_r+0x1ce>
 8008bc2:	9b03      	ldr	r3, [sp, #12]
 8008bc4:	1d1a      	adds	r2, r3, #4
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	9203      	str	r2, [sp, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bfb8      	it	lt
 8008bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bd2:	3402      	adds	r4, #2
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cbc <_vfiprintf_r+0x25c>
 8008bda:	7821      	ldrb	r1, [r4, #0]
 8008bdc:	2203      	movs	r2, #3
 8008bde:	4650      	mov	r0, sl
 8008be0:	f7f7 fb0e 	bl	8000200 <memchr>
 8008be4:	b140      	cbz	r0, 8008bf8 <_vfiprintf_r+0x198>
 8008be6:	2340      	movs	r3, #64	; 0x40
 8008be8:	eba0 000a 	sub.w	r0, r0, sl
 8008bec:	fa03 f000 	lsl.w	r0, r3, r0
 8008bf0:	9b04      	ldr	r3, [sp, #16]
 8008bf2:	4303      	orrs	r3, r0
 8008bf4:	3401      	adds	r4, #1
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfc:	482c      	ldr	r0, [pc, #176]	; (8008cb0 <_vfiprintf_r+0x250>)
 8008bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c02:	2206      	movs	r2, #6
 8008c04:	f7f7 fafc 	bl	8000200 <memchr>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d03f      	beq.n	8008c8c <_vfiprintf_r+0x22c>
 8008c0c:	4b29      	ldr	r3, [pc, #164]	; (8008cb4 <_vfiprintf_r+0x254>)
 8008c0e:	bb1b      	cbnz	r3, 8008c58 <_vfiprintf_r+0x1f8>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	3307      	adds	r3, #7
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	3308      	adds	r3, #8
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	443b      	add	r3, r7
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	e767      	b.n	8008af4 <_vfiprintf_r+0x94>
 8008c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c28:	460c      	mov	r4, r1
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e7a5      	b.n	8008b7a <_vfiprintf_r+0x11a>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	3401      	adds	r4, #1
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f04f 0c0a 	mov.w	ip, #10
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c40:	3a30      	subs	r2, #48	; 0x30
 8008c42:	2a09      	cmp	r2, #9
 8008c44:	d903      	bls.n	8008c4e <_vfiprintf_r+0x1ee>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c5      	beq.n	8008bd6 <_vfiprintf_r+0x176>
 8008c4a:	9105      	str	r1, [sp, #20]
 8008c4c:	e7c3      	b.n	8008bd6 <_vfiprintf_r+0x176>
 8008c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c52:	4604      	mov	r4, r0
 8008c54:	2301      	movs	r3, #1
 8008c56:	e7f0      	b.n	8008c3a <_vfiprintf_r+0x1da>
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4b16      	ldr	r3, [pc, #88]	; (8008cb8 <_vfiprintf_r+0x258>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4630      	mov	r0, r6
 8008c64:	f3af 8000 	nop.w
 8008c68:	4607      	mov	r7, r0
 8008c6a:	1c78      	adds	r0, r7, #1
 8008c6c:	d1d6      	bne.n	8008c1c <_vfiprintf_r+0x1bc>
 8008c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c70:	07d9      	lsls	r1, r3, #31
 8008c72:	d405      	bmi.n	8008c80 <_vfiprintf_r+0x220>
 8008c74:	89ab      	ldrh	r3, [r5, #12]
 8008c76:	059a      	lsls	r2, r3, #22
 8008c78:	d402      	bmi.n	8008c80 <_vfiprintf_r+0x220>
 8008c7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c7c:	f000 fc6f 	bl	800955e <__retarget_lock_release_recursive>
 8008c80:	89ab      	ldrh	r3, [r5, #12]
 8008c82:	065b      	lsls	r3, r3, #25
 8008c84:	f53f af12 	bmi.w	8008aac <_vfiprintf_r+0x4c>
 8008c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c8a:	e711      	b.n	8008ab0 <_vfiprintf_r+0x50>
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	462a      	mov	r2, r5
 8008c92:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <_vfiprintf_r+0x258>)
 8008c94:	a904      	add	r1, sp, #16
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 f880 	bl	8008d9c <_printf_i>
 8008c9c:	e7e4      	b.n	8008c68 <_vfiprintf_r+0x208>
 8008c9e:	bf00      	nop
 8008ca0:	08009d90 	.word	0x08009d90
 8008ca4:	08009db0 	.word	0x08009db0
 8008ca8:	08009d70 	.word	0x08009d70
 8008cac:	08009c3c 	.word	0x08009c3c
 8008cb0:	08009c46 	.word	0x08009c46
 8008cb4:	00000000 	.word	0x00000000
 8008cb8:	08008a3b 	.word	0x08008a3b
 8008cbc:	08009c42 	.word	0x08009c42

08008cc0 <_printf_common>:
 8008cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	4699      	mov	r9, r3
 8008cc8:	688a      	ldr	r2, [r1, #8]
 8008cca:	690b      	ldr	r3, [r1, #16]
 8008ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	bfb8      	it	lt
 8008cd4:	4613      	movlt	r3, r2
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cdc:	4607      	mov	r7, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	b10a      	cbz	r2, 8008ce6 <_printf_common+0x26>
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	0699      	lsls	r1, r3, #26
 8008cea:	bf42      	ittt	mi
 8008cec:	6833      	ldrmi	r3, [r6, #0]
 8008cee:	3302      	addmi	r3, #2
 8008cf0:	6033      	strmi	r3, [r6, #0]
 8008cf2:	6825      	ldr	r5, [r4, #0]
 8008cf4:	f015 0506 	ands.w	r5, r5, #6
 8008cf8:	d106      	bne.n	8008d08 <_printf_common+0x48>
 8008cfa:	f104 0a19 	add.w	sl, r4, #25
 8008cfe:	68e3      	ldr	r3, [r4, #12]
 8008d00:	6832      	ldr	r2, [r6, #0]
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	42ab      	cmp	r3, r5
 8008d06:	dc26      	bgt.n	8008d56 <_printf_common+0x96>
 8008d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d0c:	1e13      	subs	r3, r2, #0
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	bf18      	it	ne
 8008d12:	2301      	movne	r3, #1
 8008d14:	0692      	lsls	r2, r2, #26
 8008d16:	d42b      	bmi.n	8008d70 <_printf_common+0xb0>
 8008d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	4638      	mov	r0, r7
 8008d20:	47c0      	blx	r8
 8008d22:	3001      	adds	r0, #1
 8008d24:	d01e      	beq.n	8008d64 <_printf_common+0xa4>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	68e5      	ldr	r5, [r4, #12]
 8008d2a:	6832      	ldr	r2, [r6, #0]
 8008d2c:	f003 0306 	and.w	r3, r3, #6
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	bf08      	it	eq
 8008d34:	1aad      	subeq	r5, r5, r2
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	bf0c      	ite	eq
 8008d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d40:	2500      	movne	r5, #0
 8008d42:	4293      	cmp	r3, r2
 8008d44:	bfc4      	itt	gt
 8008d46:	1a9b      	subgt	r3, r3, r2
 8008d48:	18ed      	addgt	r5, r5, r3
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	341a      	adds	r4, #26
 8008d4e:	42b5      	cmp	r5, r6
 8008d50:	d11a      	bne.n	8008d88 <_printf_common+0xc8>
 8008d52:	2000      	movs	r0, #0
 8008d54:	e008      	b.n	8008d68 <_printf_common+0xa8>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4652      	mov	r2, sl
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	47c0      	blx	r8
 8008d60:	3001      	adds	r0, #1
 8008d62:	d103      	bne.n	8008d6c <_printf_common+0xac>
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	e7c6      	b.n	8008cfe <_printf_common+0x3e>
 8008d70:	18e1      	adds	r1, r4, r3
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	2030      	movs	r0, #48	; 0x30
 8008d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d7a:	4422      	add	r2, r4
 8008d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d84:	3302      	adds	r3, #2
 8008d86:	e7c7      	b.n	8008d18 <_printf_common+0x58>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	4638      	mov	r0, r7
 8008d90:	47c0      	blx	r8
 8008d92:	3001      	adds	r0, #1
 8008d94:	d0e6      	beq.n	8008d64 <_printf_common+0xa4>
 8008d96:	3601      	adds	r6, #1
 8008d98:	e7d9      	b.n	8008d4e <_printf_common+0x8e>
	...

08008d9c <_printf_i>:
 8008d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	7e0f      	ldrb	r7, [r1, #24]
 8008da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008da4:	2f78      	cmp	r7, #120	; 0x78
 8008da6:	4691      	mov	r9, r2
 8008da8:	4680      	mov	r8, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	469a      	mov	sl, r3
 8008dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008db2:	d807      	bhi.n	8008dc4 <_printf_i+0x28>
 8008db4:	2f62      	cmp	r7, #98	; 0x62
 8008db6:	d80a      	bhi.n	8008dce <_printf_i+0x32>
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	f000 80d8 	beq.w	8008f6e <_printf_i+0x1d2>
 8008dbe:	2f58      	cmp	r7, #88	; 0x58
 8008dc0:	f000 80a3 	beq.w	8008f0a <_printf_i+0x16e>
 8008dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dcc:	e03a      	b.n	8008e44 <_printf_i+0xa8>
 8008dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dd2:	2b15      	cmp	r3, #21
 8008dd4:	d8f6      	bhi.n	8008dc4 <_printf_i+0x28>
 8008dd6:	a101      	add	r1, pc, #4	; (adr r1, 8008ddc <_printf_i+0x40>)
 8008dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ddc:	08008e35 	.word	0x08008e35
 8008de0:	08008e49 	.word	0x08008e49
 8008de4:	08008dc5 	.word	0x08008dc5
 8008de8:	08008dc5 	.word	0x08008dc5
 8008dec:	08008dc5 	.word	0x08008dc5
 8008df0:	08008dc5 	.word	0x08008dc5
 8008df4:	08008e49 	.word	0x08008e49
 8008df8:	08008dc5 	.word	0x08008dc5
 8008dfc:	08008dc5 	.word	0x08008dc5
 8008e00:	08008dc5 	.word	0x08008dc5
 8008e04:	08008dc5 	.word	0x08008dc5
 8008e08:	08008f55 	.word	0x08008f55
 8008e0c:	08008e79 	.word	0x08008e79
 8008e10:	08008f37 	.word	0x08008f37
 8008e14:	08008dc5 	.word	0x08008dc5
 8008e18:	08008dc5 	.word	0x08008dc5
 8008e1c:	08008f77 	.word	0x08008f77
 8008e20:	08008dc5 	.word	0x08008dc5
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008dc5 	.word	0x08008dc5
 8008e2c:	08008dc5 	.word	0x08008dc5
 8008e30:	08008f3f 	.word	0x08008f3f
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	602a      	str	r2, [r5, #0]
 8008e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e44:	2301      	movs	r3, #1
 8008e46:	e0a3      	b.n	8008f90 <_printf_i+0x1f4>
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	6829      	ldr	r1, [r5, #0]
 8008e4c:	0606      	lsls	r6, r0, #24
 8008e4e:	f101 0304 	add.w	r3, r1, #4
 8008e52:	d50a      	bpl.n	8008e6a <_printf_i+0xce>
 8008e54:	680e      	ldr	r6, [r1, #0]
 8008e56:	602b      	str	r3, [r5, #0]
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	da03      	bge.n	8008e64 <_printf_i+0xc8>
 8008e5c:	232d      	movs	r3, #45	; 0x2d
 8008e5e:	4276      	negs	r6, r6
 8008e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e64:	485e      	ldr	r0, [pc, #376]	; (8008fe0 <_printf_i+0x244>)
 8008e66:	230a      	movs	r3, #10
 8008e68:	e019      	b.n	8008e9e <_printf_i+0x102>
 8008e6a:	680e      	ldr	r6, [r1, #0]
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e72:	bf18      	it	ne
 8008e74:	b236      	sxthne	r6, r6
 8008e76:	e7ef      	b.n	8008e58 <_printf_i+0xbc>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	6820      	ldr	r0, [r4, #0]
 8008e7c:	1d19      	adds	r1, r3, #4
 8008e7e:	6029      	str	r1, [r5, #0]
 8008e80:	0601      	lsls	r1, r0, #24
 8008e82:	d501      	bpl.n	8008e88 <_printf_i+0xec>
 8008e84:	681e      	ldr	r6, [r3, #0]
 8008e86:	e002      	b.n	8008e8e <_printf_i+0xf2>
 8008e88:	0646      	lsls	r6, r0, #25
 8008e8a:	d5fb      	bpl.n	8008e84 <_printf_i+0xe8>
 8008e8c:	881e      	ldrh	r6, [r3, #0]
 8008e8e:	4854      	ldr	r0, [pc, #336]	; (8008fe0 <_printf_i+0x244>)
 8008e90:	2f6f      	cmp	r7, #111	; 0x6f
 8008e92:	bf0c      	ite	eq
 8008e94:	2308      	moveq	r3, #8
 8008e96:	230a      	movne	r3, #10
 8008e98:	2100      	movs	r1, #0
 8008e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e9e:	6865      	ldr	r5, [r4, #4]
 8008ea0:	60a5      	str	r5, [r4, #8]
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	bfa2      	ittt	ge
 8008ea6:	6821      	ldrge	r1, [r4, #0]
 8008ea8:	f021 0104 	bicge.w	r1, r1, #4
 8008eac:	6021      	strge	r1, [r4, #0]
 8008eae:	b90e      	cbnz	r6, 8008eb4 <_printf_i+0x118>
 8008eb0:	2d00      	cmp	r5, #0
 8008eb2:	d04d      	beq.n	8008f50 <_printf_i+0x1b4>
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eba:	fb03 6711 	mls	r7, r3, r1, r6
 8008ebe:	5dc7      	ldrb	r7, [r0, r7]
 8008ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ec4:	4637      	mov	r7, r6
 8008ec6:	42bb      	cmp	r3, r7
 8008ec8:	460e      	mov	r6, r1
 8008eca:	d9f4      	bls.n	8008eb6 <_printf_i+0x11a>
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d10b      	bne.n	8008ee8 <_printf_i+0x14c>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	07de      	lsls	r6, r3, #31
 8008ed4:	d508      	bpl.n	8008ee8 <_printf_i+0x14c>
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	6861      	ldr	r1, [r4, #4]
 8008eda:	4299      	cmp	r1, r3
 8008edc:	bfde      	ittt	le
 8008ede:	2330      	movle	r3, #48	; 0x30
 8008ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ee8:	1b52      	subs	r2, r2, r5
 8008eea:	6122      	str	r2, [r4, #16]
 8008eec:	f8cd a000 	str.w	sl, [sp]
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	aa03      	add	r2, sp, #12
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	f7ff fee2 	bl	8008cc0 <_printf_common>
 8008efc:	3001      	adds	r0, #1
 8008efe:	d14c      	bne.n	8008f9a <_printf_i+0x1fe>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	b004      	add	sp, #16
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0a:	4835      	ldr	r0, [pc, #212]	; (8008fe0 <_printf_i+0x244>)
 8008f0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f10:	6829      	ldr	r1, [r5, #0]
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f18:	6029      	str	r1, [r5, #0]
 8008f1a:	061d      	lsls	r5, r3, #24
 8008f1c:	d514      	bpl.n	8008f48 <_printf_i+0x1ac>
 8008f1e:	07df      	lsls	r7, r3, #31
 8008f20:	bf44      	itt	mi
 8008f22:	f043 0320 	orrmi.w	r3, r3, #32
 8008f26:	6023      	strmi	r3, [r4, #0]
 8008f28:	b91e      	cbnz	r6, 8008f32 <_printf_i+0x196>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	f023 0320 	bic.w	r3, r3, #32
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	2310      	movs	r3, #16
 8008f34:	e7b0      	b.n	8008e98 <_printf_i+0xfc>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	f043 0320 	orr.w	r3, r3, #32
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	2378      	movs	r3, #120	; 0x78
 8008f40:	4828      	ldr	r0, [pc, #160]	; (8008fe4 <_printf_i+0x248>)
 8008f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f46:	e7e3      	b.n	8008f10 <_printf_i+0x174>
 8008f48:	0659      	lsls	r1, r3, #25
 8008f4a:	bf48      	it	mi
 8008f4c:	b2b6      	uxthmi	r6, r6
 8008f4e:	e7e6      	b.n	8008f1e <_printf_i+0x182>
 8008f50:	4615      	mov	r5, r2
 8008f52:	e7bb      	b.n	8008ecc <_printf_i+0x130>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	6826      	ldr	r6, [r4, #0]
 8008f58:	6961      	ldr	r1, [r4, #20]
 8008f5a:	1d18      	adds	r0, r3, #4
 8008f5c:	6028      	str	r0, [r5, #0]
 8008f5e:	0635      	lsls	r5, r6, #24
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	d501      	bpl.n	8008f68 <_printf_i+0x1cc>
 8008f64:	6019      	str	r1, [r3, #0]
 8008f66:	e002      	b.n	8008f6e <_printf_i+0x1d2>
 8008f68:	0670      	lsls	r0, r6, #25
 8008f6a:	d5fb      	bpl.n	8008f64 <_printf_i+0x1c8>
 8008f6c:	8019      	strh	r1, [r3, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	4615      	mov	r5, r2
 8008f74:	e7ba      	b.n	8008eec <_printf_i+0x150>
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	1d1a      	adds	r2, r3, #4
 8008f7a:	602a      	str	r2, [r5, #0]
 8008f7c:	681d      	ldr	r5, [r3, #0]
 8008f7e:	6862      	ldr	r2, [r4, #4]
 8008f80:	2100      	movs	r1, #0
 8008f82:	4628      	mov	r0, r5
 8008f84:	f7f7 f93c 	bl	8000200 <memchr>
 8008f88:	b108      	cbz	r0, 8008f8e <_printf_i+0x1f2>
 8008f8a:	1b40      	subs	r0, r0, r5
 8008f8c:	6060      	str	r0, [r4, #4]
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	2300      	movs	r3, #0
 8008f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f98:	e7a8      	b.n	8008eec <_printf_i+0x150>
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	462a      	mov	r2, r5
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	47d0      	blx	sl
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d0ab      	beq.n	8008f00 <_printf_i+0x164>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	079b      	lsls	r3, r3, #30
 8008fac:	d413      	bmi.n	8008fd6 <_printf_i+0x23a>
 8008fae:	68e0      	ldr	r0, [r4, #12]
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	4298      	cmp	r0, r3
 8008fb4:	bfb8      	it	lt
 8008fb6:	4618      	movlt	r0, r3
 8008fb8:	e7a4      	b.n	8008f04 <_printf_i+0x168>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	47d0      	blx	sl
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d09b      	beq.n	8008f00 <_printf_i+0x164>
 8008fc8:	3501      	adds	r5, #1
 8008fca:	68e3      	ldr	r3, [r4, #12]
 8008fcc:	9903      	ldr	r1, [sp, #12]
 8008fce:	1a5b      	subs	r3, r3, r1
 8008fd0:	42ab      	cmp	r3, r5
 8008fd2:	dcf2      	bgt.n	8008fba <_printf_i+0x21e>
 8008fd4:	e7eb      	b.n	8008fae <_printf_i+0x212>
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	f104 0619 	add.w	r6, r4, #25
 8008fdc:	e7f5      	b.n	8008fca <_printf_i+0x22e>
 8008fde:	bf00      	nop
 8008fe0:	08009c4d 	.word	0x08009c4d
 8008fe4:	08009c5e 	.word	0x08009c5e

08008fe8 <nan>:
 8008fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ff0 <nan+0x8>
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	00000000 	.word	0x00000000
 8008ff4:	7ff80000 	.word	0x7ff80000

08008ff8 <_sbrk_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d06      	ldr	r5, [pc, #24]	; (8009014 <_sbrk_r+0x1c>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f7f9 fc0a 	bl	800281c <_sbrk>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_sbrk_r+0x1a>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_sbrk_r+0x1a>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	20000444 	.word	0x20000444

08009018 <strncmp>:
 8009018:	b510      	push	{r4, lr}
 800901a:	b17a      	cbz	r2, 800903c <strncmp+0x24>
 800901c:	4603      	mov	r3, r0
 800901e:	3901      	subs	r1, #1
 8009020:	1884      	adds	r4, r0, r2
 8009022:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009026:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800902a:	4290      	cmp	r0, r2
 800902c:	d101      	bne.n	8009032 <strncmp+0x1a>
 800902e:	42a3      	cmp	r3, r4
 8009030:	d101      	bne.n	8009036 <strncmp+0x1e>
 8009032:	1a80      	subs	r0, r0, r2
 8009034:	bd10      	pop	{r4, pc}
 8009036:	2800      	cmp	r0, #0
 8009038:	d1f3      	bne.n	8009022 <strncmp+0xa>
 800903a:	e7fa      	b.n	8009032 <strncmp+0x1a>
 800903c:	4610      	mov	r0, r2
 800903e:	e7f9      	b.n	8009034 <strncmp+0x1c>

08009040 <__swbuf_r>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	460e      	mov	r6, r1
 8009044:	4614      	mov	r4, r2
 8009046:	4605      	mov	r5, r0
 8009048:	b118      	cbz	r0, 8009052 <__swbuf_r+0x12>
 800904a:	6983      	ldr	r3, [r0, #24]
 800904c:	b90b      	cbnz	r3, 8009052 <__swbuf_r+0x12>
 800904e:	f000 f9e7 	bl	8009420 <__sinit>
 8009052:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <__swbuf_r+0x98>)
 8009054:	429c      	cmp	r4, r3
 8009056:	d12b      	bne.n	80090b0 <__swbuf_r+0x70>
 8009058:	686c      	ldr	r4, [r5, #4]
 800905a:	69a3      	ldr	r3, [r4, #24]
 800905c:	60a3      	str	r3, [r4, #8]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	071a      	lsls	r2, r3, #28
 8009062:	d52f      	bpl.n	80090c4 <__swbuf_r+0x84>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	b36b      	cbz	r3, 80090c4 <__swbuf_r+0x84>
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	1ac0      	subs	r0, r0, r3
 800906e:	6963      	ldr	r3, [r4, #20]
 8009070:	b2f6      	uxtb	r6, r6
 8009072:	4283      	cmp	r3, r0
 8009074:	4637      	mov	r7, r6
 8009076:	dc04      	bgt.n	8009082 <__swbuf_r+0x42>
 8009078:	4621      	mov	r1, r4
 800907a:	4628      	mov	r0, r5
 800907c:	f000 f93c 	bl	80092f8 <_fflush_r>
 8009080:	bb30      	cbnz	r0, 80090d0 <__swbuf_r+0x90>
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	3b01      	subs	r3, #1
 8009086:	60a3      	str	r3, [r4, #8]
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	6022      	str	r2, [r4, #0]
 800908e:	701e      	strb	r6, [r3, #0]
 8009090:	6963      	ldr	r3, [r4, #20]
 8009092:	3001      	adds	r0, #1
 8009094:	4283      	cmp	r3, r0
 8009096:	d004      	beq.n	80090a2 <__swbuf_r+0x62>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	07db      	lsls	r3, r3, #31
 800909c:	d506      	bpl.n	80090ac <__swbuf_r+0x6c>
 800909e:	2e0a      	cmp	r6, #10
 80090a0:	d104      	bne.n	80090ac <__swbuf_r+0x6c>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f927 	bl	80092f8 <_fflush_r>
 80090aa:	b988      	cbnz	r0, 80090d0 <__swbuf_r+0x90>
 80090ac:	4638      	mov	r0, r7
 80090ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <__swbuf_r+0x9c>)
 80090b2:	429c      	cmp	r4, r3
 80090b4:	d101      	bne.n	80090ba <__swbuf_r+0x7a>
 80090b6:	68ac      	ldr	r4, [r5, #8]
 80090b8:	e7cf      	b.n	800905a <__swbuf_r+0x1a>
 80090ba:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <__swbuf_r+0xa0>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	bf08      	it	eq
 80090c0:	68ec      	ldreq	r4, [r5, #12]
 80090c2:	e7ca      	b.n	800905a <__swbuf_r+0x1a>
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f81a 	bl	8009100 <__swsetup_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0cb      	beq.n	8009068 <__swbuf_r+0x28>
 80090d0:	f04f 37ff 	mov.w	r7, #4294967295
 80090d4:	e7ea      	b.n	80090ac <__swbuf_r+0x6c>
 80090d6:	bf00      	nop
 80090d8:	08009d90 	.word	0x08009d90
 80090dc:	08009db0 	.word	0x08009db0
 80090e0:	08009d70 	.word	0x08009d70

080090e4 <__ascii_wctomb>:
 80090e4:	b149      	cbz	r1, 80090fa <__ascii_wctomb+0x16>
 80090e6:	2aff      	cmp	r2, #255	; 0xff
 80090e8:	bf85      	ittet	hi
 80090ea:	238a      	movhi	r3, #138	; 0x8a
 80090ec:	6003      	strhi	r3, [r0, #0]
 80090ee:	700a      	strbls	r2, [r1, #0]
 80090f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80090f4:	bf98      	it	ls
 80090f6:	2001      	movls	r0, #1
 80090f8:	4770      	bx	lr
 80090fa:	4608      	mov	r0, r1
 80090fc:	4770      	bx	lr
	...

08009100 <__swsetup_r>:
 8009100:	4b32      	ldr	r3, [pc, #200]	; (80091cc <__swsetup_r+0xcc>)
 8009102:	b570      	push	{r4, r5, r6, lr}
 8009104:	681d      	ldr	r5, [r3, #0]
 8009106:	4606      	mov	r6, r0
 8009108:	460c      	mov	r4, r1
 800910a:	b125      	cbz	r5, 8009116 <__swsetup_r+0x16>
 800910c:	69ab      	ldr	r3, [r5, #24]
 800910e:	b913      	cbnz	r3, 8009116 <__swsetup_r+0x16>
 8009110:	4628      	mov	r0, r5
 8009112:	f000 f985 	bl	8009420 <__sinit>
 8009116:	4b2e      	ldr	r3, [pc, #184]	; (80091d0 <__swsetup_r+0xd0>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d10f      	bne.n	800913c <__swsetup_r+0x3c>
 800911c:	686c      	ldr	r4, [r5, #4]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009124:	0719      	lsls	r1, r3, #28
 8009126:	d42c      	bmi.n	8009182 <__swsetup_r+0x82>
 8009128:	06dd      	lsls	r5, r3, #27
 800912a:	d411      	bmi.n	8009150 <__swsetup_r+0x50>
 800912c:	2309      	movs	r3, #9
 800912e:	6033      	str	r3, [r6, #0]
 8009130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	e03e      	b.n	80091ba <__swsetup_r+0xba>
 800913c:	4b25      	ldr	r3, [pc, #148]	; (80091d4 <__swsetup_r+0xd4>)
 800913e:	429c      	cmp	r4, r3
 8009140:	d101      	bne.n	8009146 <__swsetup_r+0x46>
 8009142:	68ac      	ldr	r4, [r5, #8]
 8009144:	e7eb      	b.n	800911e <__swsetup_r+0x1e>
 8009146:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <__swsetup_r+0xd8>)
 8009148:	429c      	cmp	r4, r3
 800914a:	bf08      	it	eq
 800914c:	68ec      	ldreq	r4, [r5, #12]
 800914e:	e7e6      	b.n	800911e <__swsetup_r+0x1e>
 8009150:	0758      	lsls	r0, r3, #29
 8009152:	d512      	bpl.n	800917a <__swsetup_r+0x7a>
 8009154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009156:	b141      	cbz	r1, 800916a <__swsetup_r+0x6a>
 8009158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800915c:	4299      	cmp	r1, r3
 800915e:	d002      	beq.n	8009166 <__swsetup_r+0x66>
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff fa17 	bl	8008594 <_free_r>
 8009166:	2300      	movs	r3, #0
 8009168:	6363      	str	r3, [r4, #52]	; 0x34
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	2300      	movs	r3, #0
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f043 0308 	orr.w	r3, r3, #8
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	b94b      	cbnz	r3, 800919a <__swsetup_r+0x9a>
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800918c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009190:	d003      	beq.n	800919a <__swsetup_r+0x9a>
 8009192:	4621      	mov	r1, r4
 8009194:	4630      	mov	r0, r6
 8009196:	f000 fa09 	bl	80095ac <__smakebuf_r>
 800919a:	89a0      	ldrh	r0, [r4, #12]
 800919c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a0:	f010 0301 	ands.w	r3, r0, #1
 80091a4:	d00a      	beq.n	80091bc <__swsetup_r+0xbc>
 80091a6:	2300      	movs	r3, #0
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	6963      	ldr	r3, [r4, #20]
 80091ac:	425b      	negs	r3, r3
 80091ae:	61a3      	str	r3, [r4, #24]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	b943      	cbnz	r3, 80091c6 <__swsetup_r+0xc6>
 80091b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b8:	d1ba      	bne.n	8009130 <__swsetup_r+0x30>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
 80091bc:	0781      	lsls	r1, r0, #30
 80091be:	bf58      	it	pl
 80091c0:	6963      	ldrpl	r3, [r4, #20]
 80091c2:	60a3      	str	r3, [r4, #8]
 80091c4:	e7f4      	b.n	80091b0 <__swsetup_r+0xb0>
 80091c6:	2000      	movs	r0, #0
 80091c8:	e7f7      	b.n	80091ba <__swsetup_r+0xba>
 80091ca:	bf00      	nop
 80091cc:	20000020 	.word	0x20000020
 80091d0:	08009d90 	.word	0x08009d90
 80091d4:	08009db0 	.word	0x08009db0
 80091d8:	08009d70 	.word	0x08009d70

080091dc <abort>:
 80091dc:	b508      	push	{r3, lr}
 80091de:	2006      	movs	r0, #6
 80091e0:	f000 faa2 	bl	8009728 <raise>
 80091e4:	2001      	movs	r0, #1
 80091e6:	f7f9 faa1 	bl	800272c <_exit>
	...

080091ec <__sflush_r>:
 80091ec:	898a      	ldrh	r2, [r1, #12]
 80091ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f2:	4605      	mov	r5, r0
 80091f4:	0710      	lsls	r0, r2, #28
 80091f6:	460c      	mov	r4, r1
 80091f8:	d458      	bmi.n	80092ac <__sflush_r+0xc0>
 80091fa:	684b      	ldr	r3, [r1, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dc05      	bgt.n	800920c <__sflush_r+0x20>
 8009200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	dc02      	bgt.n	800920c <__sflush_r+0x20>
 8009206:	2000      	movs	r0, #0
 8009208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800920e:	2e00      	cmp	r6, #0
 8009210:	d0f9      	beq.n	8009206 <__sflush_r+0x1a>
 8009212:	2300      	movs	r3, #0
 8009214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009218:	682f      	ldr	r7, [r5, #0]
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	d032      	beq.n	8009284 <__sflush_r+0x98>
 800921e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	075a      	lsls	r2, r3, #29
 8009224:	d505      	bpl.n	8009232 <__sflush_r+0x46>
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	1ac0      	subs	r0, r0, r3
 800922a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800922c:	b10b      	cbz	r3, 8009232 <__sflush_r+0x46>
 800922e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009230:	1ac0      	subs	r0, r0, r3
 8009232:	2300      	movs	r3, #0
 8009234:	4602      	mov	r2, r0
 8009236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009238:	6a21      	ldr	r1, [r4, #32]
 800923a:	4628      	mov	r0, r5
 800923c:	47b0      	blx	r6
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	d106      	bne.n	8009252 <__sflush_r+0x66>
 8009244:	6829      	ldr	r1, [r5, #0]
 8009246:	291d      	cmp	r1, #29
 8009248:	d82c      	bhi.n	80092a4 <__sflush_r+0xb8>
 800924a:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <__sflush_r+0x108>)
 800924c:	40ca      	lsrs	r2, r1
 800924e:	07d6      	lsls	r6, r2, #31
 8009250:	d528      	bpl.n	80092a4 <__sflush_r+0xb8>
 8009252:	2200      	movs	r2, #0
 8009254:	6062      	str	r2, [r4, #4]
 8009256:	04d9      	lsls	r1, r3, #19
 8009258:	6922      	ldr	r2, [r4, #16]
 800925a:	6022      	str	r2, [r4, #0]
 800925c:	d504      	bpl.n	8009268 <__sflush_r+0x7c>
 800925e:	1c42      	adds	r2, r0, #1
 8009260:	d101      	bne.n	8009266 <__sflush_r+0x7a>
 8009262:	682b      	ldr	r3, [r5, #0]
 8009264:	b903      	cbnz	r3, 8009268 <__sflush_r+0x7c>
 8009266:	6560      	str	r0, [r4, #84]	; 0x54
 8009268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800926a:	602f      	str	r7, [r5, #0]
 800926c:	2900      	cmp	r1, #0
 800926e:	d0ca      	beq.n	8009206 <__sflush_r+0x1a>
 8009270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009274:	4299      	cmp	r1, r3
 8009276:	d002      	beq.n	800927e <__sflush_r+0x92>
 8009278:	4628      	mov	r0, r5
 800927a:	f7ff f98b 	bl	8008594 <_free_r>
 800927e:	2000      	movs	r0, #0
 8009280:	6360      	str	r0, [r4, #52]	; 0x34
 8009282:	e7c1      	b.n	8009208 <__sflush_r+0x1c>
 8009284:	6a21      	ldr	r1, [r4, #32]
 8009286:	2301      	movs	r3, #1
 8009288:	4628      	mov	r0, r5
 800928a:	47b0      	blx	r6
 800928c:	1c41      	adds	r1, r0, #1
 800928e:	d1c7      	bne.n	8009220 <__sflush_r+0x34>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0c4      	beq.n	8009220 <__sflush_r+0x34>
 8009296:	2b1d      	cmp	r3, #29
 8009298:	d001      	beq.n	800929e <__sflush_r+0xb2>
 800929a:	2b16      	cmp	r3, #22
 800929c:	d101      	bne.n	80092a2 <__sflush_r+0xb6>
 800929e:	602f      	str	r7, [r5, #0]
 80092a0:	e7b1      	b.n	8009206 <__sflush_r+0x1a>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	e7ad      	b.n	8009208 <__sflush_r+0x1c>
 80092ac:	690f      	ldr	r7, [r1, #16]
 80092ae:	2f00      	cmp	r7, #0
 80092b0:	d0a9      	beq.n	8009206 <__sflush_r+0x1a>
 80092b2:	0793      	lsls	r3, r2, #30
 80092b4:	680e      	ldr	r6, [r1, #0]
 80092b6:	bf08      	it	eq
 80092b8:	694b      	ldreq	r3, [r1, #20]
 80092ba:	600f      	str	r7, [r1, #0]
 80092bc:	bf18      	it	ne
 80092be:	2300      	movne	r3, #0
 80092c0:	eba6 0807 	sub.w	r8, r6, r7
 80092c4:	608b      	str	r3, [r1, #8]
 80092c6:	f1b8 0f00 	cmp.w	r8, #0
 80092ca:	dd9c      	ble.n	8009206 <__sflush_r+0x1a>
 80092cc:	6a21      	ldr	r1, [r4, #32]
 80092ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092d0:	4643      	mov	r3, r8
 80092d2:	463a      	mov	r2, r7
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b0      	blx	r6
 80092d8:	2800      	cmp	r0, #0
 80092da:	dc06      	bgt.n	80092ea <__sflush_r+0xfe>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	e78e      	b.n	8009208 <__sflush_r+0x1c>
 80092ea:	4407      	add	r7, r0
 80092ec:	eba8 0800 	sub.w	r8, r8, r0
 80092f0:	e7e9      	b.n	80092c6 <__sflush_r+0xda>
 80092f2:	bf00      	nop
 80092f4:	20400001 	.word	0x20400001

080092f8 <_fflush_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	690b      	ldr	r3, [r1, #16]
 80092fc:	4605      	mov	r5, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	b913      	cbnz	r3, 8009308 <_fflush_r+0x10>
 8009302:	2500      	movs	r5, #0
 8009304:	4628      	mov	r0, r5
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	b118      	cbz	r0, 8009312 <_fflush_r+0x1a>
 800930a:	6983      	ldr	r3, [r0, #24]
 800930c:	b90b      	cbnz	r3, 8009312 <_fflush_r+0x1a>
 800930e:	f000 f887 	bl	8009420 <__sinit>
 8009312:	4b14      	ldr	r3, [pc, #80]	; (8009364 <_fflush_r+0x6c>)
 8009314:	429c      	cmp	r4, r3
 8009316:	d11b      	bne.n	8009350 <_fflush_r+0x58>
 8009318:	686c      	ldr	r4, [r5, #4]
 800931a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0ef      	beq.n	8009302 <_fflush_r+0xa>
 8009322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009324:	07d0      	lsls	r0, r2, #31
 8009326:	d404      	bmi.n	8009332 <_fflush_r+0x3a>
 8009328:	0599      	lsls	r1, r3, #22
 800932a:	d402      	bmi.n	8009332 <_fflush_r+0x3a>
 800932c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800932e:	f000 f915 	bl	800955c <__retarget_lock_acquire_recursive>
 8009332:	4628      	mov	r0, r5
 8009334:	4621      	mov	r1, r4
 8009336:	f7ff ff59 	bl	80091ec <__sflush_r>
 800933a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800933c:	07da      	lsls	r2, r3, #31
 800933e:	4605      	mov	r5, r0
 8009340:	d4e0      	bmi.n	8009304 <_fflush_r+0xc>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	059b      	lsls	r3, r3, #22
 8009346:	d4dd      	bmi.n	8009304 <_fflush_r+0xc>
 8009348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934a:	f000 f908 	bl	800955e <__retarget_lock_release_recursive>
 800934e:	e7d9      	b.n	8009304 <_fflush_r+0xc>
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <_fflush_r+0x70>)
 8009352:	429c      	cmp	r4, r3
 8009354:	d101      	bne.n	800935a <_fflush_r+0x62>
 8009356:	68ac      	ldr	r4, [r5, #8]
 8009358:	e7df      	b.n	800931a <_fflush_r+0x22>
 800935a:	4b04      	ldr	r3, [pc, #16]	; (800936c <_fflush_r+0x74>)
 800935c:	429c      	cmp	r4, r3
 800935e:	bf08      	it	eq
 8009360:	68ec      	ldreq	r4, [r5, #12]
 8009362:	e7da      	b.n	800931a <_fflush_r+0x22>
 8009364:	08009d90 	.word	0x08009d90
 8009368:	08009db0 	.word	0x08009db0
 800936c:	08009d70 	.word	0x08009d70

08009370 <std>:
 8009370:	2300      	movs	r3, #0
 8009372:	b510      	push	{r4, lr}
 8009374:	4604      	mov	r4, r0
 8009376:	e9c0 3300 	strd	r3, r3, [r0]
 800937a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800937e:	6083      	str	r3, [r0, #8]
 8009380:	8181      	strh	r1, [r0, #12]
 8009382:	6643      	str	r3, [r0, #100]	; 0x64
 8009384:	81c2      	strh	r2, [r0, #14]
 8009386:	6183      	str	r3, [r0, #24]
 8009388:	4619      	mov	r1, r3
 800938a:	2208      	movs	r2, #8
 800938c:	305c      	adds	r0, #92	; 0x5c
 800938e:	f7fd f9ad 	bl	80066ec <memset>
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <std+0x38>)
 8009394:	6263      	str	r3, [r4, #36]	; 0x24
 8009396:	4b05      	ldr	r3, [pc, #20]	; (80093ac <std+0x3c>)
 8009398:	62a3      	str	r3, [r4, #40]	; 0x28
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <std+0x40>)
 800939c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800939e:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <std+0x44>)
 80093a0:	6224      	str	r4, [r4, #32]
 80093a2:	6323      	str	r3, [r4, #48]	; 0x30
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	bf00      	nop
 80093a8:	08009761 	.word	0x08009761
 80093ac:	08009783 	.word	0x08009783
 80093b0:	080097bb 	.word	0x080097bb
 80093b4:	080097df 	.word	0x080097df

080093b8 <_cleanup_r>:
 80093b8:	4901      	ldr	r1, [pc, #4]	; (80093c0 <_cleanup_r+0x8>)
 80093ba:	f000 b8af 	b.w	800951c <_fwalk_reent>
 80093be:	bf00      	nop
 80093c0:	080092f9 	.word	0x080092f9

080093c4 <__sfmoreglue>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	2268      	movs	r2, #104	; 0x68
 80093c8:	1e4d      	subs	r5, r1, #1
 80093ca:	4355      	muls	r5, r2
 80093cc:	460e      	mov	r6, r1
 80093ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093d2:	f7ff f94b 	bl	800866c <_malloc_r>
 80093d6:	4604      	mov	r4, r0
 80093d8:	b140      	cbz	r0, 80093ec <__sfmoreglue+0x28>
 80093da:	2100      	movs	r1, #0
 80093dc:	e9c0 1600 	strd	r1, r6, [r0]
 80093e0:	300c      	adds	r0, #12
 80093e2:	60a0      	str	r0, [r4, #8]
 80093e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093e8:	f7fd f980 	bl	80066ec <memset>
 80093ec:	4620      	mov	r0, r4
 80093ee:	bd70      	pop	{r4, r5, r6, pc}

080093f0 <__sfp_lock_acquire>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__sfp_lock_acquire+0x8>)
 80093f2:	f000 b8b3 	b.w	800955c <__retarget_lock_acquire_recursive>
 80093f6:	bf00      	nop
 80093f8:	20000441 	.word	0x20000441

080093fc <__sfp_lock_release>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sfp_lock_release+0x8>)
 80093fe:	f000 b8ae 	b.w	800955e <__retarget_lock_release_recursive>
 8009402:	bf00      	nop
 8009404:	20000441 	.word	0x20000441

08009408 <__sinit_lock_acquire>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__sinit_lock_acquire+0x8>)
 800940a:	f000 b8a7 	b.w	800955c <__retarget_lock_acquire_recursive>
 800940e:	bf00      	nop
 8009410:	20000442 	.word	0x20000442

08009414 <__sinit_lock_release>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__sinit_lock_release+0x8>)
 8009416:	f000 b8a2 	b.w	800955e <__retarget_lock_release_recursive>
 800941a:	bf00      	nop
 800941c:	20000442 	.word	0x20000442

08009420 <__sinit>:
 8009420:	b510      	push	{r4, lr}
 8009422:	4604      	mov	r4, r0
 8009424:	f7ff fff0 	bl	8009408 <__sinit_lock_acquire>
 8009428:	69a3      	ldr	r3, [r4, #24]
 800942a:	b11b      	cbz	r3, 8009434 <__sinit+0x14>
 800942c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009430:	f7ff bff0 	b.w	8009414 <__sinit_lock_release>
 8009434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009438:	6523      	str	r3, [r4, #80]	; 0x50
 800943a:	4b13      	ldr	r3, [pc, #76]	; (8009488 <__sinit+0x68>)
 800943c:	4a13      	ldr	r2, [pc, #76]	; (800948c <__sinit+0x6c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	62a2      	str	r2, [r4, #40]	; 0x28
 8009442:	42a3      	cmp	r3, r4
 8009444:	bf04      	itt	eq
 8009446:	2301      	moveq	r3, #1
 8009448:	61a3      	streq	r3, [r4, #24]
 800944a:	4620      	mov	r0, r4
 800944c:	f000 f820 	bl	8009490 <__sfp>
 8009450:	6060      	str	r0, [r4, #4]
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f81c 	bl	8009490 <__sfp>
 8009458:	60a0      	str	r0, [r4, #8]
 800945a:	4620      	mov	r0, r4
 800945c:	f000 f818 	bl	8009490 <__sfp>
 8009460:	2200      	movs	r2, #0
 8009462:	60e0      	str	r0, [r4, #12]
 8009464:	2104      	movs	r1, #4
 8009466:	6860      	ldr	r0, [r4, #4]
 8009468:	f7ff ff82 	bl	8009370 <std>
 800946c:	68a0      	ldr	r0, [r4, #8]
 800946e:	2201      	movs	r2, #1
 8009470:	2109      	movs	r1, #9
 8009472:	f7ff ff7d 	bl	8009370 <std>
 8009476:	68e0      	ldr	r0, [r4, #12]
 8009478:	2202      	movs	r2, #2
 800947a:	2112      	movs	r1, #18
 800947c:	f7ff ff78 	bl	8009370 <std>
 8009480:	2301      	movs	r3, #1
 8009482:	61a3      	str	r3, [r4, #24]
 8009484:	e7d2      	b.n	800942c <__sinit+0xc>
 8009486:	bf00      	nop
 8009488:	08009944 	.word	0x08009944
 800948c:	080093b9 	.word	0x080093b9

08009490 <__sfp>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	4607      	mov	r7, r0
 8009494:	f7ff ffac 	bl	80093f0 <__sfp_lock_acquire>
 8009498:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <__sfp+0x84>)
 800949a:	681e      	ldr	r6, [r3, #0]
 800949c:	69b3      	ldr	r3, [r6, #24]
 800949e:	b913      	cbnz	r3, 80094a6 <__sfp+0x16>
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff ffbd 	bl	8009420 <__sinit>
 80094a6:	3648      	adds	r6, #72	; 0x48
 80094a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	d503      	bpl.n	80094b8 <__sfp+0x28>
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	b30b      	cbz	r3, 80094f8 <__sfp+0x68>
 80094b4:	6836      	ldr	r6, [r6, #0]
 80094b6:	e7f7      	b.n	80094a8 <__sfp+0x18>
 80094b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094bc:	b9d5      	cbnz	r5, 80094f4 <__sfp+0x64>
 80094be:	4b16      	ldr	r3, [pc, #88]	; (8009518 <__sfp+0x88>)
 80094c0:	60e3      	str	r3, [r4, #12]
 80094c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094c6:	6665      	str	r5, [r4, #100]	; 0x64
 80094c8:	f000 f847 	bl	800955a <__retarget_lock_init_recursive>
 80094cc:	f7ff ff96 	bl	80093fc <__sfp_lock_release>
 80094d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094d8:	6025      	str	r5, [r4, #0]
 80094da:	61a5      	str	r5, [r4, #24]
 80094dc:	2208      	movs	r2, #8
 80094de:	4629      	mov	r1, r5
 80094e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094e4:	f7fd f902 	bl	80066ec <memset>
 80094e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094f0:	4620      	mov	r0, r4
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f4:	3468      	adds	r4, #104	; 0x68
 80094f6:	e7d9      	b.n	80094ac <__sfp+0x1c>
 80094f8:	2104      	movs	r1, #4
 80094fa:	4638      	mov	r0, r7
 80094fc:	f7ff ff62 	bl	80093c4 <__sfmoreglue>
 8009500:	4604      	mov	r4, r0
 8009502:	6030      	str	r0, [r6, #0]
 8009504:	2800      	cmp	r0, #0
 8009506:	d1d5      	bne.n	80094b4 <__sfp+0x24>
 8009508:	f7ff ff78 	bl	80093fc <__sfp_lock_release>
 800950c:	230c      	movs	r3, #12
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	e7ee      	b.n	80094f0 <__sfp+0x60>
 8009512:	bf00      	nop
 8009514:	08009944 	.word	0x08009944
 8009518:	ffff0001 	.word	0xffff0001

0800951c <_fwalk_reent>:
 800951c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009520:	4606      	mov	r6, r0
 8009522:	4688      	mov	r8, r1
 8009524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009528:	2700      	movs	r7, #0
 800952a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800952e:	f1b9 0901 	subs.w	r9, r9, #1
 8009532:	d505      	bpl.n	8009540 <_fwalk_reent+0x24>
 8009534:	6824      	ldr	r4, [r4, #0]
 8009536:	2c00      	cmp	r4, #0
 8009538:	d1f7      	bne.n	800952a <_fwalk_reent+0xe>
 800953a:	4638      	mov	r0, r7
 800953c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009540:	89ab      	ldrh	r3, [r5, #12]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d907      	bls.n	8009556 <_fwalk_reent+0x3a>
 8009546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800954a:	3301      	adds	r3, #1
 800954c:	d003      	beq.n	8009556 <_fwalk_reent+0x3a>
 800954e:	4629      	mov	r1, r5
 8009550:	4630      	mov	r0, r6
 8009552:	47c0      	blx	r8
 8009554:	4307      	orrs	r7, r0
 8009556:	3568      	adds	r5, #104	; 0x68
 8009558:	e7e9      	b.n	800952e <_fwalk_reent+0x12>

0800955a <__retarget_lock_init_recursive>:
 800955a:	4770      	bx	lr

0800955c <__retarget_lock_acquire_recursive>:
 800955c:	4770      	bx	lr

0800955e <__retarget_lock_release_recursive>:
 800955e:	4770      	bx	lr

08009560 <__swhatbuf_r>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	460e      	mov	r6, r1
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	2900      	cmp	r1, #0
 800956a:	b096      	sub	sp, #88	; 0x58
 800956c:	4614      	mov	r4, r2
 800956e:	461d      	mov	r5, r3
 8009570:	da08      	bge.n	8009584 <__swhatbuf_r+0x24>
 8009572:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	061a      	lsls	r2, r3, #24
 800957c:	d410      	bmi.n	80095a0 <__swhatbuf_r+0x40>
 800957e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009582:	e00e      	b.n	80095a2 <__swhatbuf_r+0x42>
 8009584:	466a      	mov	r2, sp
 8009586:	f000 f951 	bl	800982c <_fstat_r>
 800958a:	2800      	cmp	r0, #0
 800958c:	dbf1      	blt.n	8009572 <__swhatbuf_r+0x12>
 800958e:	9a01      	ldr	r2, [sp, #4]
 8009590:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009594:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009598:	425a      	negs	r2, r3
 800959a:	415a      	adcs	r2, r3
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	e7ee      	b.n	800957e <__swhatbuf_r+0x1e>
 80095a0:	2340      	movs	r3, #64	; 0x40
 80095a2:	2000      	movs	r0, #0
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	b016      	add	sp, #88	; 0x58
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080095ac <__smakebuf_r>:
 80095ac:	898b      	ldrh	r3, [r1, #12]
 80095ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095b0:	079d      	lsls	r5, r3, #30
 80095b2:	4606      	mov	r6, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	d507      	bpl.n	80095c8 <__smakebuf_r+0x1c>
 80095b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	6123      	str	r3, [r4, #16]
 80095c0:	2301      	movs	r3, #1
 80095c2:	6163      	str	r3, [r4, #20]
 80095c4:	b002      	add	sp, #8
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	ab01      	add	r3, sp, #4
 80095ca:	466a      	mov	r2, sp
 80095cc:	f7ff ffc8 	bl	8009560 <__swhatbuf_r>
 80095d0:	9900      	ldr	r1, [sp, #0]
 80095d2:	4605      	mov	r5, r0
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff f849 	bl	800866c <_malloc_r>
 80095da:	b948      	cbnz	r0, 80095f0 <__smakebuf_r+0x44>
 80095dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e0:	059a      	lsls	r2, r3, #22
 80095e2:	d4ef      	bmi.n	80095c4 <__smakebuf_r+0x18>
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	f043 0302 	orr.w	r3, r3, #2
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	e7e3      	b.n	80095b8 <__smakebuf_r+0xc>
 80095f0:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <__smakebuf_r+0x7c>)
 80095f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	6020      	str	r0, [r4, #0]
 80095f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	6163      	str	r3, [r4, #20]
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	6120      	str	r0, [r4, #16]
 8009606:	b15b      	cbz	r3, 8009620 <__smakebuf_r+0x74>
 8009608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800960c:	4630      	mov	r0, r6
 800960e:	f000 f91f 	bl	8009850 <_isatty_r>
 8009612:	b128      	cbz	r0, 8009620 <__smakebuf_r+0x74>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	f023 0303 	bic.w	r3, r3, #3
 800961a:	f043 0301 	orr.w	r3, r3, #1
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	89a0      	ldrh	r0, [r4, #12]
 8009622:	4305      	orrs	r5, r0
 8009624:	81a5      	strh	r5, [r4, #12]
 8009626:	e7cd      	b.n	80095c4 <__smakebuf_r+0x18>
 8009628:	080093b9 	.word	0x080093b9

0800962c <memmove>:
 800962c:	4288      	cmp	r0, r1
 800962e:	b510      	push	{r4, lr}
 8009630:	eb01 0402 	add.w	r4, r1, r2
 8009634:	d902      	bls.n	800963c <memmove+0x10>
 8009636:	4284      	cmp	r4, r0
 8009638:	4623      	mov	r3, r4
 800963a:	d807      	bhi.n	800964c <memmove+0x20>
 800963c:	1e43      	subs	r3, r0, #1
 800963e:	42a1      	cmp	r1, r4
 8009640:	d008      	beq.n	8009654 <memmove+0x28>
 8009642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800964a:	e7f8      	b.n	800963e <memmove+0x12>
 800964c:	4402      	add	r2, r0
 800964e:	4601      	mov	r1, r0
 8009650:	428a      	cmp	r2, r1
 8009652:	d100      	bne.n	8009656 <memmove+0x2a>
 8009654:	bd10      	pop	{r4, pc}
 8009656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800965a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800965e:	e7f7      	b.n	8009650 <memmove+0x24>

08009660 <__malloc_lock>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__malloc_lock+0x8>)
 8009662:	f7ff bf7b 	b.w	800955c <__retarget_lock_acquire_recursive>
 8009666:	bf00      	nop
 8009668:	20000440 	.word	0x20000440

0800966c <__malloc_unlock>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__malloc_unlock+0x8>)
 800966e:	f7ff bf76 	b.w	800955e <__retarget_lock_release_recursive>
 8009672:	bf00      	nop
 8009674:	20000440 	.word	0x20000440

08009678 <_realloc_r>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	4680      	mov	r8, r0
 800967e:	4614      	mov	r4, r2
 8009680:	460e      	mov	r6, r1
 8009682:	b921      	cbnz	r1, 800968e <_realloc_r+0x16>
 8009684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	4611      	mov	r1, r2
 800968a:	f7fe bfef 	b.w	800866c <_malloc_r>
 800968e:	b92a      	cbnz	r2, 800969c <_realloc_r+0x24>
 8009690:	f7fe ff80 	bl	8008594 <_free_r>
 8009694:	4625      	mov	r5, r4
 8009696:	4628      	mov	r0, r5
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	f000 f8fa 	bl	8009894 <_malloc_usable_size_r>
 80096a0:	4284      	cmp	r4, r0
 80096a2:	4607      	mov	r7, r0
 80096a4:	d802      	bhi.n	80096ac <_realloc_r+0x34>
 80096a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096aa:	d812      	bhi.n	80096d2 <_realloc_r+0x5a>
 80096ac:	4621      	mov	r1, r4
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7fe ffdc 	bl	800866c <_malloc_r>
 80096b4:	4605      	mov	r5, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0ed      	beq.n	8009696 <_realloc_r+0x1e>
 80096ba:	42bc      	cmp	r4, r7
 80096bc:	4622      	mov	r2, r4
 80096be:	4631      	mov	r1, r6
 80096c0:	bf28      	it	cs
 80096c2:	463a      	movcs	r2, r7
 80096c4:	f7fe fa80 	bl	8007bc8 <memcpy>
 80096c8:	4631      	mov	r1, r6
 80096ca:	4640      	mov	r0, r8
 80096cc:	f7fe ff62 	bl	8008594 <_free_r>
 80096d0:	e7e1      	b.n	8009696 <_realloc_r+0x1e>
 80096d2:	4635      	mov	r5, r6
 80096d4:	e7df      	b.n	8009696 <_realloc_r+0x1e>

080096d6 <_raise_r>:
 80096d6:	291f      	cmp	r1, #31
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4604      	mov	r4, r0
 80096dc:	460d      	mov	r5, r1
 80096de:	d904      	bls.n	80096ea <_raise_r+0x14>
 80096e0:	2316      	movs	r3, #22
 80096e2:	6003      	str	r3, [r0, #0]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096ec:	b112      	cbz	r2, 80096f4 <_raise_r+0x1e>
 80096ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096f2:	b94b      	cbnz	r3, 8009708 <_raise_r+0x32>
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f831 	bl	800975c <_getpid_r>
 80096fa:	462a      	mov	r2, r5
 80096fc:	4601      	mov	r1, r0
 80096fe:	4620      	mov	r0, r4
 8009700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009704:	f000 b818 	b.w	8009738 <_kill_r>
 8009708:	2b01      	cmp	r3, #1
 800970a:	d00a      	beq.n	8009722 <_raise_r+0x4c>
 800970c:	1c59      	adds	r1, r3, #1
 800970e:	d103      	bne.n	8009718 <_raise_r+0x42>
 8009710:	2316      	movs	r3, #22
 8009712:	6003      	str	r3, [r0, #0]
 8009714:	2001      	movs	r0, #1
 8009716:	e7e7      	b.n	80096e8 <_raise_r+0x12>
 8009718:	2400      	movs	r4, #0
 800971a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800971e:	4628      	mov	r0, r5
 8009720:	4798      	blx	r3
 8009722:	2000      	movs	r0, #0
 8009724:	e7e0      	b.n	80096e8 <_raise_r+0x12>
	...

08009728 <raise>:
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <raise+0xc>)
 800972a:	4601      	mov	r1, r0
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	f7ff bfd2 	b.w	80096d6 <_raise_r>
 8009732:	bf00      	nop
 8009734:	20000020 	.word	0x20000020

08009738 <_kill_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_kill_r+0x20>)
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7f8 ffe1 	bl	800270c <_kill>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_kill_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_kill_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	20000444 	.word	0x20000444

0800975c <_getpid_r>:
 800975c:	f7f8 bfce 	b.w	80026fc <_getpid>

08009760 <__sread>:
 8009760:	b510      	push	{r4, lr}
 8009762:	460c      	mov	r4, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	f000 f89c 	bl	80098a4 <_read_r>
 800976c:	2800      	cmp	r0, #0
 800976e:	bfab      	itete	ge
 8009770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009772:	89a3      	ldrhlt	r3, [r4, #12]
 8009774:	181b      	addge	r3, r3, r0
 8009776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800977a:	bfac      	ite	ge
 800977c:	6563      	strge	r3, [r4, #84]	; 0x54
 800977e:	81a3      	strhlt	r3, [r4, #12]
 8009780:	bd10      	pop	{r4, pc}

08009782 <__swrite>:
 8009782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	461f      	mov	r7, r3
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	05db      	lsls	r3, r3, #23
 800978c:	4605      	mov	r5, r0
 800978e:	460c      	mov	r4, r1
 8009790:	4616      	mov	r6, r2
 8009792:	d505      	bpl.n	80097a0 <__swrite+0x1e>
 8009794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009798:	2302      	movs	r3, #2
 800979a:	2200      	movs	r2, #0
 800979c:	f000 f868 	bl	8009870 <_lseek_r>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	4628      	mov	r0, r5
 80097b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b6:	f000 b817 	b.w	80097e8 <_write_r>

080097ba <__sseek>:
 80097ba:	b510      	push	{r4, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c2:	f000 f855 	bl	8009870 <_lseek_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	bf15      	itete	ne
 80097cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097d6:	81a3      	strheq	r3, [r4, #12]
 80097d8:	bf18      	it	ne
 80097da:	81a3      	strhne	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__sclose>:
 80097de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e2:	f000 b813 	b.w	800980c <_close_r>
	...

080097e8 <_write_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d07      	ldr	r5, [pc, #28]	; (8009808 <_write_r+0x20>)
 80097ec:	4604      	mov	r4, r0
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f8 ffbf 	bl	800277a <_write>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_write_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_write_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20000444 	.word	0x20000444

0800980c <_close_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d06      	ldr	r5, [pc, #24]	; (8009828 <_close_r+0x1c>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7f8 ffcb 	bl	80027b2 <_close>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_close_r+0x1a>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_close_r+0x1a>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20000444 	.word	0x20000444

0800982c <_fstat_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	; (800984c <_fstat_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f8 ffc6 	bl	80027ca <_fstat>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_fstat_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_fstat_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	20000444 	.word	0x20000444

08009850 <_isatty_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	; (800986c <_isatty_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7f8 ffc5 	bl	80027ea <_isatty>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_isatty_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_isatty_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20000444 	.word	0x20000444

08009870 <_lseek_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d07      	ldr	r5, [pc, #28]	; (8009890 <_lseek_r+0x20>)
 8009874:	4604      	mov	r4, r0
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7f8 ffbe 	bl	8002800 <_lseek>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_lseek_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_lseek_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20000444 	.word	0x20000444

08009894 <_malloc_usable_size_r>:
 8009894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009898:	1f18      	subs	r0, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfbc      	itt	lt
 800989e:	580b      	ldrlt	r3, [r1, r0]
 80098a0:	18c0      	addlt	r0, r0, r3
 80098a2:	4770      	bx	lr

080098a4 <_read_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d07      	ldr	r5, [pc, #28]	; (80098c4 <_read_r+0x20>)
 80098a8:	4604      	mov	r4, r0
 80098aa:	4608      	mov	r0, r1
 80098ac:	4611      	mov	r1, r2
 80098ae:	2200      	movs	r2, #0
 80098b0:	602a      	str	r2, [r5, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f7f8 ff44 	bl	8002740 <_read>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_read_r+0x1e>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_read_r+0x1e>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	20000444 	.word	0x20000444

080098c8 <_init>:
 80098c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ca:	bf00      	nop
 80098cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ce:	bc08      	pop	{r3}
 80098d0:	469e      	mov	lr, r3
 80098d2:	4770      	bx	lr

080098d4 <_fini>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr
